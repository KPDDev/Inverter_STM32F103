
F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db8  08005db8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005db8  08005db8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005db8  08005db8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  20000078  08005e38  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08005e38  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b4ac  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033c7  00000000  00000000  0003b590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000ee38  00000000  00000000  0003e957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d98  00000000  00000000  0004d790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a43  00000000  00000000  0004e528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019037  00000000  00000000  0004ff6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000217ed  00000000  00000000  00068fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00091e5b  00000000  00000000  0008a78f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003910  00000000  00000000  0011c5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0011fefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b6c 	.word	0x08005b6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08005b6c 	.word	0x08005b6c

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__gesf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295
 80004d4:	e006      	b.n	80004e4 <__cmpsf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__lesf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpsf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpsf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004fa:	d011      	beq.n	8000520 <__cmpsf2+0x40>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000502:	bf18      	it	ne
 8000504:	ea90 0f01 	teqne	r0, r1
 8000508:	bf58      	it	pl
 800050a:	ebb2 0003 	subspl.w	r0, r2, r3
 800050e:	bf88      	it	hi
 8000510:	17c8      	asrhi	r0, r1, #31
 8000512:	bf38      	it	cc
 8000514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000518:	bf18      	it	ne
 800051a:	f040 0001 	orrne.w	r0, r0, #1
 800051e:	4770      	bx	lr
 8000520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000524:	d102      	bne.n	800052c <__cmpsf2+0x4c>
 8000526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800052a:	d105      	bne.n	8000538 <__cmpsf2+0x58>
 800052c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000530:	d1e4      	bne.n	80004fc <__cmpsf2+0x1c>
 8000532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000536:	d0e1      	beq.n	80004fc <__cmpsf2+0x1c>
 8000538:	f85d 0b04 	ldr.w	r0, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_cfrcmple>:
 8000540:	4684      	mov	ip, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4661      	mov	r1, ip
 8000546:	e7ff      	b.n	8000548 <__aeabi_cfcmpeq>

08000548 <__aeabi_cfcmpeq>:
 8000548:	b50f      	push	{r0, r1, r2, r3, lr}
 800054a:	f7ff ffc9 	bl	80004e0 <__cmpsf2>
 800054e:	2800      	cmp	r0, #0
 8000550:	bf48      	it	mi
 8000552:	f110 0f00 	cmnmi.w	r0, #0
 8000556:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000558 <__aeabi_fcmpeq>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff fff4 	bl	8000548 <__aeabi_cfcmpeq>
 8000560:	bf0c      	ite	eq
 8000562:	2001      	moveq	r0, #1
 8000564:	2000      	movne	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_fcmplt>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffea 	bl	8000548 <__aeabi_cfcmpeq>
 8000574:	bf34      	ite	cc
 8000576:	2001      	movcc	r0, #1
 8000578:	2000      	movcs	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_fcmple>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffe0 	bl	8000548 <__aeabi_cfcmpeq>
 8000588:	bf94      	ite	ls
 800058a:	2001      	movls	r0, #1
 800058c:	2000      	movhi	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_fcmpge>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffd2 	bl	8000540 <__aeabi_cfrcmple>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_fcmpgt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffc8 	bl	8000540 <__aeabi_cfrcmple>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_f2iz>:
 80005bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005c4:	d30f      	bcc.n	80005e6 <__aeabi_f2iz+0x2a>
 80005c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ce:	d90d      	bls.n	80005ec <__aeabi_f2iz+0x30>
 80005d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005d8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005dc:	fa23 f002 	lsr.w	r0, r3, r2
 80005e0:	bf18      	it	ne
 80005e2:	4240      	negne	r0, r0
 80005e4:	4770      	bx	lr
 80005e6:	f04f 0000 	mov.w	r0, #0
 80005ea:	4770      	bx	lr
 80005ec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005f0:	d101      	bne.n	80005f6 <__aeabi_f2iz+0x3a>
 80005f2:	0242      	lsls	r2, r0, #9
 80005f4:	d105      	bne.n	8000602 <__aeabi_f2iz+0x46>
 80005f6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80005fa:	bf08      	it	eq
 80005fc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000600:	4770      	bx	lr
 8000602:	f04f 0000 	mov.w	r0, #0
 8000606:	4770      	bx	lr

08000608 <LCD_CMD>:
#endif
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
}

void LCD_CMD(unsigned char data)
{
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	4605      	mov	r5, r0
	char data_lower, data_upper;

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);  // RS = 0

	data_upper = ((data >>4) & 0x0F);
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data_upper>>3)&0x01));
 800060c:	4c2c      	ldr	r4, [pc, #176]	; (80006c0 <LCD_CMD+0xb8>)
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);  // RS = 0
 800060e:	2200      	movs	r2, #0
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	482c      	ldr	r0, [pc, #176]	; (80006c4 <LCD_CMD+0xbc>)
 8000614:	f002 fc42 	bl	8002e9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data_upper>>3)&0x01));
 8000618:	4620      	mov	r0, r4
 800061a:	09ea      	lsrs	r2, r5, #7
 800061c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000620:	f002 fc3c 	bl	8002e9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data_upper>>2)&0x01));
 8000624:	4620      	mov	r0, r4
 8000626:	f3c5 1280 	ubfx	r2, r5, #6, #1
 800062a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062e:	f002 fc35 	bl	8002e9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data_upper>>1)&0x01));
 8000632:	4620      	mov	r0, r4
 8000634:	f3c5 1240 	ubfx	r2, r5, #5, #1
 8000638:	2104      	movs	r1, #4
 800063a:	f002 fc2f 	bl	8002e9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data_upper>>0)&0x01));
 800063e:	4620      	mov	r0, r4
 8000640:	f3c5 1200 	ubfx	r2, r5, #4, #1
 8000644:	2102      	movs	r1, #2
 8000646:	f002 fc29 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	4620      	mov	r0, r4
 800064e:	4611      	mov	r1, r2
 8000650:	f002 fc24 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000654:	2002      	movs	r0, #2
 8000656:	f001 fe0b 	bl	8002270 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800065a:	4620      	mov	r0, r4
 800065c:	2200      	movs	r2, #0
 800065e:	2101      	movs	r1, #1
 8000660:	f002 fc1c 	bl	8002e9c <HAL_GPIO_WritePin>
    LCD_ENABLE();

    data_lower = (data & 0x0F);
 8000664:	f005 060f 	and.w	r6, r5, #15
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data_lower>>3)&0x01));
 8000668:	4620      	mov	r0, r4
 800066a:	f3c5 02c0 	ubfx	r2, r5, #3, #1
 800066e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000672:	f002 fc13 	bl	8002e9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data_lower>>2)&0x01));
 8000676:	4620      	mov	r0, r4
 8000678:	f3c6 0280 	ubfx	r2, r6, #2, #1
 800067c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000680:	f002 fc0c 	bl	8002e9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data_lower>>1)&0x01));
 8000684:	4620      	mov	r0, r4
 8000686:	f3c6 0240 	ubfx	r2, r6, #1, #1
 800068a:	2104      	movs	r1, #4
 800068c:	f002 fc06 	bl	8002e9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data_lower>>0)&0x01));
 8000690:	4620      	mov	r0, r4
 8000692:	f005 0201 	and.w	r2, r5, #1
 8000696:	2102      	movs	r1, #2
 8000698:	f002 fc00 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	4620      	mov	r0, r4
 80006a0:	4611      	mov	r1, r2
 80006a2:	f002 fbfb 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80006a6:	2002      	movs	r0, #2
 80006a8:	f001 fde2 	bl	8002270 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80006ac:	4620      	mov	r0, r4
 80006ae:	2200      	movs	r2, #0
 80006b0:	2101      	movs	r1, #1
 80006b2:	f002 fbf3 	bl	8002e9c <HAL_GPIO_WritePin>
#ifdef USE_HAL_DELAY
	HAL_Delay(2);
#else
	delay_ms(2);
#endif
}
 80006b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(2);
 80006ba:	2002      	movs	r0, #2
 80006bc:	f001 bdd8 	b.w	8002270 <HAL_Delay>
 80006c0:	40010c00 	.word	0x40010c00
 80006c4:	40010800 	.word	0x40010800

080006c8 <LCD_INIT>:

void LCD_INIT(void)
{
	//HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);	Away Low

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);  		// EN = 1
 80006c8:	2201      	movs	r2, #1
{
 80006ca:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);  		// EN = 1
 80006cc:	4611      	mov	r1, r2
 80006ce:	4814      	ldr	r0, [pc, #80]	; (8000720 <LCD_INIT+0x58>)
 80006d0:	f002 fbe4 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);		// RS = 0
 80006d4:	2200      	movs	r2, #0
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	4812      	ldr	r0, [pc, #72]	; (8000724 <LCD_INIT+0x5c>)
 80006da:	f002 fbdf 	bl	8002e9c <HAL_GPIO_WritePin>
	 //Initialization of HD44780-based LCD (4-bit HW)
	LCD_CMD(0x33);
 80006de:	2033      	movs	r0, #51	; 0x33
 80006e0:	f7ff ff92 	bl	8000608 <LCD_CMD>
#ifdef USE_HAL_DELAY
	HAL_Delay(4);
 80006e4:	2004      	movs	r0, #4
 80006e6:	f001 fdc3 	bl	8002270 <HAL_Delay>
#else
	delay_ms(4);
#endif
	LCD_CMD(0x32);
 80006ea:	2032      	movs	r0, #50	; 0x32
 80006ec:	f7ff ff8c 	bl	8000608 <LCD_CMD>
#ifdef USE_HAL_DELAY
	HAL_Delay(4);
 80006f0:	2004      	movs	r0, #4
 80006f2:	f001 fdbd 	bl	8002270 <HAL_Delay>
#else
	delay_ms(4);
#endif
	//Function Set 4-bit mode
	LCD_CMD(0x28);
 80006f6:	2028      	movs	r0, #40	; 0x28
 80006f8:	f7ff ff86 	bl	8000608 <LCD_CMD>
	//Display On/Off Control
	LCD_CMD(0x0C);
 80006fc:	200c      	movs	r0, #12
 80006fe:	f7ff ff83 	bl	8000608 <LCD_CMD>
	//Entry mode set
	LCD_CMD(0x06);
 8000702:	2006      	movs	r0, #6
 8000704:	f7ff ff80 	bl	8000608 <LCD_CMD>
	while(*text != '\n');
}

void LCD_CLEAR_DISPLAY(void)
{
	LCD_CMD(0x01);
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff ff7d 	bl	8000608 <LCD_CMD>
#ifdef USE_HAL_DELAY
	HAL_Delay(2);
 800070e:	2002      	movs	r0, #2
 8000710:	f001 fdae 	bl	8002270 <HAL_Delay>
}
 8000714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(200);
 8000718:	20c8      	movs	r0, #200	; 0xc8
 800071a:	f001 bda9 	b.w	8002270 <HAL_Delay>
 800071e:	bf00      	nop
 8000720:	40010c00 	.word	0x40010c00
 8000724:	40010800 	.word	0x40010800

08000728 <LCD_printchar>:
{
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	4605      	mov	r5, r0
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data_upper>>3)&0x01));
 800072c:	4c2c      	ldr	r4, [pc, #176]	; (80007e0 <LCD_printchar+0xb8>)
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);		// RS = 1
 800072e:	2201      	movs	r2, #1
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	482c      	ldr	r0, [pc, #176]	; (80007e4 <LCD_printchar+0xbc>)
 8000734:	f002 fbb2 	bl	8002e9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data_upper>>3)&0x01));
 8000738:	4620      	mov	r0, r4
 800073a:	09ea      	lsrs	r2, r5, #7
 800073c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000740:	f002 fbac 	bl	8002e9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data_upper>>2)&0x01));
 8000744:	4620      	mov	r0, r4
 8000746:	f3c5 1280 	ubfx	r2, r5, #6, #1
 800074a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074e:	f002 fba5 	bl	8002e9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data_upper>>1)&0x01));
 8000752:	4620      	mov	r0, r4
 8000754:	f3c5 1240 	ubfx	r2, r5, #5, #1
 8000758:	2104      	movs	r1, #4
 800075a:	f002 fb9f 	bl	8002e9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data_upper>>0)&0x01));
 800075e:	4620      	mov	r0, r4
 8000760:	f3c5 1200 	ubfx	r2, r5, #4, #1
 8000764:	2102      	movs	r1, #2
 8000766:	f002 fb99 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	4620      	mov	r0, r4
 800076e:	4611      	mov	r1, r2
 8000770:	f002 fb94 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000774:	2002      	movs	r0, #2
 8000776:	f001 fd7b 	bl	8002270 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800077a:	4620      	mov	r0, r4
 800077c:	2200      	movs	r2, #0
 800077e:	2101      	movs	r1, #1
 8000780:	f002 fb8c 	bl	8002e9c <HAL_GPIO_WritePin>
    data_lower = (ascode & 0x0F);
 8000784:	f005 060f 	and.w	r6, r5, #15
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data_lower>>3)&0x01));
 8000788:	4620      	mov	r0, r4
 800078a:	f3c5 02c0 	ubfx	r2, r5, #3, #1
 800078e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000792:	f002 fb83 	bl	8002e9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data_lower>>2)&0x01));
 8000796:	4620      	mov	r0, r4
 8000798:	f3c6 0280 	ubfx	r2, r6, #2, #1
 800079c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a0:	f002 fb7c 	bl	8002e9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data_lower>>1)&0x01));
 80007a4:	4620      	mov	r0, r4
 80007a6:	f3c6 0240 	ubfx	r2, r6, #1, #1
 80007aa:	2104      	movs	r1, #4
 80007ac:	f002 fb76 	bl	8002e9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data_lower>>0)&0x01));
 80007b0:	4620      	mov	r0, r4
 80007b2:	f005 0201 	and.w	r2, r5, #1
 80007b6:	2102      	movs	r1, #2
 80007b8:	f002 fb70 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	4620      	mov	r0, r4
 80007c0:	4611      	mov	r1, r2
 80007c2:	f002 fb6b 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80007c6:	2002      	movs	r0, #2
 80007c8:	f001 fd52 	bl	8002270 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80007cc:	4620      	mov	r0, r4
 80007ce:	2200      	movs	r2, #0
 80007d0:	2101      	movs	r1, #1
 80007d2:	f002 fb63 	bl	8002e9c <HAL_GPIO_WritePin>
}
 80007d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(2);
 80007da:	2002      	movs	r0, #2
 80007dc:	f001 bd48 	b.w	8002270 <HAL_Delay>
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	40010800 	.word	0x40010800

080007e8 <LCD_printstring>:
{
 80007e8:	b510      	push	{r4, lr}
 80007ea:	4604      	mov	r4, r0
		LCD_printchar(*text++);
 80007ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 80007f0:	f7ff ff9a 	bl	8000728 <LCD_printchar>
	while(*text != '\n');
 80007f4:	7823      	ldrb	r3, [r4, #0]
 80007f6:	2b0a      	cmp	r3, #10
 80007f8:	d1f8      	bne.n	80007ec <LCD_printstring+0x4>
}
 80007fa:	bd10      	pop	{r4, pc}

080007fc <LCD_CLEAR_DISPLAY>:
{
 80007fc:	b508      	push	{r3, lr}
	LCD_CMD(0x01);
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff ff02 	bl	8000608 <LCD_CMD>
#else
	delay_ms(2);
#endif
}
 8000804:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(2);
 8000808:	2002      	movs	r0, #2
 800080a:	f001 bd31 	b.w	8002270 <HAL_Delay>
 800080e:	bf00      	nop

08000810 <LCD_DISP_ON>:
	LCD_CMD(0x1C);
}

void LCD_DISP_ON(void)
{
	LCD_CMD(0x0C);
 8000810:	200c      	movs	r0, #12
 8000812:	f7ff bef9 	b.w	8000608 <LCD_CMD>
 8000816:	bf00      	nop

08000818 <LCD_DISP_OFF>:
}

void LCD_DISP_OFF(void)
{
	LCD_CMD(0x08);
 8000818:	2008      	movs	r0, #8
 800081a:	f7ff bef5 	b.w	8000608 <LCD_CMD>
 800081e:	bf00      	nop

08000820 <LCD_LOCATE>:
}

void LCD_LOCATE(uint8_t row, uint8_t column)
{
	column--;
 8000820:	3901      	subs	r1, #1
	switch(row)
 8000822:	2801      	cmp	r0, #1
	column--;
 8000824:	b2c9      	uxtb	r1, r1
	switch(row)
 8000826:	d006      	beq.n	8000836 <LCD_LOCATE+0x16>
 8000828:	2802      	cmp	r0, #2
 800082a:	d103      	bne.n	8000834 <LCD_LOCATE+0x14>
		/* Set cursor to 1st row address and add index*/
		LCD_CMD(column |= 0x80);
		break;
		case 2:
		/* Set cursor to 2nd row address and add index*/
		LCD_CMD(column |= 0x40 | 0x80);
 800082c:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
 8000830:	f7ff beea 	b.w	8000608 <LCD_CMD>
 8000834:	4770      	bx	lr
		LCD_CMD(column |= 0x80);
 8000836:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 800083a:	f7ff bee5 	b.w	8000608 <LCD_CMD>
 800083e:	bf00      	nop

08000840 <LCD_printf>:
		break;
	}
}

void LCD_printf(const char *fmt, ...)
{
 8000840:	b40f      	push	{r0, r1, r2, r3}
 8000842:	b530      	push	{r4, r5, lr}
 8000844:	b083      	sub	sp, #12
 8000846:	aa06      	add	r2, sp, #24
	uint32_t text_size, letter;
	static char text_buffer[32];
	va_list args;

	va_start(args, fmt);
	text_size = vsprintf(text_buffer, fmt, args);
 8000848:	4c0e      	ldr	r4, [pc, #56]	; (8000884 <LCD_printf+0x44>)
{
 800084a:	f852 1b04 	ldr.w	r1, [r2], #4
	text_size = vsprintf(text_buffer, fmt, args);
 800084e:	4620      	mov	r0, r4
	va_start(args, fmt);
 8000850:	9201      	str	r2, [sp, #4]
	text_size = vsprintf(text_buffer, fmt, args);
 8000852:	f004 fcef 	bl	8005234 <vsiprintf>

	// process the string
	for(i =0; i < text_size; i++)
 8000856:	b178      	cbz	r0, 8000878 <LCD_printf+0x38>
 8000858:	1825      	adds	r5, r4, r0
 800085a:	e001      	b.n	8000860 <LCD_printf+0x20>
 800085c:	42ac      	cmp	r4, r5
 800085e:	d00b      	beq.n	8000878 <LCD_printf+0x38>
	{
		letter = text_buffer[i];
 8000860:	f814 0b01 	ldrb.w	r0, [r4], #1

		if(letter == 10)
 8000864:	280a      	cmp	r0, #10
			break;
		else
		{
			if((letter > 0x1F) && (letter < 0x80))
 8000866:	f1a0 0320 	sub.w	r3, r0, #32
		if(letter == 10)
 800086a:	d005      	beq.n	8000878 <LCD_printf+0x38>
			if((letter > 0x1F) && (letter < 0x80))
 800086c:	2b5f      	cmp	r3, #95	; 0x5f
 800086e:	d8f5      	bhi.n	800085c <LCD_printf+0x1c>
			LCD_printchar(letter);
 8000870:	f7ff ff5a 	bl	8000728 <LCD_printchar>
	for(i =0; i < text_size; i++)
 8000874:	42ac      	cmp	r4, r5
 8000876:	d1f3      	bne.n	8000860 <LCD_printf+0x20>
		}
	}
}
 8000878:	b003      	add	sp, #12
 800087a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800087e:	b004      	add	sp, #16
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000094 	.word	0x20000094

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b510      	push	{r4, lr}
 800088a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088c:	2220      	movs	r2, #32
 800088e:	2100      	movs	r1, #0
 8000890:	a80b      	add	r0, sp, #44	; 0x2c
 8000892:	f004 fcd9 	bl	8005248 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000896:	2001      	movs	r0, #1
 8000898:	2110      	movs	r1, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089a:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 800089e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80008ac:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b6:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b8:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ba:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 80008bc:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008be:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f003 f924 	bl	8003b0c <HAL_RCC_OscConfig>
 80008c4:	b108      	cbz	r0, 80008ca <SystemClock_Config+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <SystemClock_Config+0x40>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	4603      	mov	r3, r0
 80008cc:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	e9cd 4306 	strd	r4, r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d8:	4621      	mov	r1, r4
 80008da:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008dc:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e0:	f003 fb04 	bl	8003eec <HAL_RCC_ClockConfig>
 80008e4:	b108      	cbz	r0, 80008ea <SystemClock_Config+0x62>
 80008e6:	b672      	cpsid	i
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <SystemClock_Config+0x60>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80008ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ee:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008f0:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80008f2:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f4:	f003 fbdc 	bl	80040b0 <HAL_RCCEx_PeriphCLKConfig>
 80008f8:	b108      	cbz	r0, 80008fe <SystemClock_Config+0x76>
 80008fa:	b672      	cpsid	i
  while (1)
 80008fc:	e7fe      	b.n	80008fc <SystemClock_Config+0x74>
}
 80008fe:	b014      	add	sp, #80	; 0x50
 8000900:	bd10      	pop	{r4, pc}
 8000902:	bf00      	nop

08000904 <faultCheck>:
	if((invIinInst > INPUT_OVER_CURRENT)&&(flg.InputOverCurrent == RESET))
 8000904:	f241 3188 	movw	r1, #5000	; 0x1388
 8000908:	4a8a      	ldr	r2, [pc, #552]	; (8000b34 <faultCheck+0x230>)
{
 800090a:	b410      	push	{r4}
	if((invIinInst > INPUT_OVER_CURRENT)&&(flg.InputOverCurrent == RESET))
 800090c:	8813      	ldrh	r3, [r2, #0]
 800090e:	b29b      	uxth	r3, r3
 8000910:	428b      	cmp	r3, r1
 8000912:	d911      	bls.n	8000938 <faultCheck+0x34>
 8000914:	4988      	ldr	r1, [pc, #544]	; (8000b38 <faultCheck+0x234>)
 8000916:	784b      	ldrb	r3, [r1, #1]
 8000918:	b973      	cbnz	r3, 8000938 <faultCheck+0x34>
		cnt.InputOverCurrent++;
 800091a:	4b88      	ldr	r3, [pc, #544]	; (8000b3c <faultCheck+0x238>)
 800091c:	885a      	ldrh	r2, [r3, #2]
 800091e:	3201      	adds	r2, #1
 8000920:	b292      	uxth	r2, r2
		if(cnt.InputOverCurrent > CNT_100MS)
 8000922:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
		cnt.InputOverCurrent++;
 8000926:	805a      	strh	r2, [r3, #2]
		if(cnt.InputOverCurrent > CNT_100MS)
 8000928:	d90e      	bls.n	8000948 <faultCheck+0x44>
			if(faultState == faultState_Clear)
 800092a:	4a85      	ldr	r2, [pc, #532]	; (8000b40 <faultCheck+0x23c>)
 800092c:	7810      	ldrb	r0, [r2, #0]
 800092e:	b958      	cbnz	r0, 8000948 <faultCheck+0x44>
				faultState = faultState_InputOverCurrent;
 8000930:	2001      	movs	r0, #1
 8000932:	7010      	strb	r0, [r2, #0]
				flg.InputOverCurrent = SET;
 8000934:	7048      	strb	r0, [r1, #1]
 8000936:	e007      	b.n	8000948 <faultCheck+0x44>
	else if((invIinInst < INPUT_STBY_CURRENT)&&(flg.InputOverCurrent == SET))
 8000938:	8813      	ldrh	r3, [r2, #0]
 800093a:	b29b      	uxth	r3, r3
 800093c:	2b63      	cmp	r3, #99	; 0x63
 800093e:	f240 8137 	bls.w	8000bb0 <faultCheck+0x2ac>
		cnt.InputOverCurrent = 0;
 8000942:	2200      	movs	r2, #0
 8000944:	4b7d      	ldr	r3, [pc, #500]	; (8000b3c <faultCheck+0x238>)
 8000946:	805a      	strh	r2, [r3, #2]
	if((invVinInst < INPUT_UNDER_VOLTAGE_CUTOUT)&&(flg.InputUnderVoltage == RESET))
 8000948:	4a7e      	ldr	r2, [pc, #504]	; (8000b44 <faultCheck+0x240>)
 800094a:	8811      	ldrh	r1, [r2, #0]
 800094c:	b289      	uxth	r1, r1
 800094e:	f5b1 6fe1 	cmp.w	r1, #1800	; 0x708
 8000952:	d213      	bcs.n	800097c <faultCheck+0x78>
 8000954:	4878      	ldr	r0, [pc, #480]	; (8000b38 <faultCheck+0x234>)
 8000956:	7881      	ldrb	r1, [r0, #2]
 8000958:	b981      	cbnz	r1, 800097c <faultCheck+0x78>
		cnt.InputUnderVoltage++;
 800095a:	8899      	ldrh	r1, [r3, #4]
 800095c:	3101      	adds	r1, #1
 800095e:	b289      	uxth	r1, r1
		if(cnt.InputUnderVoltage > CNT_1S)
 8000960:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
		cnt.InputUnderVoltage++;
 8000964:	8099      	strh	r1, [r3, #4]
		if(cnt.InputUnderVoltage > CNT_1S)
 8000966:	d911      	bls.n	800098c <faultCheck+0x88>
			if(faultState == faultState_Clear)
 8000968:	4975      	ldr	r1, [pc, #468]	; (8000b40 <faultCheck+0x23c>)
 800096a:	780c      	ldrb	r4, [r1, #0]
 800096c:	b974      	cbnz	r4, 800098c <faultCheck+0x88>
				faultState = faultState_InputUnderVoltage;
 800096e:	2402      	movs	r4, #2
				flg.InputUnderVoltage = SET;
 8000970:	f04f 0c01 	mov.w	ip, #1
				faultState = faultState_InputUnderVoltage;
 8000974:	700c      	strb	r4, [r1, #0]
				flg.InputUnderVoltage = SET;
 8000976:	f880 c002 	strb.w	ip, [r0, #2]
 800097a:	e007      	b.n	800098c <faultCheck+0x88>
	else if((invVinInst > INPUT_UNDER_VOLTAGE_CUTIN)&&(flg.InputUnderVoltage == SET))
 800097c:	8811      	ldrh	r1, [r2, #0]
 800097e:	b289      	uxth	r1, r1
 8000980:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 8000984:	f200 80fc 	bhi.w	8000b80 <faultCheck+0x27c>
		cnt.InputUnderVoltage = 0;
 8000988:	2100      	movs	r1, #0
 800098a:	8099      	strh	r1, [r3, #4]
	if((invVinInst > INPUT_OVER_VOLTAGE_CUTOUT)&&(flg.InputOverVoltage == RESET))
 800098c:	8811      	ldrh	r1, [r2, #0]
 800098e:	b289      	uxth	r1, r1
 8000990:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
 8000994:	d911      	bls.n	80009ba <faultCheck+0xb6>
 8000996:	4968      	ldr	r1, [pc, #416]	; (8000b38 <faultCheck+0x234>)
 8000998:	78c8      	ldrb	r0, [r1, #3]
 800099a:	b970      	cbnz	r0, 80009ba <faultCheck+0xb6>
		cnt.InputOverVoltage++;
 800099c:	88da      	ldrh	r2, [r3, #6]
 800099e:	3201      	adds	r2, #1
 80009a0:	b292      	uxth	r2, r2
		if(cnt.InputOverVoltage > CNT_200MS)
 80009a2:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
		cnt.InputOverVoltage++;
 80009a6:	80da      	strh	r2, [r3, #6]
		if(cnt.InputOverVoltage > CNT_200MS)
 80009a8:	d90f      	bls.n	80009ca <faultCheck+0xc6>
			if(faultState == faultState_Clear)
 80009aa:	4a65      	ldr	r2, [pc, #404]	; (8000b40 <faultCheck+0x23c>)
 80009ac:	7810      	ldrb	r0, [r2, #0]
 80009ae:	b960      	cbnz	r0, 80009ca <faultCheck+0xc6>
				faultState = faultState_InputOverVoltage;
 80009b0:	2403      	movs	r4, #3
				flg.InputOverVoltage = SET;
 80009b2:	2001      	movs	r0, #1
				faultState = faultState_InputOverVoltage;
 80009b4:	7014      	strb	r4, [r2, #0]
				flg.InputOverVoltage = SET;
 80009b6:	70c8      	strb	r0, [r1, #3]
 80009b8:	e007      	b.n	80009ca <faultCheck+0xc6>
	else if((invVinInst < INPUT_OVER_VOLTAGE_CUTIN)&&(flg.InputOverVoltage == SET))
 80009ba:	8812      	ldrh	r2, [r2, #0]
 80009bc:	b292      	uxth	r2, r2
 80009be:	f5b2 6f2f 	cmp.w	r2, #2800	; 0xaf0
 80009c2:	f0c0 80c7 	bcc.w	8000b54 <faultCheck+0x250>
		cnt.InputOverVoltage = 0;
 80009c6:	2200      	movs	r2, #0
 80009c8:	80da      	strh	r2, [r3, #6]
	if((invVoutInst > OUTPUT_OVER_VOLTAGE)&&(flg.OutputOverVoltage == RESET))
 80009ca:	f646 5060 	movw	r0, #28000	; 0x6d60
 80009ce:	495e      	ldr	r1, [pc, #376]	; (8000b48 <faultCheck+0x244>)
 80009d0:	880a      	ldrh	r2, [r1, #0]
 80009d2:	b292      	uxth	r2, r2
 80009d4:	4282      	cmp	r2, r0
 80009d6:	d911      	bls.n	80009fc <faultCheck+0xf8>
 80009d8:	4857      	ldr	r0, [pc, #348]	; (8000b38 <faultCheck+0x234>)
 80009da:	7902      	ldrb	r2, [r0, #4]
 80009dc:	b972      	cbnz	r2, 80009fc <faultCheck+0xf8>
		cnt.OutputOverVoltage++;
 80009de:	891a      	ldrh	r2, [r3, #8]
 80009e0:	3201      	adds	r2, #1
 80009e2:	b292      	uxth	r2, r2
		if(cnt.OutputOverVoltage > CNT_100MS)
 80009e4:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
		cnt.OutputOverVoltage++;
 80009e8:	811a      	strh	r2, [r3, #8]
		if(cnt.OutputOverVoltage > CNT_100MS)
 80009ea:	d90f      	bls.n	8000a0c <faultCheck+0x108>
			if(faultState == faultState_Clear)
 80009ec:	4a54      	ldr	r2, [pc, #336]	; (8000b40 <faultCheck+0x23c>)
 80009ee:	7811      	ldrb	r1, [r2, #0]
 80009f0:	b961      	cbnz	r1, 8000a0c <faultCheck+0x108>
				faultState = faultState_OutputOverVoltage;
 80009f2:	2404      	movs	r4, #4
				flg.OutputOverVoltage = SET;
 80009f4:	2101      	movs	r1, #1
				faultState = faultState_OutputOverVoltage;
 80009f6:	7014      	strb	r4, [r2, #0]
				flg.OutputOverVoltage = SET;
 80009f8:	7101      	strb	r1, [r0, #4]
 80009fa:	e007      	b.n	8000a0c <faultCheck+0x108>
	else if((invVoutInst <= OUTPUT_VOLTAGE)&&(flg.OutputOverVoltage == SET))
 80009fc:	f245 50f0 	movw	r0, #22000	; 0x55f0
 8000a00:	880a      	ldrh	r2, [r1, #0]
 8000a02:	b292      	uxth	r2, r2
 8000a04:	4282      	cmp	r2, r0
 8000a06:	d97f      	bls.n	8000b08 <faultCheck+0x204>
		cnt.OutputOverVoltage = 0;
 8000a08:	2200      	movs	r2, #0
 8000a0a:	811a      	strh	r2, [r3, #8]
	if((invIoutInst > OUTPUT_OVER_CURRENT)&&(flg.OutputOverCurrent == RESET))
 8000a0c:	494f      	ldr	r1, [pc, #316]	; (8000b4c <faultCheck+0x248>)
 8000a0e:	880a      	ldrh	r2, [r1, #0]
 8000a10:	b292      	uxth	r2, r2
 8000a12:	f5b2 6f7a 	cmp.w	r2, #4000	; 0xfa0
 8000a16:	d911      	bls.n	8000a3c <faultCheck+0x138>
 8000a18:	4847      	ldr	r0, [pc, #284]	; (8000b38 <faultCheck+0x234>)
 8000a1a:	7942      	ldrb	r2, [r0, #5]
 8000a1c:	b972      	cbnz	r2, 8000a3c <faultCheck+0x138>
		cnt.OutputOverCurrent++;
 8000a1e:	895a      	ldrh	r2, [r3, #10]
 8000a20:	3201      	adds	r2, #1
 8000a22:	b292      	uxth	r2, r2
		if(cnt.OutputOverCurrent > CNT_200MS)
 8000a24:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
		cnt.OutputOverCurrent++;
 8000a28:	815a      	strh	r2, [r3, #10]
		if(cnt.OutputOverCurrent > CNT_200MS)
 8000a2a:	d90d      	bls.n	8000a48 <faultCheck+0x144>
			if(faultState == faultState_Clear)
 8000a2c:	4a44      	ldr	r2, [pc, #272]	; (8000b40 <faultCheck+0x23c>)
 8000a2e:	7811      	ldrb	r1, [r2, #0]
 8000a30:	b951      	cbnz	r1, 8000a48 <faultCheck+0x144>
				faultState = faultState_OutputOverCurrent;
 8000a32:	2405      	movs	r4, #5
				flg.OutputOverCurrent = SET;
 8000a34:	2101      	movs	r1, #1
				faultState = faultState_OutputOverCurrent;
 8000a36:	7014      	strb	r4, [r2, #0]
				flg.OutputOverCurrent = SET;
 8000a38:	7141      	strb	r1, [r0, #5]
 8000a3a:	e005      	b.n	8000a48 <faultCheck+0x144>
	else if((invIoutInst < OUTPUT_STBY_CURRENT)&&(flg.OutputOverCurrent == SET))
 8000a3c:	880a      	ldrh	r2, [r1, #0]
 8000a3e:	b292      	uxth	r2, r2
 8000a40:	2ac7      	cmp	r2, #199	; 0xc7
 8000a42:	d94e      	bls.n	8000ae2 <faultCheck+0x1de>
		cnt.OutputOverCurrent = 0;
 8000a44:	2200      	movs	r2, #0
 8000a46:	815a      	strh	r2, [r3, #10]
	if((ntc.mosfet > TEMP_70C)&&(flg.MosfetOverTemp == RESET))
 8000a48:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000a4c:	4a40      	ldr	r2, [pc, #256]	; (8000b50 <faultCheck+0x24c>)
 8000a4e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000a52:	4281      	cmp	r1, r0
 8000a54:	dd2c      	ble.n	8000ab0 <faultCheck+0x1ac>
 8000a56:	4838      	ldr	r0, [pc, #224]	; (8000b38 <faultCheck+0x234>)
 8000a58:	79c1      	ldrb	r1, [r0, #7]
 8000a5a:	2900      	cmp	r1, #0
 8000a5c:	f000 80d1 	beq.w	8000c02 <faultCheck+0x2fe>
		cnt.MosfetOverTemp = 0;
 8000a60:	2100      	movs	r1, #0
 8000a62:	81d9      	strh	r1, [r3, #14]
	if((ntc.transformer > TEMP_70C)&&(flg.TransOverTemp == RESET))
 8000a64:	f641 3158 	movw	r1, #7000	; 0x1b58
 8000a68:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000a6c:	428a      	cmp	r2, r1
 8000a6e:	dd08      	ble.n	8000a82 <faultCheck+0x17e>
 8000a70:	4931      	ldr	r1, [pc, #196]	; (8000b38 <faultCheck+0x234>)
 8000a72:	7a0a      	ldrb	r2, [r1, #8]
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	f000 80b2 	beq.w	8000bde <faultCheck+0x2da>
		cnt.TransOverTemp = 0;
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	821a      	strh	r2, [r3, #16]
}
 8000a7e:	bc10      	pop	{r4}
 8000a80:	4770      	bx	lr
	else if((ntc.transformer < TEMP_50C)&&(flg.TransOverTemp == SET))
 8000a82:	f241 3187 	movw	r1, #4999	; 0x1387
 8000a86:	428a      	cmp	r2, r1
 8000a88:	dcf7      	bgt.n	8000a7a <faultCheck+0x176>
 8000a8a:	492b      	ldr	r1, [pc, #172]	; (8000b38 <faultCheck+0x234>)
 8000a8c:	7a0a      	ldrb	r2, [r1, #8]
 8000a8e:	2a01      	cmp	r2, #1
 8000a90:	d1f3      	bne.n	8000a7a <faultCheck+0x176>
		cnt.TransOverTemp++;
 8000a92:	8a1a      	ldrh	r2, [r3, #16]
 8000a94:	3201      	adds	r2, #1
 8000a96:	b292      	uxth	r2, r2
		if(cnt.TransOverTemp > CNT_500MS)
 8000a98:	f5b2 6f7a 	cmp.w	r2, #4000	; 0xfa0
		cnt.TransOverTemp++;
 8000a9c:	821a      	strh	r2, [r3, #16]
		if(cnt.TransOverTemp > CNT_500MS)
 8000a9e:	d9ee      	bls.n	8000a7e <faultCheck+0x17a>
			flg.TransOverTemp = RESET;
 8000aa0:	2200      	movs	r2, #0
			if(faultState == faultState_TransOverTemp)
 8000aa2:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <faultCheck+0x23c>)
			flg.TransOverTemp = RESET;
 8000aa4:	720a      	strb	r2, [r1, #8]
			if(faultState == faultState_TransOverTemp)
 8000aa6:	7818      	ldrb	r0, [r3, #0]
 8000aa8:	2808      	cmp	r0, #8
 8000aaa:	d1e8      	bne.n	8000a7e <faultCheck+0x17a>
				faultState = faultState_Clear;
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	e7e6      	b.n	8000a7e <faultCheck+0x17a>
	else if((ntc.mosfet < TEMP_50C)&&(flg.MosfetOverTemp == SET))
 8000ab0:	f241 3087 	movw	r0, #4999	; 0x1387
 8000ab4:	4281      	cmp	r1, r0
 8000ab6:	dcd3      	bgt.n	8000a60 <faultCheck+0x15c>
 8000ab8:	481f      	ldr	r0, [pc, #124]	; (8000b38 <faultCheck+0x234>)
 8000aba:	79c1      	ldrb	r1, [r0, #7]
 8000abc:	2901      	cmp	r1, #1
 8000abe:	d1cf      	bne.n	8000a60 <faultCheck+0x15c>
		cnt.MosfetOverTemp++;
 8000ac0:	89d9      	ldrh	r1, [r3, #14]
 8000ac2:	3101      	adds	r1, #1
 8000ac4:	b289      	uxth	r1, r1
		if(cnt.MosfetOverTemp > CNT_1S)
 8000ac6:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
		cnt.MosfetOverTemp++;
 8000aca:	81d9      	strh	r1, [r3, #14]
		if(cnt.MosfetOverTemp > CNT_1S)
 8000acc:	d9ca      	bls.n	8000a64 <faultCheck+0x160>
			flg.MosfetOverTemp = RESET;
 8000ace:	2400      	movs	r4, #0
			if(faultState == faultState_MosfetOverTemp)
 8000ad0:	491b      	ldr	r1, [pc, #108]	; (8000b40 <faultCheck+0x23c>)
			flg.MosfetOverTemp = RESET;
 8000ad2:	71c4      	strb	r4, [r0, #7]
			if(faultState == faultState_MosfetOverTemp)
 8000ad4:	f891 c000 	ldrb.w	ip, [r1]
 8000ad8:	f1bc 0f07 	cmp.w	ip, #7
 8000adc:	d1c2      	bne.n	8000a64 <faultCheck+0x160>
				faultState = faultState_Clear;
 8000ade:	700c      	strb	r4, [r1, #0]
 8000ae0:	e7c0      	b.n	8000a64 <faultCheck+0x160>
	else if((invIoutInst < OUTPUT_STBY_CURRENT)&&(flg.OutputOverCurrent == SET))
 8000ae2:	4915      	ldr	r1, [pc, #84]	; (8000b38 <faultCheck+0x234>)
 8000ae4:	794a      	ldrb	r2, [r1, #5]
 8000ae6:	2a01      	cmp	r2, #1
 8000ae8:	d1ac      	bne.n	8000a44 <faultCheck+0x140>
		cnt.OutputOverCurrent++;
 8000aea:	895a      	ldrh	r2, [r3, #10]
 8000aec:	3201      	adds	r2, #1
 8000aee:	b292      	uxth	r2, r2
		if(cnt.OutputOverCurrent > CNT_1S)
 8000af0:	f5b2 5ffa 	cmp.w	r2, #8000	; 0x1f40
		cnt.OutputOverCurrent++;
 8000af4:	815a      	strh	r2, [r3, #10]
		if(cnt.OutputOverCurrent > CNT_1S)
 8000af6:	d9a7      	bls.n	8000a48 <faultCheck+0x144>
			flg.OutputOverCurrent = RESET;
 8000af8:	2000      	movs	r0, #0
			if(faultState == faultState_OutputOverCurrent)
 8000afa:	4a11      	ldr	r2, [pc, #68]	; (8000b40 <faultCheck+0x23c>)
			flg.OutputOverCurrent = RESET;
 8000afc:	7148      	strb	r0, [r1, #5]
			if(faultState == faultState_OutputOverCurrent)
 8000afe:	7814      	ldrb	r4, [r2, #0]
 8000b00:	2c05      	cmp	r4, #5
 8000b02:	d1a1      	bne.n	8000a48 <faultCheck+0x144>
				faultState = faultState_Clear;
 8000b04:	7010      	strb	r0, [r2, #0]
 8000b06:	e79f      	b.n	8000a48 <faultCheck+0x144>
	else if((invVoutInst <= OUTPUT_VOLTAGE)&&(flg.OutputOverVoltage == SET))
 8000b08:	490b      	ldr	r1, [pc, #44]	; (8000b38 <faultCheck+0x234>)
 8000b0a:	790a      	ldrb	r2, [r1, #4]
 8000b0c:	2a01      	cmp	r2, #1
 8000b0e:	f47f af7b 	bne.w	8000a08 <faultCheck+0x104>
		cnt.OutputOverVoltage++;
 8000b12:	891a      	ldrh	r2, [r3, #8]
 8000b14:	3201      	adds	r2, #1
 8000b16:	b292      	uxth	r2, r2
		if(cnt.OutputOverVoltage > CNT_500MS)
 8000b18:	f5b2 6f7a 	cmp.w	r2, #4000	; 0xfa0
		cnt.OutputOverVoltage++;
 8000b1c:	811a      	strh	r2, [r3, #8]
		if(cnt.OutputOverVoltage > CNT_500MS)
 8000b1e:	f67f af75 	bls.w	8000a0c <faultCheck+0x108>
			flg.OutputOverVoltage = RESET;
 8000b22:	2000      	movs	r0, #0
			if(faultState == faultState_OutputOverVoltage)
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <faultCheck+0x23c>)
			flg.OutputOverVoltage = RESET;
 8000b26:	7108      	strb	r0, [r1, #4]
			if(faultState == faultState_OutputOverVoltage)
 8000b28:	7814      	ldrb	r4, [r2, #0]
 8000b2a:	2c04      	cmp	r4, #4
 8000b2c:	f47f af6e 	bne.w	8000a0c <faultCheck+0x108>
				faultState = faultState_Clear;
 8000b30:	7010      	strb	r0, [r2, #0]
 8000b32:	e76b      	b.n	8000a0c <faultCheck+0x108>
 8000b34:	2000030a 	.word	0x2000030a
 8000b38:	2000012c 	.word	0x2000012c
 8000b3c:	200000e0 	.word	0x200000e0
 8000b40:	2000011c 	.word	0x2000011c
 8000b44:	20000310 	.word	0x20000310
 8000b48:	20000312 	.word	0x20000312
 8000b4c:	2000030c 	.word	0x2000030c
 8000b50:	20000320 	.word	0x20000320
	else if((invVinInst < INPUT_OVER_VOLTAGE_CUTIN)&&(flg.InputOverVoltage == SET))
 8000b54:	4935      	ldr	r1, [pc, #212]	; (8000c2c <faultCheck+0x328>)
 8000b56:	78ca      	ldrb	r2, [r1, #3]
 8000b58:	2a01      	cmp	r2, #1
 8000b5a:	f47f af34 	bne.w	80009c6 <faultCheck+0xc2>
		cnt.InputOverVoltage++;
 8000b5e:	88da      	ldrh	r2, [r3, #6]
 8000b60:	3201      	adds	r2, #1
 8000b62:	b292      	uxth	r2, r2
		if(cnt.InputOverVoltage > CNT_500MS)
 8000b64:	f5b2 6f7a 	cmp.w	r2, #4000	; 0xfa0
		cnt.InputOverVoltage++;
 8000b68:	80da      	strh	r2, [r3, #6]
		if(cnt.InputOverVoltage > CNT_500MS)
 8000b6a:	f67f af2e 	bls.w	80009ca <faultCheck+0xc6>
			flg.InputOverVoltage = RESET;
 8000b6e:	2000      	movs	r0, #0
			if(faultState == faultState_InputOverVoltage)
 8000b70:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <faultCheck+0x32c>)
			flg.InputOverVoltage = RESET;
 8000b72:	70c8      	strb	r0, [r1, #3]
			if(faultState == faultState_InputOverVoltage)
 8000b74:	7814      	ldrb	r4, [r2, #0]
 8000b76:	2c03      	cmp	r4, #3
 8000b78:	f47f af27 	bne.w	80009ca <faultCheck+0xc6>
				faultState = faultState_Clear;
 8000b7c:	7010      	strb	r0, [r2, #0]
 8000b7e:	e724      	b.n	80009ca <faultCheck+0xc6>
	else if((invVinInst > INPUT_UNDER_VOLTAGE_CUTIN)&&(flg.InputUnderVoltage == SET))
 8000b80:	482a      	ldr	r0, [pc, #168]	; (8000c2c <faultCheck+0x328>)
 8000b82:	7881      	ldrb	r1, [r0, #2]
 8000b84:	2901      	cmp	r1, #1
 8000b86:	f47f aeff 	bne.w	8000988 <faultCheck+0x84>
		cnt.InputUnderVoltage++;
 8000b8a:	8899      	ldrh	r1, [r3, #4]
 8000b8c:	3101      	adds	r1, #1
 8000b8e:	b289      	uxth	r1, r1
		if(cnt.InputUnderVoltage > CNT_1S)
 8000b90:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
		cnt.InputUnderVoltage++;
 8000b94:	8099      	strh	r1, [r3, #4]
		if(cnt.InputUnderVoltage > CNT_1S)
 8000b96:	f67f aef9 	bls.w	800098c <faultCheck+0x88>
			flg.InputUnderVoltage = RESET;
 8000b9a:	2400      	movs	r4, #0
			if(faultState == faultState_InputUnderVoltage)
 8000b9c:	4924      	ldr	r1, [pc, #144]	; (8000c30 <faultCheck+0x32c>)
			flg.InputUnderVoltage = RESET;
 8000b9e:	7084      	strb	r4, [r0, #2]
			if(faultState == faultState_InputUnderVoltage)
 8000ba0:	f891 c000 	ldrb.w	ip, [r1]
 8000ba4:	f1bc 0f02 	cmp.w	ip, #2
 8000ba8:	f47f aef0 	bne.w	800098c <faultCheck+0x88>
				faultState = faultState_Clear;
 8000bac:	700c      	strb	r4, [r1, #0]
 8000bae:	e6ed      	b.n	800098c <faultCheck+0x88>
	else if((invIinInst < INPUT_STBY_CURRENT)&&(flg.InputOverCurrent == SET))
 8000bb0:	491e      	ldr	r1, [pc, #120]	; (8000c2c <faultCheck+0x328>)
 8000bb2:	784b      	ldrb	r3, [r1, #1]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	f47f aec4 	bne.w	8000942 <faultCheck+0x3e>
		cnt.InputOverCurrent++;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <faultCheck+0x330>)
 8000bbc:	885a      	ldrh	r2, [r3, #2]
 8000bbe:	3201      	adds	r2, #1
 8000bc0:	b292      	uxth	r2, r2
		if(cnt.InputOverCurrent > CNT_1S)
 8000bc2:	f5b2 5ffa 	cmp.w	r2, #8000	; 0x1f40
		cnt.InputOverCurrent++;
 8000bc6:	805a      	strh	r2, [r3, #2]
		if(cnt.InputOverCurrent > CNT_1S)
 8000bc8:	f67f aebe 	bls.w	8000948 <faultCheck+0x44>
			flg.InputOverCurrent = RESET;
 8000bcc:	2000      	movs	r0, #0
			if(faultState == faultState_InputOverCurrent)
 8000bce:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <faultCheck+0x32c>)
			flg.InputOverCurrent = RESET;
 8000bd0:	7048      	strb	r0, [r1, #1]
			if(faultState == faultState_InputOverCurrent)
 8000bd2:	7814      	ldrb	r4, [r2, #0]
 8000bd4:	2c01      	cmp	r4, #1
 8000bd6:	f47f aeb7 	bne.w	8000948 <faultCheck+0x44>
				faultState = faultState_Clear;
 8000bda:	7010      	strb	r0, [r2, #0]
 8000bdc:	e6b4      	b.n	8000948 <faultCheck+0x44>
		cnt.TransOverTemp++;
 8000bde:	8a1a      	ldrh	r2, [r3, #16]
 8000be0:	3201      	adds	r2, #1
 8000be2:	b292      	uxth	r2, r2
		if(cnt.TransOverTemp > CNT_2S)
 8000be4:	f5b2 5f7a 	cmp.w	r2, #16000	; 0x3e80
		cnt.TransOverTemp++;
 8000be8:	821a      	strh	r2, [r3, #16]
		if(cnt.TransOverTemp > CNT_2S)
 8000bea:	f67f af48 	bls.w	8000a7e <faultCheck+0x17a>
			if(faultState == faultState_Clear)
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <faultCheck+0x32c>)
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	f47f af43 	bne.w	8000a7e <faultCheck+0x17a>
				faultState = faultState_TransOverTemp;
 8000bf8:	2008      	movs	r0, #8
				flg.TransOverTemp = SET;
 8000bfa:	2201      	movs	r2, #1
				faultState = faultState_TransOverTemp;
 8000bfc:	7018      	strb	r0, [r3, #0]
				flg.TransOverTemp = SET;
 8000bfe:	720a      	strb	r2, [r1, #8]
 8000c00:	e73d      	b.n	8000a7e <faultCheck+0x17a>
		if(cnt.MosfetOverTemp > CNT_3S)
 8000c02:	f645 5cc0 	movw	ip, #24000	; 0x5dc0
		cnt.MosfetOverTemp++;
 8000c06:	89d9      	ldrh	r1, [r3, #14]
 8000c08:	3101      	adds	r1, #1
 8000c0a:	b289      	uxth	r1, r1
		if(cnt.MosfetOverTemp > CNT_3S)
 8000c0c:	4561      	cmp	r1, ip
		cnt.MosfetOverTemp++;
 8000c0e:	81d9      	strh	r1, [r3, #14]
		if(cnt.MosfetOverTemp > CNT_3S)
 8000c10:	f67f af28 	bls.w	8000a64 <faultCheck+0x160>
			if(faultState == faultState_Clear)
 8000c14:	4906      	ldr	r1, [pc, #24]	; (8000c30 <faultCheck+0x32c>)
 8000c16:	780c      	ldrb	r4, [r1, #0]
 8000c18:	2c00      	cmp	r4, #0
 8000c1a:	f47f af23 	bne.w	8000a64 <faultCheck+0x160>
				faultState = faultState_MosfetOverTemp;
 8000c1e:	2407      	movs	r4, #7
				flg.MosfetOverTemp = SET;
 8000c20:	f04f 0c01 	mov.w	ip, #1
				faultState = faultState_MosfetOverTemp;
 8000c24:	700c      	strb	r4, [r1, #0]
				flg.MosfetOverTemp = SET;
 8000c26:	f880 c007 	strb.w	ip, [r0, #7]
 8000c2a:	e71b      	b.n	8000a64 <faultCheck+0x160>
 8000c2c:	2000012c 	.word	0x2000012c
 8000c30:	2000011c 	.word	0x2000011c
 8000c34:	200000e0 	.word	0x200000e0

08000c38 <TIM2_ISR>:
{
 8000c38:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(FAN_GPIO_Port, FAN_Pin);
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	481f      	ldr	r0, [pc, #124]	; (8000cbc <TIM2_ISR+0x84>)
 8000c3e:	f002 f931 	bl	8002ea4 <HAL_GPIO_TogglePin>
	faultCheck();	// fault check
 8000c42:	f7ff fe5f 	bl	8000904 <faultCheck>
	if((faultState != faultState_Clear)||(powerState == powerState_Off)) 		// some fault is occur or power switch is off
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <TIM2_ISR+0x88>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b913      	cbnz	r3, 8000c52 <TIM2_ISR+0x1a>
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <TIM2_ISR+0x8c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b98b      	cbnz	r3, 8000c76 <TIM2_ISR+0x3e>
		machineState = machineState_Error;			// go to error state instantly
 8000c52:	2200      	movs	r2, #0
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <TIM2_ISR+0x90>)
 8000c56:	701a      	strb	r2, [r3, #0]
	switch(machineState)
 8000c58:	781a      	ldrb	r2, [r3, #0]
 8000c5a:	2a01      	cmp	r2, #1
 8000c5c:	b2d3      	uxtb	r3, r2
 8000c5e:	d00f      	beq.n	8000c80 <TIM2_ISR+0x48>
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d023      	beq.n	8000cac <TIM2_ISR+0x74>
 8000c64:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <TIM2_ISR+0x94>)
 8000c66:	b32b      	cbz	r3, 8000cb4 <TIM2_ISR+0x7c>
	switch(invState)
 8000c68:	7813      	ldrb	r3, [r2, #0]
 8000c6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c6e:	b173      	cbz	r3, 8000c8e <TIM2_ISR+0x56>
 8000c70:	2a01      	cmp	r2, #1
 8000c72:	d015      	beq.n	8000ca0 <TIM2_ISR+0x68>
}
 8000c74:	bd08      	pop	{r3, pc}
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <TIM2_ISR+0x90>)
	switch(machineState)
 8000c78:	781a      	ldrb	r2, [r3, #0]
 8000c7a:	2a01      	cmp	r2, #1
 8000c7c:	b2d3      	uxtb	r3, r2
 8000c7e:	d1ef      	bne.n	8000c60 <TIM2_ISR+0x28>
				invState = invState_On;
 8000c80:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <TIM2_ISR+0x94>)
 8000c82:	7013      	strb	r3, [r2, #0]
	switch(invState)
 8000c84:	7813      	ldrb	r3, [r2, #0]
 8000c86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f0      	bne.n	8000c70 <TIM2_ISR+0x38>
				TIM1->CCR1	= 0;	// set dutyCycle = 0
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <TIM2_ISR+0x98>)
				GATEDRIVE_INACTIVE;	// set High to GaveDrive Shutdown pin
 8000c90:	2110      	movs	r1, #16
				TIM1->CCR1	= 0;	// set dutyCycle = 0
 8000c92:	635a      	str	r2, [r3, #52]	; 0x34
				GATEDRIVE_INACTIVE;	// set High to GaveDrive Shutdown pin
 8000c94:	4809      	ldr	r0, [pc, #36]	; (8000cbc <TIM2_ISR+0x84>)
				TIM1->CCR2  = 0;	// set dutyCycle = 0
 8000c96:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				GATEDRIVE_INACTIVE;	// set High to GaveDrive Shutdown pin
 8000c9c:	f002 b8fe 	b.w	8002e9c <HAL_GPIO_WritePin>
				GATEDRIVE_ACTIVE;	// set Low to GaveDrive Shutdown pin
 8000ca0:	2110      	movs	r1, #16
}
 8000ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				GATEDRIVE_ACTIVE;	// set Low to GaveDrive Shutdown pin
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <TIM2_ISR+0x84>)
 8000ca8:	f002 b8f8 	b.w	8002e9c <HAL_GPIO_WritePin>
				invState = invState_On;
 8000cac:	2301      	movs	r3, #1
 8000cae:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <TIM2_ISR+0x94>)
 8000cb0:	7013      	strb	r3, [r2, #0]
			break;
 8000cb2:	e7e7      	b.n	8000c84 <TIM2_ISR+0x4c>
				sampling = 0;
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <TIM2_ISR+0x9c>)
				invState = invState_Off;
 8000cb6:	7013      	strb	r3, [r2, #0]
				sampling = 0;
 8000cb8:	800b      	strh	r3, [r1, #0]
			break;
 8000cba:	e7d5      	b.n	8000c68 <TIM2_ISR+0x30>
 8000cbc:	40010c00 	.word	0x40010c00
 8000cc0:	2000011c 	.word	0x2000011c
 8000cc4:	20000344 	.word	0x20000344
 8000cc8:	2000031d 	.word	0x2000031d
 8000ccc:	2000030e 	.word	0x2000030e
 8000cd0:	40012c00 	.word	0x40012c00
 8000cd4:	2000034c 	.word	0x2000034c

08000cd8 <PI>:
	if(pi_out >= MAX_DUTY)		// out of control
 8000cd8:	f240 6c7d 	movw	ip, #1661	; 0x67d
{
 8000cdc:	b470      	push	{r4, r5, r6}
	pi_control.error = (int32_t)buf_feedback - (int32_t)buf_setpoint;
 8000cde:	4c21      	ldr	r4, [pc, #132]	; (8000d64 <PI+0x8c>)
 8000ce0:	1a09      	subs	r1, r1, r0
	pi_control.ProportionalTerm = (-pi_control.kp * pi_control.error) / 200;	// P term
 8000ce2:	6823      	ldr	r3, [r4, #0]
	pi_control.xx = ((-pi_control.ki * pi_control.error) / 200);
 8000ce4:	6862      	ldr	r2, [r4, #4]
	pi_control.ProportionalTerm = (-pi_control.kp * pi_control.error) / 200;	// P term
 8000ce6:	425b      	negs	r3, r3
 8000ce8:	fb01 f303 	mul.w	r3, r1, r3
 8000cec:	4e1e      	ldr	r6, [pc, #120]	; (8000d68 <PI+0x90>)
 8000cee:	4d1f      	ldr	r5, [pc, #124]	; (8000d6c <PI+0x94>)
	pi_control.xx = ((-pi_control.ki * pi_control.error) / 200);
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	fb01 f202 	mul.w	r2, r1, r2
 8000cf6:	60a6      	str	r6, [r4, #8]
	pi_control.error = (int32_t)buf_feedback - (int32_t)buf_setpoint;
 8000cf8:	6121      	str	r1, [r4, #16]
	pi_control.ProportionalTerm = (-pi_control.kp * pi_control.error) / 200;	// P term
 8000cfa:	fb85 6103 	smull	r6, r1, r5, r3
	pi_control.xx = ((-pi_control.ki * pi_control.error) / 200);
 8000cfe:	fb85 6502 	smull	r6, r5, r5, r2
	pi_control.ProportionalTerm = (-pi_control.kp * pi_control.error) / 200;	// P term
 8000d02:	17db      	asrs	r3, r3, #31
 8000d04:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
 8000d08:	60e3      	str	r3, [r4, #12]
	pi_out = pi_control.ProportionalTerm + pi_control.IntegralTerm;
 8000d0a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
	pi_control.xx = ((-pi_control.ki * pi_control.error) / 200);
 8000d0e:	17d2      	asrs	r2, r2, #31
	pi_out += setpoint;
 8000d10:	4418      	add	r0, r3
	pi_control.xx = ((-pi_control.ki * pi_control.error) / 200);
 8000d12:	ebc2 12a5 	rsb	r2, r2, r5, asr #6
	if(pi_out >= MAX_DUTY)		// out of control
 8000d16:	4560      	cmp	r0, ip
	pi_control.xx = ((-pi_control.ki * pi_control.error) / 200);
 8000d18:	6162      	str	r2, [r4, #20]
		CTMax++;
 8000d1a:	4a15      	ldr	r2, [pc, #84]	; (8000d70 <PI+0x98>)
	if(pi_out >= MAX_DUTY)		// out of control
 8000d1c:	d90f      	bls.n	8000d3e <PI+0x66>
		pi_out = MAX_DUTY;
 8000d1e:	f240 607e 	movw	r0, #1662	; 0x67e
		CTMax++;
 8000d22:	8813      	ldrh	r3, [r2, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	8013      	strh	r3, [r2, #0]
		if(CTMin != 0) CTMin--;
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <PI+0x9c>)
 8000d2c:	8813      	ldrh	r3, [r2, #0]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	b11b      	cbz	r3, 8000d3a <PI+0x62>
 8000d32:	8813      	ldrh	r3, [r2, #0]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	8013      	strh	r3, [r2, #0]
}
 8000d3a:	bc70      	pop	{r4, r5, r6}
 8000d3c:	4770      	bx	lr
		if(CTMax > 0) CTMax--;
 8000d3e:	8813      	ldrh	r3, [r2, #0]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	b94b      	cbnz	r3, 8000d58 <PI+0x80>
	if(pi_out <= MIN_DUTY)
 8000d44:	28af      	cmp	r0, #175	; 0xaf
 8000d46:	d8f0      	bhi.n	8000d2a <PI+0x52>
}
 8000d48:	bc70      	pop	{r4, r5, r6}
		CTMin++;
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <PI+0x9c>)
		pi_out = MIN_DUTY;
 8000d4c:	20af      	movs	r0, #175	; 0xaf
		CTMin++;
 8000d4e:	8813      	ldrh	r3, [r2, #0]
 8000d50:	3301      	adds	r3, #1
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	8013      	strh	r3, [r2, #0]
}
 8000d56:	4770      	bx	lr
		if(CTMax > 0) CTMax--;
 8000d58:	8813      	ldrh	r3, [r2, #0]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	8013      	strh	r3, [r2, #0]
 8000d60:	e7f0      	b.n	8000d44 <PI+0x6c>
 8000d62:	bf00      	nop
 8000d64:	2000032c 	.word	0x2000032c
 8000d68:	fffff92a 	.word	0xfffff92a
 8000d6c:	51eb851f 	.word	0x51eb851f
 8000d70:	200000b4 	.word	0x200000b4
 8000d74:	200000b6 	.word	0x200000b6

08000d78 <TIM1_ISR>:
	GPIOC->BSRR = (uint32_t)GPIO_PIN_14;  // High
 8000d78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
{
 8000d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	GPIOC->BSRR = (uint32_t)GPIO_PIN_14;  // High
 8000d80:	4a4a      	ldr	r2, [pc, #296]	; (8000eac <TIM1_ISR+0x134>)
	if(	convCompleted == 1)	 // End Of Conversion
 8000d82:	4b4b      	ldr	r3, [pc, #300]	; (8000eb0 <TIM1_ISR+0x138>)
	GPIOC->BSRR = (uint32_t)GPIO_PIN_14;  // High
 8000d84:	6111      	str	r1, [r2, #16]
	if(	convCompleted == 1)	 // End Of Conversion
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	2a01      	cmp	r2, #1
 8000d8a:	d120      	bne.n	8000dce <TIM1_ISR+0x56>
		convCompleted =0;
 8000d8c:	f04f 0900 	mov.w	r9, #0
									 volatile uint16_t *iin_inst,		// instant input current
									 volatile uint16_t *vout_inst,		//
									 volatile uint16_t *iout_inst		//
									 )
{
	(*offset) 		= 1650;
 8000d90:	f240 6872 	movw	r8, #1650	; 0x672
	(*vRef) 		= 3300;
 8000d94:	f640 4ce4 	movw	ip, #3300	; 0xce4
	(*offset) 		= 1650;
 8000d98:	f8df e118 	ldr.w	lr, [pc, #280]	; 8000eb4 <TIM1_ISR+0x13c>
	(*vRef) 		= 3300;
 8000d9c:	4f46      	ldr	r7, [pc, #280]	; (8000eb8 <TIM1_ISR+0x140>)
	(*vin_inst) 	= adc1[0];
 8000d9e:	4947      	ldr	r1, [pc, #284]	; (8000ebc <TIM1_ISR+0x144>)
 8000da0:	f883 9000 	strb.w	r9, [r3]
	(*offset) 		= 1650;
 8000da4:	f8ae 8000 	strh.w	r8, [lr]
	(*vRef) 		= 3300;
 8000da8:	f8a7 c000 	strh.w	ip, [r7]
	(*vin_inst) 	= adc1[0];
 8000dac:	880b      	ldrh	r3, [r1, #0]
 8000dae:	4e44      	ldr	r6, [pc, #272]	; (8000ec0 <TIM1_ISR+0x148>)
	(*iin_inst)	 	= adc2[0];
 8000db0:	4a44      	ldr	r2, [pc, #272]	; (8000ec4 <TIM1_ISR+0x14c>)
	(*vin_inst) 	= adc1[0];
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	8033      	strh	r3, [r6, #0]
	(*iin_inst)	 	= adc2[0];
 8000db6:	8813      	ldrh	r3, [r2, #0]
 8000db8:	4d43      	ldr	r5, [pc, #268]	; (8000ec8 <TIM1_ISR+0x150>)
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	802b      	strh	r3, [r5, #0]
	(*vout_inst) 	= adc1[1];
 8000dbe:	884b      	ldrh	r3, [r1, #2]
 8000dc0:	4c42      	ldr	r4, [pc, #264]	; (8000ecc <TIM1_ISR+0x154>)
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	8023      	strh	r3, [r4, #0]
	(*iout_inst) 	= adc2[1];
 8000dc6:	8853      	ldrh	r3, [r2, #2]
 8000dc8:	4841      	ldr	r0, [pc, #260]	; (8000ed0 <TIM1_ISR+0x158>)
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	8003      	strh	r3, [r0, #0]
	GPIOC->BSRR = (uint32_t)GPIO_PIN_13 << 16u;  // RESET
 8000dce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000dd2:	4836      	ldr	r0, [pc, #216]	; (8000eac <TIM1_ISR+0x134>)
	sampling++;
 8000dd4:	4c3f      	ldr	r4, [pc, #252]	; (8000ed4 <TIM1_ISR+0x15c>)
	GPIOC->BSRR = (uint32_t)GPIO_PIN_13 << 16u;  // RESET
 8000dd6:	6103      	str	r3, [r0, #16]
	sampling++;
 8000dd8:	8823      	ldrh	r3, [r4, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b29b      	uxth	r3, r3
	if(sampling > 160)
 8000dde:	2ba0      	cmp	r3, #160	; 0xa0
 8000de0:	d851      	bhi.n	8000e86 <TIM1_ISR+0x10e>
	sampling++;
 8000de2:	8023      	strh	r3, [r4, #0]
	dutyCycle_temp = sinTable_160[sampling];
 8000de4:	483c      	ldr	r0, [pc, #240]	; (8000ed8 <TIM1_ISR+0x160>)
	dynamicRef = PI(xsetpoint, xfeedback/*invVoutInst*/);   		// return new dutyCycle
 8000de6:	4a3d      	ldr	r2, [pc, #244]	; (8000edc <TIM1_ISR+0x164>)
 8000de8:	493d      	ldr	r1, [pc, #244]	; (8000ee0 <TIM1_ISR+0x168>)
	dutyCycle_temp = sinTable_160[sampling];
 8000dea:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000dee:	4c3d      	ldr	r4, [pc, #244]	; (8000ee4 <TIM1_ISR+0x16c>)
	dynamicRef = PI(xsetpoint, xfeedback/*invVoutInst*/);   		// return new dutyCycle
 8000df0:	6809      	ldr	r1, [r1, #0]
 8000df2:	6810      	ldr	r0, [r2, #0]
	dutyCycle_temp = sinTable_160[sampling];
 8000df4:	6023      	str	r3, [r4, #0]
	dynamicRef = PI(xsetpoint, xfeedback/*invVoutInst*/);   		// return new dutyCycle
 8000df6:	f7ff ff6f 	bl	8000cd8 <PI>
    dutyCyclePrv = dutyCycle;
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ee8 <TIM1_ISR+0x170>)
    spwm.currentDuty = dutyCycle_temp;
 8000dfc:	6825      	ldr	r5, [r4, #0]
    dutyCyclePrv = dutyCycle;
 8000dfe:	6819      	ldr	r1, [r3, #0]
    spwm.currentDuty = dutyCycle_temp;
 8000e00:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <TIM1_ISR+0x174>)
		switch(phaseState)
 8000e02:	4e3b      	ldr	r6, [pc, #236]	; (8000ef0 <TIM1_ISR+0x178>)
    spwm.currentDuty = dutyCycle_temp;
 8000e04:	611d      	str	r5, [r3, #16]
    dutyCyclePrv = dutyCycle;
 8000e06:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <TIM1_ISR+0x17c>)
	dynamicRef = PI(xsetpoint, xfeedback/*invVoutInst*/);   		// return new dutyCycle
 8000e08:	4a3b      	ldr	r2, [pc, #236]	; (8000ef8 <TIM1_ISR+0x180>)
    dutyCyclePrv = dutyCycle;
 8000e0a:	6019      	str	r1, [r3, #0]
		switch(phaseState)
 8000e0c:	7833      	ldrb	r3, [r6, #0]
	dynamicRef = PI(xsetpoint, xfeedback/*invVoutInst*/);   		// return new dutyCycle
 8000e0e:	6010      	str	r0, [r2, #0]
		switch(phaseState)
 8000e10:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8000e14:	b1db      	cbz	r3, 8000e4e <TIM1_ISR+0xd6>
 8000e16:	2c01      	cmp	r4, #1
 8000e18:	d113      	bne.n	8000e42 <TIM1_ISR+0xca>
				TIM1->CCR2 = 0;
 8000e1a:	2700      	movs	r7, #0
				TIM1->CCR1 = dutyCycle_temp;
 8000e1c:	4b37      	ldr	r3, [pc, #220]	; (8000efc <TIM1_ISR+0x184>)
				SLAVE_MOSFET_HIGH_INACTIVE;
 8000e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
				TIM1->CCR1 = dutyCycle_temp;
 8000e22:	635d      	str	r5, [r3, #52]	; 0x34
				SLAVE_MOSFET_HIGH_INACTIVE;
 8000e24:	463a      	mov	r2, r7
				TIM1->CCR2 = 0;
 8000e26:	639f      	str	r7, [r3, #56]	; 0x38
				SLAVE_MOSFET_HIGH_INACTIVE;
 8000e28:	4835      	ldr	r0, [pc, #212]	; (8000f00 <TIM1_ISR+0x188>)
 8000e2a:	f002 f837 	bl	8002e9c <HAL_GPIO_WritePin>
				SLAVE_MOSFET_LOW_ACTIVE;
 8000e2e:	4622      	mov	r2, r4
 8000e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e34:	4833      	ldr	r0, [pc, #204]	; (8000f04 <TIM1_ISR+0x18c>)
 8000e36:	f002 f831 	bl	8002e9c <HAL_GPIO_WritePin>
				if(flag_zeroCross == SET)
 8000e3a:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <TIM1_ISR+0x190>)
 8000e3c:	781a      	ldrb	r2, [r3, #0]
 8000e3e:	2a01      	cmp	r2, #1
 8000e40:	d02c      	beq.n	8000e9c <TIM1_ISR+0x124>
		GPIOC->BSRR = (uint32_t)GPIO_PIN_14 << 16u;  // RESET
 8000e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <TIM1_ISR+0x134>)
 8000e48:	611a      	str	r2, [r3, #16]
}
 8000e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				TIM1->CCR1 = 0;
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <TIM1_ISR+0x184>)
				SLAVE_MOSFET_HIGH_ACTIVE;
 8000e50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
				TIM1->CCR1 = 0;
 8000e54:	635c      	str	r4, [r3, #52]	; 0x34
				SLAVE_MOSFET_HIGH_ACTIVE;
 8000e56:	2201      	movs	r2, #1
				TIM1->CCR2 = dutyCycle_temp;
 8000e58:	639d      	str	r5, [r3, #56]	; 0x38
				SLAVE_MOSFET_HIGH_ACTIVE;
 8000e5a:	4829      	ldr	r0, [pc, #164]	; (8000f00 <TIM1_ISR+0x188>)
 8000e5c:	f002 f81e 	bl	8002e9c <HAL_GPIO_WritePin>
				SLAVE_MOSFET_LOW_INACTIVE;
 8000e60:	4622      	mov	r2, r4
 8000e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e66:	4827      	ldr	r0, [pc, #156]	; (8000f04 <TIM1_ISR+0x18c>)
 8000e68:	f002 f818 	bl	8002e9c <HAL_GPIO_WritePin>
				if(flag_zeroCross == SET)
 8000e6c:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <TIM1_ISR+0x190>)
 8000e6e:	7813      	ldrb	r3, [r2, #0]
 8000e70:	2b01      	cmp	r3, #1
					flag_zeroCross = RESET;
 8000e72:	bf08      	it	eq
 8000e74:	7014      	strbeq	r4, [r2, #0]
		GPIOC->BSRR = (uint32_t)GPIO_PIN_14 << 16u;  // RESET
 8000e76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
					phaseState = phaseState_Negative;
 8000e7a:	bf08      	it	eq
 8000e7c:	7033      	strbeq	r3, [r6, #0]
		GPIOC->BSRR = (uint32_t)GPIO_PIN_14 << 16u;  // RESET
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <TIM1_ISR+0x134>)
 8000e80:	611a      	str	r2, [r3, #16]
}
 8000e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		flag_zeroCross = SET;
 8000e86:	2201      	movs	r2, #1
		sampling =0;
 8000e88:	2500      	movs	r5, #0
		flag_zeroCross = SET;
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <TIM1_ISR+0x190>)
		HAL_GPIO_TogglePin(LD_RUN_GPIO_Port, LD_RUN_Pin);		// 180 Degree
 8000e8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
		flag_zeroCross = SET;
 8000e90:	701a      	strb	r2, [r3, #0]
		sampling =0;
 8000e92:	8025      	strh	r5, [r4, #0]
		HAL_GPIO_TogglePin(LD_RUN_GPIO_Port, LD_RUN_Pin);		// 180 Degree
 8000e94:	f002 f806 	bl	8002ea4 <HAL_GPIO_TogglePin>
	dutyCycle_temp = sinTable_160[sampling];
 8000e98:	8823      	ldrh	r3, [r4, #0]
 8000e9a:	e7a3      	b.n	8000de4 <TIM1_ISR+0x6c>
		GPIOC->BSRR = (uint32_t)GPIO_PIN_14 << 16u;  // RESET
 8000e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
					flag_zeroCross = RESET;
 8000ea0:	701f      	strb	r7, [r3, #0]
		GPIOC->BSRR = (uint32_t)GPIO_PIN_14 << 16u;  // RESET
 8000ea2:	4b02      	ldr	r3, [pc, #8]	; (8000eac <TIM1_ISR+0x134>)
					phaseState = phaseState_Positive;
 8000ea4:	7037      	strb	r7, [r6, #0]
		GPIOC->BSRR = (uint32_t)GPIO_PIN_14 << 16u;  // RESET
 8000ea6:	611a      	str	r2, [r3, #16]
}
 8000ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000eac:	40011000 	.word	0x40011000
 8000eb0:	200000f4 	.word	0x200000f4
 8000eb4:	200000ce 	.word	0x200000ce
 8000eb8:	200000dc 	.word	0x200000dc
 8000ebc:	200000c0 	.word	0x200000c0
 8000ec0:	20000310 	.word	0x20000310
 8000ec4:	200000c8 	.word	0x200000c8
 8000ec8:	2000030a 	.word	0x2000030a
 8000ecc:	20000312 	.word	0x20000312
 8000ed0:	2000030c 	.word	0x2000030c
 8000ed4:	2000034c 	.word	0x2000034c
 8000ed8:	08005c18 	.word	0x08005c18
 8000edc:	20000018 	.word	0x20000018
 8000ee0:	2000036c 	.word	0x2000036c
 8000ee4:	20000114 	.word	0x20000114
 8000ee8:	2000010c 	.word	0x2000010c
 8000eec:	20000350 	.word	0x20000350
 8000ef0:	20000328 	.word	0x20000328
 8000ef4:	20000110 	.word	0x20000110
 8000ef8:	20000118 	.word	0x20000118
 8000efc:	40012c00 	.word	0x40012c00
 8000f00:	40010c00 	.word	0x40010c00
 8000f04:	40010800 	.word	0x40010800
 8000f08:	20000128 	.word	0x20000128

08000f0c <readGPIO>:
{
 8000f0c:	b570      	push	{r4, r5, r6, lr}
	key.Mode 	= HAL_GPIO_ReadPin(KEY_MODE_GPIO_Port, KEY_MODE_Pin);
 8000f0e:	2108      	movs	r1, #8
 8000f10:	4892      	ldr	r0, [pc, #584]	; (800115c <readGPIO+0x250>)
 8000f12:	f001 ffbd 	bl	8002e90 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4c91      	ldr	r4, [pc, #580]	; (8001160 <readGPIO+0x254>)
	key.Enter 	= HAL_GPIO_ReadPin(KEY_ENT_GPIO_Port, KEY_ENT_Pin);
 8000f1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f1e:	4891      	ldr	r0, [pc, #580]	; (8001164 <readGPIO+0x258>)
	key.Mode 	= HAL_GPIO_ReadPin(KEY_MODE_GPIO_Port, KEY_MODE_Pin);
 8000f20:	70a3      	strb	r3, [r4, #2]
	key.Enter 	= HAL_GPIO_ReadPin(KEY_ENT_GPIO_Port, KEY_ENT_Pin);
 8000f22:	f001 ffb5 	bl	8002e90 <HAL_GPIO_ReadPin>
 8000f26:	4603      	mov	r3, r0
	key.Up		= HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin);
 8000f28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2c:	488d      	ldr	r0, [pc, #564]	; (8001164 <readGPIO+0x258>)
	key.Enter 	= HAL_GPIO_ReadPin(KEY_ENT_GPIO_Port, KEY_ENT_Pin);
 8000f2e:	70e3      	strb	r3, [r4, #3]
	key.Up		= HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin);
 8000f30:	f001 ffae 	bl	8002e90 <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
	key.Down 	= HAL_GPIO_ReadPin(KEY_DWN_GPIO_Port, KEY_DWN_Pin);
 8000f36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f3a:	488a      	ldr	r0, [pc, #552]	; (8001164 <readGPIO+0x258>)
	key.Up		= HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin);
 8000f3c:	7123      	strb	r3, [r4, #4]
	key.Down 	= HAL_GPIO_ReadPin(KEY_DWN_GPIO_Port, KEY_DWN_Pin);
 8000f3e:	f001 ffa7 	bl	8002e90 <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
	key.Power	= HAL_GPIO_ReadPin(THMO_GPIO_Port, THMO_Pin);
 8000f44:	2140      	movs	r1, #64	; 0x40
 8000f46:	4887      	ldr	r0, [pc, #540]	; (8001164 <readGPIO+0x258>)
	key.Down 	= HAL_GPIO_ReadPin(KEY_DWN_GPIO_Port, KEY_DWN_Pin);
 8000f48:	7163      	strb	r3, [r4, #5]
	key.Power	= HAL_GPIO_ReadPin(THMO_GPIO_Port, THMO_Pin);
 8000f4a:	f001 ffa1 	bl	8002e90 <HAL_GPIO_ReadPin>
 8000f4e:	71a0      	strb	r0, [r4, #6]
	if(key.Power == LOW)
 8000f50:	2800      	cmp	r0, #0
 8000f52:	d131      	bne.n	8000fb8 <readGPIO+0xac>
		powerState = powerState_On;
 8000f54:	2301      	movs	r3, #1
		flag.key_Power = SET;
 8000f56:	4619      	mov	r1, r3
		powerState = powerState_On;
 8000f58:	4a83      	ldr	r2, [pc, #524]	; (8001168 <readGPIO+0x25c>)
 8000f5a:	7013      	strb	r3, [r2, #0]
	if(key.Mode == LOW) 	activeKey |= KEY_MODE;		// 0x01
 8000f5c:	78a3      	ldrb	r3, [r4, #2]
 8000f5e:	4883      	ldr	r0, [pc, #524]	; (800116c <readGPIO+0x260>)
	uint8_t	activeKey =0;
 8000f60:	fab3 f383 	clz	r3, r3
	if(key.Enter == LOW) 	activeKey |= KEY_ENT;		// 0x02
 8000f64:	78e2      	ldrb	r2, [r4, #3]
 8000f66:	7101      	strb	r1, [r0, #4]
	uint8_t	activeKey =0;
 8000f68:	095b      	lsrs	r3, r3, #5
	if(key.Enter == LOW) 	activeKey |= KEY_ENT;		// 0x02
 8000f6a:	b90a      	cbnz	r2, 8000f70 <readGPIO+0x64>
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
	if(key.Up == LOW)		activeKey |= KEY_UP;		// 0x04
 8000f70:	7922      	ldrb	r2, [r4, #4]
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	d146      	bne.n	8001004 <readGPIO+0xf8>
	if(key.Down == LOW)		activeKey |= KEY_DWN;		// 0x08
 8000f76:	7961      	ldrb	r1, [r4, #5]
	if(key.Up == LOW)		activeKey |= KEY_UP;		// 0x04
 8000f78:	f043 0304 	orr.w	r3, r3, #4
	if(key.Down == LOW)		activeKey |= KEY_DWN;		// 0x08
 8000f7c:	bb09      	cbnz	r1, 8000fc2 <readGPIO+0xb6>
	if(key.Value == KEY_MODE) 	count.key_Mode++; else count.key_Mode =0;
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4d7b      	ldr	r5, [pc, #492]	; (8001170 <readGPIO+0x264>)
	if(key.Down == LOW)		activeKey |= KEY_DWN;		// 0x08
 8000f82:	f043 0308 	orr.w	r3, r3, #8
	key.Value = activeKey;	// Max Value = 0x0F = 0b00001111
 8000f86:	8023      	strh	r3, [r4, #0]
	if(key.Value == KEY_MODE) 	count.key_Mode++; else count.key_Mode =0;
 8000f88:	602a      	str	r2, [r5, #0]
	if(key.Value == KEY_UP) 	count.key_Up++; else count.key_Up =0;
 8000f8a:	2100      	movs	r1, #0
	if(key.Value == KEY_DWN) 	count.key_Dwn++; else count.key_Dwn =0;
 8000f8c:	2b08      	cmp	r3, #8
	if(key.Value == KEY_UP) 	count.key_Up++; else count.key_Up =0;
 8000f8e:	80a9      	strh	r1, [r5, #4]
	if(key.Value == KEY_DWN) 	count.key_Dwn++; else count.key_Dwn =0;
 8000f90:	f040 80a6 	bne.w	80010e0 <readGPIO+0x1d4>
	switch(keyState)
 8000f94:	4c77      	ldr	r4, [pc, #476]	; (8001174 <readGPIO+0x268>)
	if(key.Value == KEY_DWN) 	count.key_Dwn++; else count.key_Dwn =0;
 8000f96:	88ea      	ldrh	r2, [r5, #6]
	switch(keyState)
 8000f98:	f894 c000 	ldrb.w	ip, [r4]
	if(key.Value == KEY_DWN) 	count.key_Dwn++; else count.key_Dwn =0;
 8000f9c:	3201      	adds	r2, #1
 8000f9e:	b292      	uxth	r2, r2
	switch(keyState)
 8000fa0:	f1bc 0f01 	cmp.w	ip, #1
 8000fa4:	80ea      	strh	r2, [r5, #6]
 8000fa6:	fa5f f38c 	uxtb.w	r3, ip
 8000faa:	f000 8088 	beq.w	80010be <readGPIO+0x1b2>
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d049      	beq.n	8001046 <readGPIO+0x13a>
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d062      	beq.n	800107c <readGPIO+0x170>
}
 8000fb6:	bd70      	pop	{r4, r5, r6, pc}
		powerState = powerState_Off;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4a6b      	ldr	r2, [pc, #428]	; (8001168 <readGPIO+0x25c>)
		flag.key_Power = RESET;
 8000fbc:	4619      	mov	r1, r3
		powerState = powerState_Off;
 8000fbe:	7013      	strb	r3, [r2, #0]
 8000fc0:	e7cc      	b.n	8000f5c <readGPIO+0x50>
	if(key.Value == KEY_MODE) 	count.key_Mode++; else count.key_Mode =0;
 8000fc2:	4d6b      	ldr	r5, [pc, #428]	; (8001170 <readGPIO+0x264>)
	if(key.Value == KEY_UP) 	count.key_Up++; else count.key_Up =0;
 8000fc4:	2b04      	cmp	r3, #4
	key.Value = activeKey;	// Max Value = 0x0F = 0b00001111
 8000fc6:	8023      	strh	r3, [r4, #0]
	if(key.Value == KEY_MODE) 	count.key_Mode++; else count.key_Mode =0;
 8000fc8:	602a      	str	r2, [r5, #0]
	if(key.Value == KEY_UP) 	count.key_Up++; else count.key_Up =0;
 8000fca:	d1de      	bne.n	8000f8a <readGPIO+0x7e>
	switch(keyState)
 8000fcc:	4c69      	ldr	r4, [pc, #420]	; (8001174 <readGPIO+0x268>)
	if(key.Value == KEY_UP) 	count.key_Up++; else count.key_Up =0;
 8000fce:	88a9      	ldrh	r1, [r5, #4]
	switch(keyState)
 8000fd0:	f894 c000 	ldrb.w	ip, [r4]
	if(key.Value == KEY_UP) 	count.key_Up++; else count.key_Up =0;
 8000fd4:	3101      	adds	r1, #1
 8000fd6:	b289      	uxth	r1, r1
	switch(keyState)
 8000fd8:	f1bc 0f01 	cmp.w	ip, #1
	if(key.Value == KEY_UP) 	count.key_Up++; else count.key_Up =0;
 8000fdc:	80a9      	strh	r1, [r5, #4]
	if(key.Value == KEY_DWN) 	count.key_Dwn++; else count.key_Dwn =0;
 8000fde:	80ea      	strh	r2, [r5, #6]
	switch(keyState)
 8000fe0:	fa5f f38c 	uxtb.w	r3, ip
 8000fe4:	d1e3      	bne.n	8000fae <readGPIO+0xa2>
			count.exitMenu--;
 8000fe6:	f644 641f 	movw	r4, #19999	; 0x4e1f
			if(count.key_Up == _100MS)
 8000fea:	2964      	cmp	r1, #100	; 0x64
			count.exitMenu--;
 8000fec:	60ec      	str	r4, [r5, #12]
			if(count.key_Up == _100MS)
 8000fee:	d1e2      	bne.n	8000fb6 <readGPIO+0xaa>
					indexMenu++;
 8000ff0:	4961      	ldr	r1, [pc, #388]	; (8001178 <readGPIO+0x26c>)
					flag.key_Up = SET;				// Next Menu
 8000ff2:	7083      	strb	r3, [r0, #2]
					indexMenu++;
 8000ff4:	780b      	ldrb	r3, [r1, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
					if(indexMenu > 8) indexMenu =0;
 8000ffa:	2b08      	cmp	r3, #8
					indexMenu++;
 8000ffc:	bf94      	ite	ls
 8000ffe:	700b      	strbls	r3, [r1, #0]
					if(indexMenu > 8) indexMenu =0;
 8001000:	700a      	strbhi	r2, [r1, #0]
}
 8001002:	bd70      	pop	{r4, r5, r6, pc}
	if(key.Down == LOW)		activeKey |= KEY_DWN;		// 0x08
 8001004:	7962      	ldrb	r2, [r4, #5]
 8001006:	2a00      	cmp	r2, #0
 8001008:	d0b9      	beq.n	8000f7e <readGPIO+0x72>
	if(key.Value == KEY_MODE) 	count.key_Mode++; else count.key_Mode =0;
 800100a:	2b01      	cmp	r3, #1
	key.Value = activeKey;	// Max Value = 0x0F = 0b00001111
 800100c:	8023      	strh	r3, [r4, #0]
	if(key.Value == KEY_MODE) 	count.key_Mode++; else count.key_Mode =0;
 800100e:	f040 808a 	bne.w	8001126 <readGPIO+0x21a>
	if(key.Value == KEY_ENT) 	count.key_Enter++; else count.key_Enter =0;
 8001012:	2200      	movs	r2, #0
	if(key.Value == KEY_MODE) 	count.key_Mode++; else count.key_Mode =0;
 8001014:	4d56      	ldr	r5, [pc, #344]	; (8001170 <readGPIO+0x264>)
	switch(keyState)
 8001016:	4c57      	ldr	r4, [pc, #348]	; (8001174 <readGPIO+0x268>)
	if(key.Value == KEY_MODE) 	count.key_Mode++; else count.key_Mode =0;
 8001018:	882b      	ldrh	r3, [r5, #0]
	switch(keyState)
 800101a:	f894 c000 	ldrb.w	ip, [r4]
	if(key.Value == KEY_MODE) 	count.key_Mode++; else count.key_Mode =0;
 800101e:	3301      	adds	r3, #1
 8001020:	b29b      	uxth	r3, r3
	switch(keyState)
 8001022:	f1bc 0f01 	cmp.w	ip, #1
	if(key.Value == KEY_MODE) 	count.key_Mode++; else count.key_Mode =0;
 8001026:	802b      	strh	r3, [r5, #0]
	switch(keyState)
 8001028:	fa5f f18c 	uxtb.w	r1, ip
	if(key.Value == KEY_ENT) 	count.key_Enter++; else count.key_Enter =0;
 800102c:	806a      	strh	r2, [r5, #2]
	if(key.Value == KEY_UP) 	count.key_Up++; else count.key_Up =0;
 800102e:	606a      	str	r2, [r5, #4]
	switch(keyState)
 8001030:	d036      	beq.n	80010a0 <readGPIO+0x194>
 8001032:	2902      	cmp	r1, #2
 8001034:	d074      	beq.n	8001120 <readGPIO+0x214>
 8001036:	2900      	cmp	r1, #0
 8001038:	d1bd      	bne.n	8000fb6 <readGPIO+0xaa>
			if(count.key_Mode == _2SEC)	keyState = keyState_Selection;	// Go to selection Page
 800103a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800103e:	d1ba      	bne.n	8000fb6 <readGPIO+0xaa>
			if(count.key_Mode == _100MS) keyState = keyState_Selection;	// Back to Prev Page
 8001040:	2301      	movs	r3, #1
 8001042:	7023      	strb	r3, [r4, #0]
}
 8001044:	bd70      	pop	{r4, r5, r6, pc}
	switch(keyState)
 8001046:	2300      	movs	r3, #0
 8001048:	469e      	mov	lr, r3
			count.exitMenu--;
 800104a:	f644 661f 	movw	r6, #19999	; 0x4e1f
			if(count.key_Up == _100MS)
 800104e:	2964      	cmp	r1, #100	; 0x64
			count.exitMenu--;
 8001050:	60ee      	str	r6, [r5, #12]
			if(count.key_Up == _100MS)
 8001052:	d109      	bne.n	8001068 <readGPIO+0x15c>
					flag.key_Up = SET;				// Increase Value
 8001054:	2101      	movs	r1, #1
					indexValue++;
 8001056:	4d49      	ldr	r5, [pc, #292]	; (800117c <readGPIO+0x270>)
					flag.key_Up = SET;				// Increase Value
 8001058:	7081      	strb	r1, [r0, #2]
					indexValue++;
 800105a:	7829      	ldrb	r1, [r5, #0]
 800105c:	3101      	adds	r1, #1
 800105e:	b2c9      	uxtb	r1, r1
					if(indexValue > 8) indexValue =0;
 8001060:	2908      	cmp	r1, #8
 8001062:	bf88      	it	hi
 8001064:	2100      	movhi	r1, #0
 8001066:	7029      	strb	r1, [r5, #0]
			if(count.key_Dwn == _100MS)
 8001068:	2a64      	cmp	r2, #100	; 0x64
 800106a:	d010      	beq.n	800108e <readGPIO+0x182>
			if(count.key_Enter == _100MS) keyState = keyState_Setting;   // Save Setting Value
 800106c:	f1be 0f64 	cmp.w	lr, #100	; 0x64
 8001070:	bf04      	itt	eq
 8001072:	2202      	moveq	r2, #2
 8001074:	7022      	strbeq	r2, [r4, #0]
			if(count.key_Mode == _100MS) keyState = keyState_Selection;	// Back to Prev Page
 8001076:	2b64      	cmp	r3, #100	; 0x64
 8001078:	d0e2      	beq.n	8001040 <readGPIO+0x134>
}
 800107a:	bd70      	pop	{r4, r5, r6, pc}
			if(count.key_Up == _100MS) flag.key_Up = SET;				// Next parameter to show
 800107c:	2964      	cmp	r1, #100	; 0x64
 800107e:	bf04      	itt	eq
 8001080:	2301      	moveq	r3, #1
 8001082:	7083      	strbeq	r3, [r0, #2]
			if(count.key_Dwn == _100MS) flag.key_Dwn = SET;			    // Prev parameter to show
 8001084:	2a64      	cmp	r2, #100	; 0x64
 8001086:	d196      	bne.n	8000fb6 <readGPIO+0xaa>
 8001088:	2301      	movs	r3, #1
 800108a:	70c3      	strb	r3, [r0, #3]
}
 800108c:	bd70      	pop	{r4, r5, r6, pc}
					flag.key_Dwn = SET;				// Decrease Value
 800108e:	2501      	movs	r5, #1
					if(indexValue > 0) indexValue--;
 8001090:	493a      	ldr	r1, [pc, #232]	; (800117c <readGPIO+0x270>)
					flag.key_Dwn = SET;				// Decrease Value
 8001092:	70c5      	strb	r5, [r0, #3]
					if(indexValue > 0) indexValue--;
 8001094:	780a      	ldrb	r2, [r1, #0]
 8001096:	2a00      	cmp	r2, #0
 8001098:	d0e8      	beq.n	800106c <readGPIO+0x160>
 800109a:	3a01      	subs	r2, #1
 800109c:	700a      	strb	r2, [r1, #0]
 800109e:	e7e5      	b.n	800106c <readGPIO+0x160>
	switch(keyState)
 80010a0:	4696      	mov	lr, r2
			count.exitMenu--;
 80010a2:	f644 621f 	movw	r2, #19999	; 0x4e1f
			if(count.key_Enter == _200MS) keyState = keyState_Setting;   // Go to Setting Page
 80010a6:	f1be 0fc8 	cmp.w	lr, #200	; 0xc8
			count.exitMenu--;
 80010aa:	60ea      	str	r2, [r5, #12]
			if(count.key_Enter == _200MS) keyState = keyState_Setting;   // Go to Setting Page
 80010ac:	d101      	bne.n	80010b2 <readGPIO+0x1a6>
 80010ae:	2202      	movs	r2, #2
 80010b0:	7022      	strb	r2, [r4, #0]
			if(count.key_Mode == _100MS) keyState = keyState_Home;		// Back to Prev Page
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	f47f af7f 	bne.w	8000fb6 <readGPIO+0xaa>
 80010b8:	2300      	movs	r3, #0
 80010ba:	7023      	strb	r3, [r4, #0]
}
 80010bc:	bd70      	pop	{r4, r5, r6, pc}
			count.exitMenu--;
 80010be:	f644 611f 	movw	r1, #19999	; 0x4e1f
			if(count.key_Dwn == _100MS)
 80010c2:	2a64      	cmp	r2, #100	; 0x64
			count.exitMenu--;
 80010c4:	60e9      	str	r1, [r5, #12]
			if(count.key_Dwn == _100MS)
 80010c6:	f47f af76 	bne.w	8000fb6 <readGPIO+0xaa>
					if(indexMenu > 0) indexMenu--;
 80010ca:	4a2b      	ldr	r2, [pc, #172]	; (8001178 <readGPIO+0x26c>)
					flag.key_Dwn = SET;				// Prev Menu
 80010cc:	70c3      	strb	r3, [r0, #3]
					if(indexMenu > 0) indexMenu--;
 80010ce:	7813      	ldrb	r3, [r2, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f43f af70 	beq.w	8000fb6 <readGPIO+0xaa>
 80010d6:	3b01      	subs	r3, #1
 80010d8:	7013      	strb	r3, [r2, #0]
}
 80010da:	bd70      	pop	{r4, r5, r6, pc}
	if(key.Value == KEY_ENT) 	count.key_Enter++; else count.key_Enter =0;
 80010dc:	806e      	strh	r6, [r5, #2]
	if(key.Value == KEY_UP) 	count.key_Up++; else count.key_Up =0;
 80010de:	80ae      	strh	r6, [r5, #4]
	if(key.Value == KEY_DWN) 	count.key_Dwn++; else count.key_Dwn =0;
 80010e0:	2200      	movs	r2, #0
	switch(keyState)
 80010e2:	4c24      	ldr	r4, [pc, #144]	; (8001174 <readGPIO+0x268>)
 80010e4:	80ea      	strh	r2, [r5, #6]
 80010e6:	7826      	ldrb	r6, [r4, #0]
 80010e8:	2e01      	cmp	r6, #1
 80010ea:	b2f1      	uxtb	r1, r6
 80010ec:	d006      	beq.n	80010fc <readGPIO+0x1f0>
 80010ee:	2902      	cmp	r1, #2
 80010f0:	d00d      	beq.n	800110e <readGPIO+0x202>
 80010f2:	4613      	mov	r3, r2
 80010f4:	2900      	cmp	r1, #0
 80010f6:	f47f af5e 	bne.w	8000fb6 <readGPIO+0xaa>
 80010fa:	e79e      	b.n	800103a <readGPIO+0x12e>
			if(key.Value > 0) count.exitMenu = _20SEC;
 80010fc:	b96b      	cbnz	r3, 800111a <readGPIO+0x20e>
			count.exitMenu--;
 80010fe:	68ea      	ldr	r2, [r5, #12]
 8001100:	3a01      	subs	r2, #1
 8001102:	60ea      	str	r2, [r5, #12]
			if(count.exitMenu == 0) keyState = keyState_Home;			// Automatic Back to Prev Page
 8001104:	2a00      	cmp	r2, #0
 8001106:	f47f af56 	bne.w	8000fb6 <readGPIO+0xaa>
			if(count.key_Mode == _100MS) keyState = keyState_Selection;	// Back to Prev Page
 800110a:	7023      	strb	r3, [r4, #0]
 800110c:	e79a      	b.n	8001044 <readGPIO+0x138>
			if(key.Value > 0) count.exitMenu = _20SEC;
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f5      	beq.n	80010fe <readGPIO+0x1f2>
 8001112:	4613      	mov	r3, r2
 8001114:	4696      	mov	lr, r2
 8001116:	4611      	mov	r1, r2
 8001118:	e797      	b.n	800104a <readGPIO+0x13e>
 800111a:	4613      	mov	r3, r2
 800111c:	4696      	mov	lr, r2
 800111e:	e7c0      	b.n	80010a2 <readGPIO+0x196>
	switch(keyState)
 8001120:	4696      	mov	lr, r2
 8001122:	4611      	mov	r1, r2
 8001124:	e791      	b.n	800104a <readGPIO+0x13e>
	if(key.Value == KEY_MODE) 	count.key_Mode++; else count.key_Mode =0;
 8001126:	2600      	movs	r6, #0
 8001128:	4d11      	ldr	r5, [pc, #68]	; (8001170 <readGPIO+0x264>)
	if(key.Value == KEY_ENT) 	count.key_Enter++; else count.key_Enter =0;
 800112a:	2b02      	cmp	r3, #2
	if(key.Value == KEY_MODE) 	count.key_Mode++; else count.key_Mode =0;
 800112c:	802e      	strh	r6, [r5, #0]
	if(key.Value == KEY_ENT) 	count.key_Enter++; else count.key_Enter =0;
 800112e:	d1d5      	bne.n	80010dc <readGPIO+0x1d0>
	switch(keyState)
 8001130:	4c10      	ldr	r4, [pc, #64]	; (8001174 <readGPIO+0x268>)
	if(key.Value == KEY_ENT) 	count.key_Enter++; else count.key_Enter =0;
 8001132:	886a      	ldrh	r2, [r5, #2]
	switch(keyState)
 8001134:	f894 c000 	ldrb.w	ip, [r4]
	if(key.Value == KEY_ENT) 	count.key_Enter++; else count.key_Enter =0;
 8001138:	3201      	adds	r2, #1
 800113a:	fa1f fe82 	uxth.w	lr, r2
	switch(keyState)
 800113e:	f1bc 0f01 	cmp.w	ip, #1
 8001142:	4633      	mov	r3, r6
	if(key.Value == KEY_ENT) 	count.key_Enter++; else count.key_Enter =0;
 8001144:	f8a5 e002 	strh.w	lr, [r5, #2]
	if(key.Value == KEY_UP) 	count.key_Up++; else count.key_Up =0;
 8001148:	606e      	str	r6, [r5, #4]
	switch(keyState)
 800114a:	fa5f f18c 	uxtb.w	r1, ip
 800114e:	d0a8      	beq.n	80010a2 <readGPIO+0x196>
 8001150:	2902      	cmp	r1, #2
 8001152:	f47f af70 	bne.w	8001036 <readGPIO+0x12a>
 8001156:	4631      	mov	r1, r6
 8001158:	4632      	mov	r2, r6
 800115a:	e776      	b.n	800104a <readGPIO+0x13e>
 800115c:	40010c00 	.word	0x40010c00
 8001160:	20000314 	.word	0x20000314
 8001164:	40010800 	.word	0x40010800
 8001168:	20000344 	.word	0x20000344
 800116c:	20000120 	.word	0x20000120
 8001170:	200000f8 	.word	0x200000f8
 8001174:	2000031c 	.word	0x2000031c
 8001178:	20000308 	.word	0x20000308
 800117c:	20000309 	.word	0x20000309

08001180 <sysTick>:
	cntTick++;
 8001180:	4a3b      	ldr	r2, [pc, #236]	; (8001270 <sysTick+0xf0>)
{
 8001182:	b510      	push	{r4, lr}
	cntTick++;
 8001184:	8813      	ldrh	r3, [r2, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b29b      	uxth	r3, r3
	if(cntTick > 1000)
 800118a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800118e:	d84d      	bhi.n	800122c <sysTick+0xac>
	cntTick++;
 8001190:	8013      	strh	r3, [r2, #0]
	readGPIO();
 8001192:	f7ff febb 	bl	8000f0c <readGPIO>
	if((ntc.mosfet > TEMP_45C)&&(powerState = powerState_On))
 8001196:	f241 1294 	movw	r2, #4500	; 0x1194
 800119a:	4c36      	ldr	r4, [pc, #216]	; (8001274 <sysTick+0xf4>)
 800119c:	f9b4 3000 	ldrsh.w	r3, [r4]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	dd2f      	ble.n	8001204 <sysTick+0x84>
 80011a4:	2201      	movs	r2, #1
		ntc.cnt_mosfet++;
 80011a6:	88a3      	ldrh	r3, [r4, #4]
	if((ntc.mosfet > TEMP_45C)&&(powerState = powerState_On))
 80011a8:	4933      	ldr	r1, [pc, #204]	; (8001278 <sysTick+0xf8>)
		ntc.cnt_mosfet++;
 80011aa:	4413      	add	r3, r2
 80011ac:	b29b      	uxth	r3, r3
		if(ntc.cnt_mosfet > _1SEC)
 80011ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
	if((ntc.mosfet > TEMP_45C)&&(powerState = powerState_On))
 80011b2:	700a      	strb	r2, [r1, #0]
		if(ntc.cnt_mosfet > _1SEC)
 80011b4:	d854      	bhi.n	8001260 <sysTick+0xe0>
		ntc.cnt_mosfet = 0;
 80011b6:	80a3      	strh	r3, [r4, #4]
	if((ntc.transformer > TEMP_60C)&&(powerState = powerState_On))
 80011b8:	f241 7270 	movw	r2, #6000	; 0x1770
 80011bc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80011c0:	4293      	cmp	r3, r2
 80011c2:	dd0a      	ble.n	80011da <sysTick+0x5a>
 80011c4:	2201      	movs	r2, #1
		ntc.cnt_transformer++;
 80011c6:	88e3      	ldrh	r3, [r4, #6]
	if((ntc.transformer > TEMP_60C)&&(powerState = powerState_On))
 80011c8:	492b      	ldr	r1, [pc, #172]	; (8001278 <sysTick+0xf8>)
		ntc.cnt_transformer++;
 80011ca:	4413      	add	r3, r2
 80011cc:	b29b      	uxth	r3, r3
		if(ntc.cnt_transformer > _1SEC)
 80011ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
	if((ntc.transformer > TEMP_60C)&&(powerState = powerState_On))
 80011d2:	700a      	strb	r2, [r1, #0]
		if(ntc.cnt_transformer > _1SEC)
 80011d4:	d83c      	bhi.n	8001250 <sysTick+0xd0>
		ntc.cnt_transformer = 0;
 80011d6:	80e3      	strh	r3, [r4, #6]
}
 80011d8:	bd10      	pop	{r4, pc}
	else if((ntc.transformer < TEMP_50C)&&(powerState = powerState_On))
 80011da:	f241 3287 	movw	r2, #4999	; 0x1387
 80011de:	4293      	cmp	r3, r2
 80011e0:	dc33      	bgt.n	800124a <sysTick+0xca>
 80011e2:	2101      	movs	r1, #1
		ntc.cnt_transformer++;
 80011e4:	88e3      	ldrh	r3, [r4, #6]
	else if((ntc.transformer < TEMP_50C)&&(powerState = powerState_On))
 80011e6:	4a24      	ldr	r2, [pc, #144]	; (8001278 <sysTick+0xf8>)
		ntc.cnt_transformer++;
 80011e8:	440b      	add	r3, r1
 80011ea:	b29b      	uxth	r3, r3
		if(ntc.cnt_transformer > _1SEC)
 80011ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
	else if((ntc.transformer < TEMP_50C)&&(powerState = powerState_On))
 80011f0:	7011      	strb	r1, [r2, #0]
		if(ntc.cnt_transformer > _1SEC)
 80011f2:	d9f0      	bls.n	80011d6 <sysTick+0x56>
		{	ntc.cnt_transformer = 0;
 80011f4:	2200      	movs	r2, #0
			FAN_INACTIVE;
 80011f6:	2120      	movs	r1, #32
		{	ntc.cnt_transformer = 0;
 80011f8:	80e2      	strh	r2, [r4, #6]
			FAN_INACTIVE;
 80011fa:	4820      	ldr	r0, [pc, #128]	; (800127c <sysTick+0xfc>)
}
 80011fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			FAN_INACTIVE;
 8001200:	f001 be4c 	b.w	8002e9c <HAL_GPIO_WritePin>
	else if((ntc.mosfet < TEMP_35C)&&(powerState = powerState_On))
 8001204:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001208:	4293      	cmp	r3, r2
 800120a:	dc1c      	bgt.n	8001246 <sysTick+0xc6>
 800120c:	2101      	movs	r1, #1
		ntc.cnt_mosfet++;
 800120e:	88a3      	ldrh	r3, [r4, #4]
	else if((ntc.mosfet < TEMP_35C)&&(powerState = powerState_On))
 8001210:	4a19      	ldr	r2, [pc, #100]	; (8001278 <sysTick+0xf8>)
		ntc.cnt_mosfet++;
 8001212:	440b      	add	r3, r1
 8001214:	b29b      	uxth	r3, r3
		if(ntc.cnt_mosfet > _1SEC)
 8001216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
	else if((ntc.mosfet < TEMP_35C)&&(powerState = powerState_On))
 800121a:	7011      	strb	r1, [r2, #0]
		if(ntc.cnt_mosfet > _1SEC)
 800121c:	d9cb      	bls.n	80011b6 <sysTick+0x36>
		{	ntc.cnt_mosfet = 0;
 800121e:	2200      	movs	r2, #0
			FAN_INACTIVE;
 8001220:	2120      	movs	r1, #32
 8001222:	4816      	ldr	r0, [pc, #88]	; (800127c <sysTick+0xfc>)
		{	ntc.cnt_mosfet = 0;
 8001224:	80a2      	strh	r2, [r4, #4]
			FAN_INACTIVE;
 8001226:	f001 fe39 	bl	8002e9c <HAL_GPIO_WritePin>
 800122a:	e7c5      	b.n	80011b8 <sysTick+0x38>
		if(ccr1 >= (PWM_PERIOD_CYCLES/2)) ccr1 = 0;
 800122c:	f240 64d5 	movw	r4, #1749	; 0x6d5
		cntTick = 0;
 8001230:	2000      	movs	r0, #0
		ccr1 += 50;
 8001232:	4913      	ldr	r1, [pc, #76]	; (8001280 <sysTick+0x100>)
		cntTick = 0;
 8001234:	8010      	strh	r0, [r2, #0]
		ccr1 += 50;
 8001236:	880b      	ldrh	r3, [r1, #0]
 8001238:	3332      	adds	r3, #50	; 0x32
 800123a:	b29b      	uxth	r3, r3
		if(ccr1 >= (PWM_PERIOD_CYCLES/2)) ccr1 = 0;
 800123c:	42a3      	cmp	r3, r4
		ccr1 += 50;
 800123e:	bf94      	ite	ls
 8001240:	800b      	strhls	r3, [r1, #0]
		if(ccr1 >= (PWM_PERIOD_CYCLES/2)) ccr1 = 0;
 8001242:	8008      	strhhi	r0, [r1, #0]
 8001244:	e7a5      	b.n	8001192 <sysTick+0x12>
		ntc.cnt_mosfet = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	e7b5      	b.n	80011b6 <sysTick+0x36>
		ntc.cnt_transformer = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	80e3      	strh	r3, [r4, #6]
}
 800124e:	bd10      	pop	{r4, pc}
		{	ntc.cnt_transformer = 0;
 8001250:	2300      	movs	r3, #0
			FAN_ACTIVE;
 8001252:	2120      	movs	r1, #32
		{	ntc.cnt_transformer = 0;
 8001254:	80e3      	strh	r3, [r4, #6]
			FAN_ACTIVE;
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <sysTick+0xfc>)
}
 8001258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			FAN_ACTIVE;
 800125c:	f001 be1e 	b.w	8002e9c <HAL_GPIO_WritePin>
		{	ntc.cnt_mosfet = 0;
 8001260:	2300      	movs	r3, #0
			FAN_ACTIVE;
 8001262:	2120      	movs	r1, #32
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <sysTick+0xfc>)
		{	ntc.cnt_mosfet = 0;
 8001266:	80a3      	strh	r3, [r4, #4]
			FAN_ACTIVE;
 8001268:	f001 fe18 	bl	8002e9c <HAL_GPIO_WritePin>
 800126c:	e7a4      	b.n	80011b8 <sysTick+0x38>
 800126e:	bf00      	nop
 8001270:	200000f2 	.word	0x200000f2
 8001274:	20000320 	.word	0x20000320
 8001278:	20000344 	.word	0x20000344
 800127c:	40010c00 	.word	0x40010c00
 8001280:	20000000 	.word	0x20000000

08001284 <execDISP>:
{
 8001284:	b538      	push	{r3, r4, r5, lr}
	if(keyState != keyState)
 8001286:	4c2a      	ldr	r4, [pc, #168]	; (8001330 <execDISP+0xac>)
 8001288:	7822      	ldrb	r2, [r4, #0]
 800128a:	7823      	ldrb	r3, [r4, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d001      	beq.n	8001294 <execDISP+0x10>
		LCD_CLEAR_DISPLAY();
 8001290:	f7ff fab4 	bl	80007fc <LCD_CLEAR_DISPLAY>
	switch(keyState)
 8001294:	7823      	ldrb	r3, [r4, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	b2dd      	uxtb	r5, r3
 800129a:	d006      	beq.n	80012aa <execDISP+0x26>
 800129c:	2d02      	cmp	r5, #2
 800129e:	d032      	beq.n	8001306 <execDISP+0x82>
 80012a0:	b1cd      	cbz	r5, 80012d6 <execDISP+0x52>
	prv_keyState = keyState;
 80012a2:	7822      	ldrb	r2, [r4, #0]
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <execDISP+0xb0>)
 80012a6:	701a      	strb	r2, [r3, #0]
}
 80012a8:	bd38      	pop	{r3, r4, r5, pc}
			LCD_LOCATE(1, 1);
 80012aa:	4629      	mov	r1, r5
 80012ac:	4628      	mov	r0, r5
 80012ae:	f7ff fab7 	bl	8000820 <LCD_LOCATE>
			LCD_printf("Menu : %2d = %2d", indexMenu, indexValue);
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <execDISP+0xb4>)
 80012b4:	4a21      	ldr	r2, [pc, #132]	; (800133c <execDISP+0xb8>)
 80012b6:	7819      	ldrb	r1, [r3, #0]
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	4821      	ldr	r0, [pc, #132]	; (8001340 <execDISP+0xbc>)
 80012bc:	f7ff fac0 	bl	8000840 <LCD_printf>
			LCD_LOCATE(2, 1);
 80012c0:	4629      	mov	r1, r5
 80012c2:	2002      	movs	r0, #2
 80012c4:	f7ff faac 	bl	8000820 <LCD_LOCATE>
			LCD_printstring("Select >> Enter \n");
 80012c8:	481e      	ldr	r0, [pc, #120]	; (8001344 <execDISP+0xc0>)
 80012ca:	f7ff fa8d 	bl	80007e8 <LCD_printstring>
	prv_keyState = keyState;
 80012ce:	7822      	ldrb	r2, [r4, #0]
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <execDISP+0xb0>)
 80012d2:	701a      	strb	r2, [r3, #0]
}
 80012d4:	bd38      	pop	{r3, r4, r5, pc}
			LCD_LOCATE(1, 1);
 80012d6:	2101      	movs	r1, #1
 80012d8:	4608      	mov	r0, r1
 80012da:	f7ff faa1 	bl	8000820 <LCD_LOCATE>
			LCD_printf("Curr = %4d A", invIinInst);
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <execDISP+0xc4>)
 80012e0:	481a      	ldr	r0, [pc, #104]	; (800134c <execDISP+0xc8>)
 80012e2:	8819      	ldrh	r1, [r3, #0]
 80012e4:	b289      	uxth	r1, r1
 80012e6:	f7ff faab 	bl	8000840 <LCD_printf>
			LCD_LOCATE(2, 1);
 80012ea:	2101      	movs	r1, #1
 80012ec:	2002      	movs	r0, #2
 80012ee:	f7ff fa97 	bl	8000820 <LCD_LOCATE>
			LCD_printf("Volt = %4d V", invVinInst);
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <execDISP+0xcc>)
 80012f4:	4817      	ldr	r0, [pc, #92]	; (8001354 <execDISP+0xd0>)
 80012f6:	8819      	ldrh	r1, [r3, #0]
 80012f8:	b289      	uxth	r1, r1
 80012fa:	f7ff faa1 	bl	8000840 <LCD_printf>
	prv_keyState = keyState;
 80012fe:	7822      	ldrb	r2, [r4, #0]
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <execDISP+0xb0>)
 8001302:	701a      	strb	r2, [r3, #0]
}
 8001304:	bd38      	pop	{r3, r4, r5, pc}
			LCD_LOCATE(1, 1);
 8001306:	2101      	movs	r1, #1
 8001308:	4608      	mov	r0, r1
 800130a:	f7ff fa89 	bl	8000820 <LCD_LOCATE>
			LCD_printf("Value : %2d ", indexValue);
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <execDISP+0xb8>)
 8001310:	4811      	ldr	r0, [pc, #68]	; (8001358 <execDISP+0xd4>)
 8001312:	7819      	ldrb	r1, [r3, #0]
 8001314:	f7ff fa94 	bl	8000840 <LCD_printf>
			LCD_LOCATE(2, 1);
 8001318:	4628      	mov	r0, r5
 800131a:	2101      	movs	r1, #1
 800131c:	f7ff fa80 	bl	8000820 <LCD_LOCATE>
			LCD_printstring("Adjust >> Save \n");
 8001320:	480e      	ldr	r0, [pc, #56]	; (800135c <execDISP+0xd8>)
 8001322:	f7ff fa61 	bl	80007e8 <LCD_printstring>
	prv_keyState = keyState;
 8001326:	7822      	ldrb	r2, [r4, #0]
 8001328:	4b02      	ldr	r3, [pc, #8]	; (8001334 <execDISP+0xb0>)
 800132a:	701a      	strb	r2, [r3, #0]
}
 800132c:	bd38      	pop	{r3, r4, r5, pc}
 800132e:	bf00      	nop
 8001330:	2000031c 	.word	0x2000031c
 8001334:	20000345 	.word	0x20000345
 8001338:	20000308 	.word	0x20000308
 800133c:	20000309 	.word	0x20000309
 8001340:	08005ba4 	.word	0x08005ba4
 8001344:	08005bb8 	.word	0x08005bb8
 8001348:	2000030a 	.word	0x2000030a
 800134c:	08005b84 	.word	0x08005b84
 8001350:	20000310 	.word	0x20000310
 8001354:	08005b94 	.word	0x08005b94
 8001358:	08005bcc 	.word	0x08005bcc
 800135c:	08005bdc 	.word	0x08005bdc

08001360 <InitParameters>:
	CTMax = 0;
 8001360:	2200      	movs	r2, #0
	VoutT = (VOUT_TARGET * VOUT_RESISTOR_RATIO) / 10000;
 8001362:	f44f 7393 	mov.w	r3, #294	; 0x126
	VoutRange = VOUT_TARGET / 1000;
 8001366:	f04f 0c05 	mov.w	ip, #5
	TIM1->CCR3 = ccr3; 	// Set ADCs Trigger point
 800136a:	480f      	ldr	r0, [pc, #60]	; (80013a8 <InitParameters+0x48>)
 800136c:	490f      	ldr	r1, [pc, #60]	; (80013ac <InitParameters+0x4c>)
 800136e:	8800      	ldrh	r0, [r0, #0]
{
 8001370:	b470      	push	{r4, r5, r6}
	TIM1->CCR3 = ccr3; 	// Set ADCs Trigger point
 8001372:	63c8      	str	r0, [r1, #60]	; 0x3c
	CTMax = 0;
 8001374:	4e0e      	ldr	r6, [pc, #56]	; (80013b0 <InitParameters+0x50>)
	VoutT = (VOUT_TARGET * VOUT_RESISTOR_RATIO) / 10000;
 8001376:	490f      	ldr	r1, [pc, #60]	; (80013b4 <InitParameters+0x54>)
	CTMin = 0;
 8001378:	4d0f      	ldr	r5, [pc, #60]	; (80013b8 <InitParameters+0x58>)
	CTMax = 0;
 800137a:	8032      	strh	r2, [r6, #0]
	CTMin = 0;
 800137c:	802a      	strh	r2, [r5, #0]
	VoutT = (VOUT_TARGET * VOUT_RESISTOR_RATIO) / 10000;
 800137e:	600b      	str	r3, [r1, #0]
	VoutT = (VoutT * 4096) / REAL_3V3;
 8001380:	680b      	ldr	r3, [r1, #0]
 8001382:	4c0e      	ldr	r4, [pc, #56]	; (80013bc <InitParameters+0x5c>)
 8001384:	031b      	lsls	r3, r3, #12
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	fba4 4303 	umull	r4, r3, r4, r3
}
 800138c:	bc70      	pop	{r4, r5, r6}
	VoutRange = VOUT_TARGET / 1000;
 800138e:	480c      	ldr	r0, [pc, #48]	; (80013c0 <InitParameters+0x60>)
	VoutT = (VoutT * 4096) / REAL_3V3;
 8001390:	fa23 f30c 	lsr.w	r3, r3, ip
 8001394:	600b      	str	r3, [r1, #0]
	VoutRange = VOUT_TARGET / 1000;
 8001396:	f8a0 c000 	strh.w	ip, [r0]
	VoutDelta = VOUT_TARGET - (VoutRange * 1000);
 800139a:	8803      	ldrh	r3, [r0, #0]
	pi_control.ki = 0;  // 50/200 = 25% = 0.25
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <InitParameters+0x64>)
	pi_control.kp = 0;  // 50/200 = 25% = 0.25
 800139e:	e9c3 2200 	strd	r2, r2, [r3]
	pi_control.ProportionalTerm =0;
 80013a2:	60da      	str	r2, [r3, #12]
}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000002 	.word	0x20000002
 80013ac:	40012c00 	.word	0x40012c00
 80013b0:	200000b4 	.word	0x200000b4
 80013b4:	200000bc 	.word	0x200000bc
 80013b8:	200000b6 	.word	0x200000b6
 80013bc:	09ee009f 	.word	0x09ee009f
 80013c0:	200000b8 	.word	0x200000b8
 80013c4:	2000032c 	.word	0x2000032c

080013c8 <InitPeripheral>:
	GPIOC->BSRR = (uint32_t)GPIO_PIN_13 << 16u;  // RESET
 80013c8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	GPIOC->BSRR = (uint32_t)GPIO_PIN_14 << 16u;  // RESET
 80013cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	GPIOC->BSRR = (uint32_t)GPIO_PIN_15 << 16u;  // RESET
 80013d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
{
 80013d4:	b510      	push	{r4, lr}
	GPIOC->BSRR = (uint32_t)GPIO_PIN_13 << 16u;  // RESET
 80013d6:	4c0b      	ldr	r4, [pc, #44]	; (8001404 <InitPeripheral+0x3c>)
	HAL_Delay(1000);
 80013d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	GPIOC->BSRR = (uint32_t)GPIO_PIN_13 << 16u;  // RESET
 80013dc:	6121      	str	r1, [r4, #16]
	GPIOC->BSRR = (uint32_t)GPIO_PIN_14 << 16u;  // RESET
 80013de:	6122      	str	r2, [r4, #16]
	GPIOC->BSRR = (uint32_t)GPIO_PIN_15 << 16u;  // RESET
 80013e0:	6123      	str	r3, [r4, #16]
	HAL_Delay(1000);
 80013e2:	f000 ff45 	bl	8002270 <HAL_Delay>
	GPIOC->BSRR = GPIO_PIN_13;  // SET
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	GPIOC->BSRR = GPIO_PIN_14;  // SET
 80013ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	GPIOC->BSRR = GPIO_PIN_15;  // SET
 80013ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIOC->BSRR = GPIO_PIN_13;  // SET
 80013f2:	6121      	str	r1, [r4, #16]
	HAL_Delay(1000);
 80013f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	GPIOC->BSRR = GPIO_PIN_14;  // SET
 80013f8:	6122      	str	r2, [r4, #16]
	GPIOC->BSRR = GPIO_PIN_15;  // SET
 80013fa:	6123      	str	r3, [r4, #16]
}
 80013fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(1000);
 8001400:	f000 bf36 	b.w	8002270 <HAL_Delay>
 8001404:	40011000 	.word	0x40011000

08001408 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	2400      	movs	r4, #0
{
 800140a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800140e:	b0a3      	sub	sp, #140	; 0x8c
  HAL_Init();
 8001410:	f000 ff0a 	bl	8002228 <HAL_Init>
  SystemClock_Config();
 8001414:	f7ff fa38 	bl	8000888 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 800141c:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001420:	4da1      	ldr	r5, [pc, #644]	; (80016a8 <main+0x2a0>)
  HAL_GPIO_WritePin(GPIOC, LD_FLT_Pin|LD_BYPSS_Pin|LD_RUN_Pin, GPIO_PIN_RESET);
 8001422:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, LD_FLT_Pin|LD_BYPSS_Pin|LD_RUN_Pin, GPIO_PIN_RESET);
 8001428:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	61ab      	str	r3, [r5, #24]
 8001430:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, LD_FLT_Pin|LD_BYPSS_Pin|LD_RUN_Pin, GPIO_PIN_RESET);
 8001432:	489e      	ldr	r0, [pc, #632]	; (80016ac <main+0x2a4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	9308      	str	r3, [sp, #32]
 800143a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143c:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001440:	f043 0320 	orr.w	r3, r3, #32
 8001444:	61ab      	str	r3, [r5, #24]
 8001446:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144c:	f003 0320 	and.w	r3, r3, #32
 8001450:	9309      	str	r3, [sp, #36]	; 0x24
 8001452:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	69ab      	ldr	r3, [r5, #24]
  hadc1.Instance = ADC1;
 8001456:	4e96      	ldr	r6, [pc, #600]	; (80016b0 <main+0x2a8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	61ab      	str	r3, [r5, #24]
 800145e:	69ab      	ldr	r3, [r5, #24]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	930a      	str	r3, [sp, #40]	; 0x28
 8001466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001468:	69ab      	ldr	r3, [r5, #24]
 800146a:	f043 0308 	orr.w	r3, r3, #8
 800146e:	61ab      	str	r3, [r5, #24]
 8001470:	69ab      	ldr	r3, [r5, #24]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	930b      	str	r3, [sp, #44]	; 0x2c
 8001478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, LD_FLT_Pin|LD_BYPSS_Pin|LD_RUN_Pin, GPIO_PIN_RESET);
 800147a:	f001 fd0f 	bl	8002e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RS_Pin|LOB_Pin, GPIO_PIN_RESET);
 800147e:	4622      	mov	r2, r4
 8001480:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8001484:	488b      	ldr	r0, [pc, #556]	; (80016b4 <main+0x2ac>)
 8001486:	f001 fd09 	bl	8002e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, EN_Pin|D4_Pin|D5_Pin|D6_Pin
 800148a:	4622      	mov	r2, r4
 800148c:	f648 4137 	movw	r1, #35895	; 0x8c37
 8001490:	4889      	ldr	r0, [pc, #548]	; (80016b8 <main+0x2b0>)
 8001492:	f001 fd03 	bl	8002e9c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD_FLT_Pin|LD_BYPSS_Pin|LD_RUN_Pin;
 8001496:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149a:	4884      	ldr	r0, [pc, #528]	; (80016ac <main+0x2a4>)
 800149c:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Pin = LD_FLT_Pin|LD_BYPSS_Pin|LD_RUN_Pin;
 800149e:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	e9cd 741b 	strd	r7, r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	f001 fbf2 	bl	8002c90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = THMO_Pin;
 80014ac:	2240      	movs	r2, #64	; 0x40
 80014ae:	2300      	movs	r3, #0
  HAL_GPIO_Init(THMO_GPIO_Port, &GPIO_InitStruct);
 80014b0:	4880      	ldr	r0, [pc, #512]	; (80016b4 <main+0x2ac>)
 80014b2:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Pin = THMO_Pin;
 80014b4:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(THMO_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f001 fbe9 	bl	8002c90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RS_Pin|LOB_Pin;
 80014be:	f44f 6390 	mov.w	r3, #1152	; 0x480
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	487c      	ldr	r0, [pc, #496]	; (80016b4 <main+0x2ac>)
 80014c4:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Pin = RS_Pin|LOB_Pin;
 80014c6:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	e9cd 741b 	strd	r7, r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f001 fbde 	bl	8002c90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EN_Pin|D4_Pin|D5_Pin|D6_Pin
 80014d4:	f648 4337 	movw	r3, #35895	; 0x8c37
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	4877      	ldr	r0, [pc, #476]	; (80016b8 <main+0x2b0>)
 80014da:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Pin = EN_Pin|D4_Pin|D5_Pin|D6_Pin
 80014dc:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	e9cd 741b 	strd	r7, r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f001 fbd3 	bl	8002c90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEY_DWN_Pin|KEY_UP_Pin|KEY_ENT_Pin;
 80014ea:	f44f 4218 	mov.w	r2, #38912	; 0x9800
 80014ee:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	4870      	ldr	r0, [pc, #448]	; (80016b4 <main+0x2ac>)
 80014f2:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Pin = KEY_DWN_Pin|KEY_UP_Pin|KEY_ENT_Pin;
 80014f4:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f8:	971c      	str	r7, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f001 fbc9 	bl	8002c90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEY_MODE_Pin;
 80014fe:	2208      	movs	r2, #8
 8001500:	2300      	movs	r3, #0
  HAL_GPIO_Init(KEY_MODE_GPIO_Port, &GPIO_InitStruct);
 8001502:	486d      	ldr	r0, [pc, #436]	; (80016b8 <main+0x2b0>)
 8001504:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Pin = KEY_MODE_Pin;
 8001506:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150a:	971c      	str	r7, [sp, #112]	; 0x70
  HAL_GPIO_Init(KEY_MODE_GPIO_Port, &GPIO_InitStruct);
 800150c:	f001 fbc0 	bl	8002c90 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001510:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001512:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001514:	433b      	orrs	r3, r7
 8001516:	616b      	str	r3, [r5, #20]
 8001518:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800151a:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151c:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800151e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001520:	9307      	str	r3, [sp, #28]
 8001522:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001524:	f001 f9ca 	bl	80028bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001528:	200b      	movs	r0, #11
 800152a:	f001 fa05 	bl	8002938 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 800152e:	4b63      	ldr	r3, [pc, #396]	; (80016bc <main+0x2b4>)
  hadc1.Init.NbrOfConversion = 3;
 8001530:	2103      	movs	r1, #3
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 8001532:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hadc1.Instance = ADC1;
 8001536:	6033      	str	r3, [r6, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001538:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800153c:	4630      	mov	r0, r6
  ADC_ChannelConfTypeDef sConfig = {0};
 800153e:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 8001542:	9412      	str	r4, [sp, #72]	; 0x48
  ADC_ChannelConfTypeDef sConfig = {0};
 8001544:	941c      	str	r4, [sp, #112]	; 0x70
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001546:	7334      	strb	r4, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001548:	7534      	strb	r4, [r6, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154a:	6074      	str	r4, [r6, #4]
  hadc1.Init.NbrOfConversion = 3;
 800154c:	6131      	str	r1, [r6, #16]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 800154e:	61f2      	str	r2, [r6, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001550:	60b3      	str	r3, [r6, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001552:	f000 fe9f 	bl	8002294 <HAL_ADC_Init>
 8001556:	b108      	cbz	r0, 800155c <main+0x154>
 8001558:	b672      	cpsid	i
  while (1)
 800155a:	e7fe      	b.n	800155a <main+0x152>
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800155c:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001560:	4630      	mov	r0, r6
 8001562:	a912      	add	r1, sp, #72	; 0x48
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001564:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001566:	f001 f961 	bl	800282c <HAL_ADCEx_MultiModeConfigChannel>
 800156a:	b108      	cbz	r0, 8001570 <main+0x168>
 800156c:	b672      	cpsid	i
  while (1)
 800156e:	e7fe      	b.n	800156e <main+0x166>
  sConfig.Channel = ADC_CHANNEL_0;
 8001570:	2200      	movs	r2, #0
 8001572:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001574:	4630      	mov	r0, r6
 8001576:	a91a      	add	r1, sp, #104	; 0x68
  sConfig.Channel = ADC_CHANNEL_0;
 8001578:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800157c:	971c      	str	r7, [sp, #112]	; 0x70
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157e:	f000 ff89 	bl	8002494 <HAL_ADC_ConfigChannel>
 8001582:	b108      	cbz	r0, 8001588 <main+0x180>
 8001584:	b672      	cpsid	i
  while (1)
 8001586:	e7fe      	b.n	8001586 <main+0x17e>
  sConfig.Channel = ADC_CHANNEL_2;
 8001588:	2202      	movs	r2, #2
 800158a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800158c:	4630      	mov	r0, r6
 800158e:	a91a      	add	r1, sp, #104	; 0x68
  sConfig.Channel = ADC_CHANNEL_2;
 8001590:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001594:	f000 ff7e 	bl	8002494 <HAL_ADC_ConfigChannel>
 8001598:	b108      	cbz	r0, 800159e <main+0x196>
 800159a:	b672      	cpsid	i
  while (1)
 800159c:	e7fe      	b.n	800159c <main+0x194>
  sConfig.Channel = ADC_CHANNEL_4;
 800159e:	2204      	movs	r2, #4
 80015a0:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a2:	4630      	mov	r0, r6
 80015a4:	a91a      	add	r1, sp, #104	; 0x68
  sConfig.Channel = ADC_CHANNEL_4;
 80015a6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015aa:	f000 ff73 	bl	8002494 <HAL_ADC_ConfigChannel>
 80015ae:	4604      	mov	r4, r0
 80015b0:	b108      	cbz	r0, 80015b6 <main+0x1ae>
 80015b2:	b672      	cpsid	i
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <main+0x1ac>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015b6:	2620      	movs	r6, #32
 80015b8:	4601      	mov	r1, r0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ba:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
 80015be:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
 80015c2:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 80015ca:	900e      	str	r0, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	900c      	str	r0, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ce:	9018      	str	r0, [sp, #96]	; 0x60
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d0:	9011      	str	r0, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d2:	900d      	str	r0, [sp, #52]	; 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015d4:	4632      	mov	r2, r6
 80015d6:	a81a      	add	r0, sp, #104	; 0x68
 80015d8:	f003 fe36 	bl	8005248 <memset>
  htim1.Init.Period = ((PWM_PERIOD_CYCLES)/2);
 80015dc:	f240 63d6 	movw	r3, #1750	; 0x6d6
  htim1.Instance = TIM1;
 80015e0:	4d37      	ldr	r5, [pc, #220]	; (80016c0 <main+0x2b8>)
  htim1.Init.Period = ((PWM_PERIOD_CYCLES)/2);
 80015e2:	60eb      	str	r3, [r5, #12]
  htim1.Instance = TIM1;
 80015e4:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <main+0x2bc>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015e6:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80015e8:	60ae      	str	r6, [r5, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80015ea:	616f      	str	r7, [r5, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80015ec:	606c      	str	r4, [r5, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	612c      	str	r4, [r5, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	61ac      	str	r4, [r5, #24]
  htim1.Instance = TIM1;
 80015f2:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015f4:	f002 fdde 	bl	80041b4 <HAL_TIM_Base_Init>
 80015f8:	b108      	cbz	r0, 80015fe <main+0x1f6>
 80015fa:	b672      	cpsid	i
  while (1)
 80015fc:	e7fe      	b.n	80015fc <main+0x1f4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001602:	4628      	mov	r0, r5
 8001604:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001606:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001608:	f003 f82a 	bl	8004660 <HAL_TIM_ConfigClockSource>
 800160c:	b108      	cbz	r0, 8001612 <main+0x20a>
 800160e:	b672      	cpsid	i
  while (1)
 8001610:	e7fe      	b.n	8001610 <main+0x208>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001612:	4628      	mov	r0, r5
 8001614:	f002 fe62 	bl	80042dc <HAL_TIM_PWM_Init>
 8001618:	b108      	cbz	r0, 800161e <main+0x216>
 800161a:	b672      	cpsid	i
  while (1)
 800161c:	e7fe      	b.n	800161c <main+0x214>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 800161e:	2260      	movs	r2, #96	; 0x60
 8001620:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001622:	4628      	mov	r0, r5
 8001624:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8001626:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800162a:	f003 fa59 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 800162e:	4602      	mov	r2, r0
 8001630:	b108      	cbz	r0, 8001636 <main+0x22e>
 8001632:	b672      	cpsid	i
  while (1)
 8001634:	e7fe      	b.n	8001634 <main+0x22c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001636:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001638:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800163a:	2400      	movs	r4, #0
 800163c:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163e:	a912      	add	r1, sp, #72	; 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001640:	e9cd 2213 	strd	r2, r2, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001644:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001648:	9215      	str	r2, [sp, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800164a:	9218      	str	r2, [sp, #96]	; 0x60
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164c:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800164e:	f002 ff07 	bl	8004460 <HAL_TIM_PWM_ConfigChannel>
 8001652:	b108      	cbz	r0, 8001658 <main+0x250>
 8001654:	b672      	cpsid	i
  while (1)
 8001656:	e7fe      	b.n	8001656 <main+0x24e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001658:	2204      	movs	r2, #4
 800165a:	4819      	ldr	r0, [pc, #100]	; (80016c0 <main+0x2b8>)
 800165c:	a912      	add	r1, sp, #72	; 0x48
 800165e:	f002 feff 	bl	8004460 <HAL_TIM_PWM_ConfigChannel>
 8001662:	b108      	cbz	r0, 8001668 <main+0x260>
 8001664:	b672      	cpsid	i
  while (1)
 8001666:	e7fe      	b.n	8001666 <main+0x25e>
  sConfigOC.Pulse = 1;
 8001668:	2701      	movs	r7, #1
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800166a:	2208      	movs	r2, #8
 800166c:	4814      	ldr	r0, [pc, #80]	; (80016c0 <main+0x2b8>)
 800166e:	a912      	add	r1, sp, #72	; 0x48
  sConfigOC.Pulse = 1;
 8001670:	9713      	str	r7, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001672:	f002 fef5 	bl	8004460 <HAL_TIM_PWM_ConfigChannel>
 8001676:	b108      	cbz	r0, 800167c <main+0x274>
 8001678:	b672      	cpsid	i
  while (1)
 800167a:	e7fe      	b.n	800167a <main+0x272>
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS)/2);
 800167c:	231e      	movs	r3, #30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800167e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS)/2);
 8001682:	931d      	str	r3, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001684:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800168c:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001690:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001692:	a91a      	add	r1, sp, #104	; 0x68
 8001694:	480a      	ldr	r0, [pc, #40]	; (80016c0 <main+0x2b8>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001696:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800169a:	9621      	str	r6, [sp, #132]	; 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800169c:	f003 fa4e 	bl	8004b3c <HAL_TIMEx_ConfigBreakDeadTime>
 80016a0:	4605      	mov	r5, r0
 80016a2:	b188      	cbz	r0, 80016c8 <main+0x2c0>
 80016a4:	b672      	cpsid	i
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <main+0x29e>
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40011000 	.word	0x40011000
 80016b0:	20000138 	.word	0x20000138
 80016b4:	40010800 	.word	0x40010800
 80016b8:	40010c00 	.word	0x40010c00
 80016bc:	40012400 	.word	0x40012400
 80016c0:	20000230 	.word	0x20000230
 80016c4:	40012c00 	.word	0x40012c00
  HAL_TIM_MspPostInit(&htim1);
 80016c8:	485b      	ldr	r0, [pc, #364]	; (8001838 <main+0x430>)
 80016ca:	f000 fc73 	bl	8001fb4 <HAL_TIM_MspPostInit>
  hadc2.Init.NbrOfConversion = 3;
 80016ce:	2303      	movs	r3, #3
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016d0:	f44f 7180 	mov.w	r1, #256	; 0x100
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016d4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc2.Instance = ADC2;
 80016d8:	4c58      	ldr	r4, [pc, #352]	; (800183c <main+0x434>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80016da:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
  hadc2.Init.NbrOfConversion = 3;
 80016de:	6123      	str	r3, [r4, #16]
  hadc2.Instance = ADC2;
 80016e0:	4b57      	ldr	r3, [pc, #348]	; (8001840 <main+0x438>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016e2:	4620      	mov	r0, r4
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016e4:	e9c4 5101 	strd	r5, r1, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016e8:	951c      	str	r5, [sp, #112]	; 0x70
  hadc2.Init.ContinuousConvMode = DISABLE;
 80016ea:	7325      	strb	r5, [r4, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016ec:	7525      	strb	r5, [r4, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ee:	61e2      	str	r2, [r4, #28]
  hadc2.Instance = ADC2;
 80016f0:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016f2:	f000 fdcf 	bl	8002294 <HAL_ADC_Init>
 80016f6:	b108      	cbz	r0, 80016fc <main+0x2f4>
 80016f8:	b672      	cpsid	i
  while (1)
 80016fa:	e7fe      	b.n	80016fa <main+0x2f2>
  sConfig.Channel = ADC_CHANNEL_1;
 80016fc:	2201      	movs	r2, #1
 80016fe:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001700:	4620      	mov	r0, r4
 8001702:	a91a      	add	r1, sp, #104	; 0x68
  sConfig.Channel = ADC_CHANNEL_1;
 8001704:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001708:	971c      	str	r7, [sp, #112]	; 0x70
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800170a:	f000 fec3 	bl	8002494 <HAL_ADC_ConfigChannel>
 800170e:	b108      	cbz	r0, 8001714 <main+0x30c>
 8001710:	b672      	cpsid	i
  while (1)
 8001712:	e7fe      	b.n	8001712 <main+0x30a>
  sConfig.Channel = ADC_CHANNEL_3;
 8001714:	2203      	movs	r2, #3
 8001716:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001718:	4620      	mov	r0, r4
 800171a:	a91a      	add	r1, sp, #104	; 0x68
  sConfig.Channel = ADC_CHANNEL_3;
 800171c:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001720:	f000 feb8 	bl	8002494 <HAL_ADC_ConfigChannel>
 8001724:	b108      	cbz	r0, 800172a <main+0x322>
 8001726:	b672      	cpsid	i
  while (1)
 8001728:	e7fe      	b.n	8001728 <main+0x320>
  sConfig.Channel = ADC_CHANNEL_5;
 800172a:	2303      	movs	r3, #3
 800172c:	2205      	movs	r2, #5
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800172e:	4620      	mov	r0, r4
 8001730:	a91a      	add	r1, sp, #104	; 0x68
  sConfig.Channel = ADC_CHANNEL_5;
 8001732:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001736:	f000 fead 	bl	8002494 <HAL_ADC_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	b108      	cbz	r0, 8001742 <main+0x33a>
 800173e:	b672      	cpsid	i
  while (1)
 8001740:	e7fe      	b.n	8001740 <main+0x338>
  hi2c1.Instance = I2C1;
 8001742:	4840      	ldr	r0, [pc, #256]	; (8001844 <main+0x43c>)
  hi2c1.Init.ClockSpeed = 400000;
 8001744:	4a40      	ldr	r2, [pc, #256]	; (8001848 <main+0x440>)
  hi2c1.Init.OwnAddress1 = 0;
 8001746:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800174a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800174e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.ClockSpeed = 400000;
 8001752:	4b3e      	ldr	r3, [pc, #248]	; (800184c <main+0x444>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001754:	6106      	str	r6, [r0, #16]
  hi2c1.Init.ClockSpeed = 400000;
 8001756:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800175a:	f001 fdfb 	bl	8003354 <HAL_I2C_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	b108      	cbz	r0, 8001766 <main+0x35e>
 8001762:	b672      	cpsid	i
  while (1)
 8001764:	e7fe      	b.n	8001764 <main+0x35c>
  huart1.Init.BaudRate = 115200;
 8001766:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 800176a:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 800176c:	4838      	ldr	r0, [pc, #224]	; (8001850 <main+0x448>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 800176e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001772:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001776:	6103      	str	r3, [r0, #16]
  huart1.Instance = USART1;
 8001778:	4b36      	ldr	r3, [pc, #216]	; (8001854 <main+0x44c>)
  huart1.Init.BaudRate = 115200;
 800177a:	6041      	str	r1, [r0, #4]
  huart1.Instance = USART1;
 800177c:	6003      	str	r3, [r0, #0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800177e:	6142      	str	r2, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001780:	f003 fa0a 	bl	8004b98 <HAL_UART_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	b108      	cbz	r0, 800178c <main+0x384>
 8001788:	b672      	cpsid	i
  while (1)
 800178a:	e7fe      	b.n	800178a <main+0x382>
  htim2.Instance = TIM2;
 800178c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = ((PWM_PERIOD_CYCLES)*2);
 8001790:	f641 3258 	movw	r2, #7000	; 0x1b58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001794:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8001798:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800179c:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
 80017a0:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a4:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a8:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
 80017ac:	e9cd 001c 	strd	r0, r0, [sp, #112]	; 0x70
 80017b0:	e9cd 001e 	strd	r0, r0, [sp, #120]	; 0x78
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80017b4:	9016      	str	r0, [sp, #88]	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b6:	9020      	str	r0, [sp, #128]	; 0x80
  htim2.Instance = TIM2;
 80017b8:	4827      	ldr	r0, [pc, #156]	; (8001858 <main+0x450>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017be:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	6183      	str	r3, [r0, #24]
  htim2.Instance = TIM2;
 80017c2:	6001      	str	r1, [r0, #0]
  htim2.Init.Period = ((PWM_PERIOD_CYCLES)*2);
 80017c4:	60c2      	str	r2, [r0, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017c6:	f002 fcf5 	bl	80041b4 <HAL_TIM_Base_Init>
 80017ca:	b108      	cbz	r0, 80017d0 <main+0x3c8>
 80017cc:	b672      	cpsid	i
  while (1)
 80017ce:	e7fe      	b.n	80017ce <main+0x3c6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017d4:	4820      	ldr	r0, [pc, #128]	; (8001858 <main+0x450>)
 80017d6:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d8:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017da:	f002 ff41 	bl	8004660 <HAL_TIM_ConfigClockSource>
 80017de:	b108      	cbz	r0, 80017e4 <main+0x3dc>
 80017e0:	b672      	cpsid	i
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <main+0x3da>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017e4:	481c      	ldr	r0, [pc, #112]	; (8001858 <main+0x450>)
 80017e6:	f002 fd79 	bl	80042dc <HAL_TIM_PWM_Init>
 80017ea:	b108      	cbz	r0, 80017f0 <main+0x3e8>
 80017ec:	b672      	cpsid	i
  while (1)
 80017ee:	e7fe      	b.n	80017ee <main+0x3e6>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80017f0:	2400      	movs	r4, #0
 80017f2:	2500      	movs	r5, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80017f4:	4818      	ldr	r0, [pc, #96]	; (8001858 <main+0x450>)
 80017f6:	a912      	add	r1, sp, #72	; 0x48
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80017f8:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80017fc:	f002 ffe0 	bl	80047c0 <HAL_TIM_SlaveConfigSynchro>
 8001800:	b108      	cbz	r0, 8001806 <main+0x3fe>
 8001802:	b672      	cpsid	i
  while (1)
 8001804:	e7fe      	b.n	8001804 <main+0x3fc>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001806:	4814      	ldr	r0, [pc, #80]	; (8001858 <main+0x450>)
 8001808:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180a:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800180e:	f003 f967 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001812:	4602      	mov	r2, r0
 8001814:	b108      	cbz	r0, 800181a <main+0x412>
 8001816:	b672      	cpsid	i
  while (1)
 8001818:	e7fe      	b.n	8001818 <main+0x410>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800181a:	2460      	movs	r4, #96	; 0x60
 800181c:	2500      	movs	r5, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181e:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001820:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001822:	a91a      	add	r1, sp, #104	; 0x68
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <main+0x450>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001826:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800182a:	f002 fe19 	bl	8004460 <HAL_TIM_PWM_ConfigChannel>
 800182e:	4604      	mov	r4, r0
 8001830:	b1a0      	cbz	r0, 800185c <main+0x454>
 8001832:	b672      	cpsid	i
  while (1)
 8001834:	e7fe      	b.n	8001834 <main+0x42c>
 8001836:	bf00      	nop
 8001838:	20000230 	.word	0x20000230
 800183c:	20000168 	.word	0x20000168
 8001840:	40012800 	.word	0x40012800
 8001844:	200001dc 	.word	0x200001dc
 8001848:	40005400 	.word	0x40005400
 800184c:	00061a80 	.word	0x00061a80
 8001850:	200002c0 	.word	0x200002c0
 8001854:	40013800 	.word	0x40013800
 8001858:	20000278 	.word	0x20000278
  HAL_UART_Receive_IT(&huart1, tx_echo, 8);
 800185c:	2208      	movs	r2, #8
 800185e:	49b1      	ldr	r1, [pc, #708]	; (8001b24 <main+0x71c>)
 8001860:	48b1      	ldr	r0, [pc, #708]	; (8001b28 <main+0x720>)
 8001862:	f003 faa9 	bl	8004db8 <HAL_UART_Receive_IT>
  spwm.currentDuty = 20;
 8001866:	2214      	movs	r2, #20
  spwm.minPeriod = PWM_PERIOD_MIN;
 8001868:	2146      	movs	r1, #70	; 0x46
  spwm.maxPeriod = PWM_PERIOD_MAX;
 800186a:	f640 5066 	movw	r0, #3430	; 0xd66
 800186e:	4baf      	ldr	r3, [pc, #700]	; (8001b2c <main+0x724>)
 8001870:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8001b30 <main+0x728>
 8001874:	60d8      	str	r0, [r3, #12]
  spwm.minPeriod = PWM_PERIOD_MIN;
 8001876:	8119      	strh	r1, [r3, #8]
  spwm.currentDuty = 20;
 8001878:	611a      	str	r2, [r3, #16]
  spwm.percentMod = 0;
 800187a:	801c      	strh	r4, [r3, #0]
  spwm.pwm_deadTime = 0;
 800187c:	605c      	str	r4, [r3, #4]
  InitParameters();
 800187e:	f7ff fd6f 	bl	8001360 <InitParameters>
  InitPeripheral();
 8001882:	f7ff fda1 	bl	80013c8 <InitPeripheral>
  HAL_TIM_Base_Start_IT(&htim2);				 // Slave of TIM1 General Task
 8001886:	48ab      	ldr	r0, [pc, #684]	; (8001b34 <main+0x72c>)
 8001888:	f002 fcfe 	bl	8004288 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);				 // Inverter Task
 800188c:	48aa      	ldr	r0, [pc, #680]	; (8001b38 <main+0x730>)
 800188e:	f002 fcfb 	bl	8004288 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);     // 32 KHz
 8001892:	4621      	mov	r1, r4
 8001894:	48a7      	ldr	r0, [pc, #668]	; (8001b34 <main+0x72c>)
 8001896:	f002 fd8b 	bl	80043b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);     // PWM AH
 800189a:	4621      	mov	r1, r4
 800189c:	48a6      	ldr	r0, [pc, #664]	; (8001b38 <main+0x730>)
 800189e:	f002 fd87 	bl	80043b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);     // PWM BH
 80018a2:	2104      	movs	r1, #4
 80018a4:	48a4      	ldr	r0, [pc, #656]	; (8001b38 <main+0x730>)
 80018a6:	f002 fd83 	bl	80043b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	 // OCREF for Trigger ADC Conversion
 80018aa:	2108      	movs	r1, #8
 80018ac:	48a2      	ldr	r0, [pc, #648]	; (8001b38 <main+0x730>)
 80018ae:	f002 fd7f 	bl	80043b0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);  // PWM AL
 80018b2:	4621      	mov	r1, r4
 80018b4:	48a0      	ldr	r0, [pc, #640]	; (8001b38 <main+0x730>)
 80018b6:	f003 f8bf 	bl	8004a38 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);  // PWM BL
 80018ba:	2104      	movs	r1, #4
 80018bc:	489e      	ldr	r0, [pc, #632]	; (8001b38 <main+0x730>)
 80018be:	f003 f8bb 	bl	8004a38 <HAL_TIMEx_PWMN_Start>
  HAL_ADC_Start(&hadc2);						 // start ADC2 (slave) first!
 80018c2:	489e      	ldr	r0, [pc, #632]	; (8001b3c <main+0x734>)
 80018c4:	f000 fec4 	bl	8002650 <HAL_ADC_Start>
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*) adcPair, 3);
 80018c8:	2203      	movs	r2, #3
 80018ca:	499d      	ldr	r1, [pc, #628]	; (8001b40 <main+0x738>)
 80018cc:	489d      	ldr	r0, [pc, #628]	; (8001b44 <main+0x73c>)
 80018ce:	f000 ff25 	bl	800271c <HAL_ADCEx_MultiModeStart_DMA>
  LCD_INIT();
 80018d2:	f7fe fef9 	bl	80006c8 <LCD_INIT>
  LCD_CLEAR_DISPLAY();
 80018d6:	f7fe ff91 	bl	80007fc <LCD_CLEAR_DISPLAY>
  LCD_LOCATE(1, 1);
 80018da:	2101      	movs	r1, #1
 80018dc:	4608      	mov	r0, r1
 80018de:	f7fe ff9f 	bl	8000820 <LCD_LOCATE>
  LCD_printstring(" STM32F103C6T6  ");
 80018e2:	4899      	ldr	r0, [pc, #612]	; (8001b48 <main+0x740>)
 80018e4:	f7fe ff80 	bl	80007e8 <LCD_printstring>
  LCD_LOCATE(2, 1);
 80018e8:	2101      	movs	r1, #1
 80018ea:	2002      	movs	r0, #2
 80018ec:	f7fe ff98 	bl	8000820 <LCD_LOCATE>
  LCD_printstring("pureSineInverter");
 80018f0:	4896      	ldr	r0, [pc, #600]	; (8001b4c <main+0x744>)
 80018f2:	f7fe ff79 	bl	80007e8 <LCD_printstring>
	HAL_Delay(500);
 80018f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018fa:	f000 fcb9 	bl	8002270 <HAL_Delay>
  LCD_DISP_OFF();
 80018fe:	f7fe ff8b 	bl	8000818 <LCD_DISP_OFF>
	HAL_Delay(200);
 8001902:	20c8      	movs	r0, #200	; 0xc8
	fx = (fx/10);
 8001904:	4f92      	ldr	r7, [pc, #584]	; (8001b50 <main+0x748>)
	{ a2= (-48.136); a1= (9005.8); a0= (-421443);
 8001906:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8001b54 <main+0x74c>
 800190a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8001b58 <main+0x750>
 800190e:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8001b5c <main+0x754>
	shx= fy;
 8001912:	4e93      	ldr	r6, [pc, #588]	; (8001b60 <main+0x758>)
 8001914:	4d93      	ldr	r5, [pc, #588]	; (8001b64 <main+0x75c>)
	HAL_Delay(200);
 8001916:	f000 fcab 	bl	8002270 <HAL_Delay>
  LCD_DISP_ON();
 800191a:	f7fe ff79 	bl	8000810 <LCD_DISP_ON>
  LCD_CLEAR_DISPLAY();
 800191e:	f7fe ff6d 	bl	80007fc <LCD_CLEAR_DISPLAY>
	ntc.mosfet 		= convertTemp(adc1[2]);
 8001922:	4b91      	ldr	r3, [pc, #580]	; (8001b68 <main+0x760>)
 8001924:	889c      	ldrh	r4, [r3, #4]
 8001926:	b224      	sxth	r4, r4
	fx = adcNTC;
 8001928:	4620      	mov	r0, r4
 800192a:	f7fe fd7d 	bl	8000428 <__aeabi_i2f>
	fx = (fx/10);
 800192e:	4639      	mov	r1, r7
 8001930:	f7fe fc0c 	bl	800014c <__aeabi_fmul>
	if(adcNTC >= 976)                    // (-20) to (-10)c
 8001934:	f5b4 7f74 	cmp.w	r4, #976	; 0x3d0
	fx = (fx/10);
 8001938:	4603      	mov	r3, r0
	if(adcNTC >= 976)                    // (-20) to (-10)c
 800193a:	f280 8197 	bge.w	8001c6c <main+0x864>
	else if(adcNTC >= 943)               // (-10) to (0)c
 800193e:	f240 32ae 	movw	r2, #942	; 0x3ae
 8001942:	4294      	cmp	r4, r2
 8001944:	f300 818e 	bgt.w	8001c64 <main+0x85c>
	else if(adcNTC >= 893)               // (0) to (10)c
 8001948:	f5b4 7f5f 	cmp.w	r4, #892	; 0x37c
 800194c:	f300 8186 	bgt.w	8001c5c <main+0x854>
	else if(adcNTC >= 822)               // (10) to (20)c
 8001950:	f240 3235 	movw	r2, #821	; 0x335
 8001954:	4294      	cmp	r4, r2
 8001956:	f300 817d 	bgt.w	8001c54 <main+0x84c>
	else if(adcNTC >= 731)               // (20) to (30)c
 800195a:	f240 22da 	movw	r2, #730	; 0x2da
 800195e:	4294      	cmp	r4, r2
 8001960:	f300 8174 	bgt.w	8001c4c <main+0x844>
	else if(adcNTC >= 625)               // (30) to (40)c
 8001964:	f5b4 7f1c 	cmp.w	r4, #624	; 0x270
 8001968:	f300 816c 	bgt.w	8001c44 <main+0x83c>
	else if(adcNTC >= 513)               // (40) to (50)c
 800196c:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8001970:	f300 8164 	bgt.w	8001c3c <main+0x834>
	else if(adcNTC >= 407)              // (50) to (60)c
 8001974:	f5b4 7fcb 	cmp.w	r4, #406	; 0x196
 8001978:	f300 815c 	bgt.w	8001c34 <main+0x82c>
	else if(adcNTC >= 314)             // (60) to (70)c
 800197c:	f5b4 7f9d 	cmp.w	r4, #314	; 0x13a
 8001980:	f280 8154 	bge.w	8001c2c <main+0x824>
    else if(adcNTC >= 238)             // (70) to (80)c
 8001984:	2ced      	cmp	r4, #237	; 0xed
 8001986:	f300 814d 	bgt.w	8001c24 <main+0x81c>
    else if(adcNTC >= 178)             // (80) to (90)c
 800198a:	2cb1      	cmp	r4, #177	; 0xb1
 800198c:	f300 8146 	bgt.w	8001c1c <main+0x814>
    else if(adcNTC >= 133)            // (90) to (100)c
 8001990:	2c84      	cmp	r4, #132	; 0x84
 8001992:	f300 813f 	bgt.w	8001c14 <main+0x80c>
	else if(adcNTC >= 99)            // (100) to (110)c
 8001996:	2c62      	cmp	r4, #98	; 0x62
 8001998:	f300 8138 	bgt.w	8001c0c <main+0x804>
	{ a2= (36.593); a1= (-1047.3); a0= (17791);
 800199c:	4c73      	ldr	r4, [pc, #460]	; (8001b6c <main+0x764>)
 800199e:	4a74      	ldr	r2, [pc, #464]	; (8001b70 <main+0x768>)
 80019a0:	4974      	ldr	r1, [pc, #464]	; (8001b74 <main+0x76c>)
	fy= (a2 * fx);
 80019a2:	4618      	mov	r0, r3
 80019a4:	9304      	str	r3, [sp, #16]
 80019a6:	9205      	str	r2, [sp, #20]
 80019a8:	f7fe fbd0 	bl	800014c <__aeabi_fmul>
	fy= (fy + a1) * fx;
 80019ac:	9a05      	ldr	r2, [sp, #20]
 80019ae:	4611      	mov	r1, r2
 80019b0:	f7fe fc86 	bl	80002c0 <__addsf3>
 80019b4:	9b04      	ldr	r3, [sp, #16]
 80019b6:	4601      	mov	r1, r0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fbc7 	bl	800014c <__aeabi_fmul>
	fy= (fy + a0);
 80019be:	4621      	mov	r1, r4
 80019c0:	f7fe fc7e 	bl	80002c0 <__addsf3>
	shx= fy;
 80019c4:	4631      	mov	r1, r6
	fy= (fy + a0);
 80019c6:	4604      	mov	r4, r0
	shx= fy;
 80019c8:	f7fe fde4 	bl	8000594 <__aeabi_fcmpge>
 80019cc:	b900      	cbnz	r0, 80019d0 <main+0x5c8>
 80019ce:	4634      	mov	r4, r6
 80019d0:	4629      	mov	r1, r5
 80019d2:	4620      	mov	r0, r4
 80019d4:	f7fe fdd4 	bl	8000580 <__aeabi_fcmple>
 80019d8:	b900      	cbnz	r0, 80019dc <main+0x5d4>
 80019da:	462c      	mov	r4, r5
 80019dc:	4620      	mov	r0, r4
 80019de:	f7fe fded 	bl	80005bc <__aeabi_f2iz>
	ntc.transformer = convertTemp(adc2[2]);
 80019e2:	4b65      	ldr	r3, [pc, #404]	; (8001b78 <main+0x770>)
	shx= fy;
 80019e4:	f8ab 0000 	strh.w	r0, [fp]
	ntc.transformer = convertTemp(adc2[2]);
 80019e8:	889c      	ldrh	r4, [r3, #4]
 80019ea:	b224      	sxth	r4, r4
	fx = adcNTC;
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7fe fd1b 	bl	8000428 <__aeabi_i2f>
	fx = (fx/10);
 80019f2:	4639      	mov	r1, r7
 80019f4:	f7fe fbaa 	bl	800014c <__aeabi_fmul>
	if(adcNTC >= 976)                    // (-20) to (-10)c
 80019f8:	f5b4 7f74 	cmp.w	r4, #976	; 0x3d0
	fx = (fx/10);
 80019fc:	4603      	mov	r3, r0
	if(adcNTC >= 976)                    // (-20) to (-10)c
 80019fe:	f280 8101 	bge.w	8001c04 <main+0x7fc>
	else if(adcNTC >= 943)               // (-10) to (0)c
 8001a02:	f240 32ae 	movw	r2, #942	; 0x3ae
 8001a06:	4294      	cmp	r4, r2
 8001a08:	f300 80f8 	bgt.w	8001bfc <main+0x7f4>
	else if(adcNTC >= 893)               // (0) to (10)c
 8001a0c:	f5b4 7f5f 	cmp.w	r4, #892	; 0x37c
 8001a10:	f300 80f0 	bgt.w	8001bf4 <main+0x7ec>
	else if(adcNTC >= 822)               // (10) to (20)c
 8001a14:	f240 3235 	movw	r2, #821	; 0x335
 8001a18:	4294      	cmp	r4, r2
 8001a1a:	f300 80e7 	bgt.w	8001bec <main+0x7e4>
	else if(adcNTC >= 731)               // (20) to (30)c
 8001a1e:	f240 22da 	movw	r2, #730	; 0x2da
 8001a22:	4294      	cmp	r4, r2
 8001a24:	f300 80de 	bgt.w	8001be4 <main+0x7dc>
	else if(adcNTC >= 625)               // (30) to (40)c
 8001a28:	f5b4 7f1c 	cmp.w	r4, #624	; 0x270
 8001a2c:	f300 80d6 	bgt.w	8001bdc <main+0x7d4>
	else if(adcNTC >= 513)               // (40) to (50)c
 8001a30:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8001a34:	f300 80ce 	bgt.w	8001bd4 <main+0x7cc>
	else if(adcNTC >= 407)              // (50) to (60)c
 8001a38:	f5b4 7fcb 	cmp.w	r4, #406	; 0x196
 8001a3c:	f300 80c6 	bgt.w	8001bcc <main+0x7c4>
	else if(adcNTC >= 314)             // (60) to (70)c
 8001a40:	f5b4 7f9d 	cmp.w	r4, #314	; 0x13a
 8001a44:	f280 80be 	bge.w	8001bc4 <main+0x7bc>
    else if(adcNTC >= 238)             // (70) to (80)c
 8001a48:	2ced      	cmp	r4, #237	; 0xed
 8001a4a:	f300 80b7 	bgt.w	8001bbc <main+0x7b4>
    else if(adcNTC >= 178)             // (80) to (90)c
 8001a4e:	2cb1      	cmp	r4, #177	; 0xb1
 8001a50:	dc64      	bgt.n	8001b1c <main+0x714>
    else if(adcNTC >= 133)            // (90) to (100)c
 8001a52:	2c84      	cmp	r4, #132	; 0x84
 8001a54:	dc5e      	bgt.n	8001b14 <main+0x70c>
	else if(adcNTC >= 99)            // (100) to (110)c
 8001a56:	2c62      	cmp	r4, #98	; 0x62
 8001a58:	dc58      	bgt.n	8001b0c <main+0x704>
	{ a2= (36.593); a1= (-1047.3); a0= (17791);
 8001a5a:	4c44      	ldr	r4, [pc, #272]	; (8001b6c <main+0x764>)
 8001a5c:	4a44      	ldr	r2, [pc, #272]	; (8001b70 <main+0x768>)
 8001a5e:	4945      	ldr	r1, [pc, #276]	; (8001b74 <main+0x76c>)
	fy= (a2 * fx);
 8001a60:	4618      	mov	r0, r3
 8001a62:	9304      	str	r3, [sp, #16]
 8001a64:	9205      	str	r2, [sp, #20]
 8001a66:	f7fe fb71 	bl	800014c <__aeabi_fmul>
	fy= (fy + a1) * fx;
 8001a6a:	9a05      	ldr	r2, [sp, #20]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	f7fe fc27 	bl	80002c0 <__addsf3>
 8001a72:	9b04      	ldr	r3, [sp, #16]
 8001a74:	4601      	mov	r1, r0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fb68 	bl	800014c <__aeabi_fmul>
	fy= (fy + a0);
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	f7fe fc1f 	bl	80002c0 <__addsf3>
	shx= fy;
 8001a82:	4631      	mov	r1, r6
	fy= (fy + a0);
 8001a84:	4604      	mov	r4, r0
	shx= fy;
 8001a86:	f7fe fd85 	bl	8000594 <__aeabi_fcmpge>
 8001a8a:	b900      	cbnz	r0, 8001a8e <main+0x686>
 8001a8c:	4634      	mov	r4, r6
 8001a8e:	4629      	mov	r1, r5
 8001a90:	4620      	mov	r0, r4
 8001a92:	f7fe fd75 	bl	8000580 <__aeabi_fcmple>
 8001a96:	b900      	cbnz	r0, 8001a9a <main+0x692>
 8001a98:	462c      	mov	r4, r5
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f7fe fd8e 	bl	80005bc <__aeabi_f2iz>
	if(flag_Write == SET)
 8001aa0:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <main+0x774>)
	shx= fy;
 8001aa2:	f8ab 0002 	strh.w	r0, [fp, #2]
	if(flag_Write == SET)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d10d      	bne.n	8001ac8 <main+0x6c0>
		HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, 0, 2, write_buffer, sizeof(write_buffer), 50);
 8001aac:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <main+0x778>)
		flag_Write = RESET;
 8001aae:	2200      	movs	r2, #0
		HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, 0, 2, write_buffer, sizeof(write_buffer), 50);
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2332      	movs	r3, #50	; 0x32
 8001ab4:	9302      	str	r3, [sp, #8]
		flag_Write = RESET;
 8001ab6:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <main+0x774>)
		HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, 0, 2, write_buffer, sizeof(write_buffer), 50);
 8001ab8:	21a0      	movs	r1, #160	; 0xa0
		flag_Write = RESET;
 8001aba:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, 0, 2, write_buffer, sizeof(write_buffer), 50);
 8001abc:	2304      	movs	r3, #4
 8001abe:	4831      	ldr	r0, [pc, #196]	; (8001b84 <main+0x77c>)
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	f001 fd0c 	bl	80034e0 <HAL_I2C_Mem_Write>
	if(flag_Read == SET)
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <main+0x780>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d10d      	bne.n	8001aec <main+0x6e4>
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, 0, 2, read_buffer, sizeof(read_buffer), 50);
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <main+0x784>)
		flag_Read = RESET;
 8001ad2:	2200      	movs	r2, #0
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, 0, 2, read_buffer, sizeof(read_buffer), 50);
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2332      	movs	r3, #50	; 0x32
 8001ad8:	9302      	str	r3, [sp, #8]
		flag_Read = RESET;
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <main+0x780>)
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, 0, 2, read_buffer, sizeof(read_buffer), 50);
 8001adc:	21a0      	movs	r1, #160	; 0xa0
		flag_Read = RESET;
 8001ade:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, 0, 2, read_buffer, sizeof(read_buffer), 50);
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	4828      	ldr	r0, [pc, #160]	; (8001b84 <main+0x77c>)
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	f001 fe1e 	bl	8003728 <HAL_I2C_Mem_Read>
	if(flag_tx == SET)
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <main+0x788>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d108      	bne.n	8001b06 <main+0x6fe>
		flag_tx = RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <main+0x788>)
		HAL_UART_Transmit(&huart1, tx_text_buffer, sizeof(tx_text_buffer), 10);
 8001af8:	4926      	ldr	r1, [pc, #152]	; (8001b94 <main+0x78c>)
		flag_tx = RESET;
 8001afa:	7013      	strb	r3, [r2, #0]
		HAL_UART_Transmit(&huart1, tx_text_buffer, sizeof(tx_text_buffer), 10);
 8001afc:	480a      	ldr	r0, [pc, #40]	; (8001b28 <main+0x720>)
 8001afe:	230a      	movs	r3, #10
 8001b00:	220f      	movs	r2, #15
 8001b02:	f003 f8b7 	bl	8004c74 <HAL_UART_Transmit>
	execDISP();   // LCD
 8001b06:	f7ff fbbd 	bl	8001284 <execDISP>
}
 8001b0a:	e70a      	b.n	8001922 <main+0x51a>
	{ a2= (13.425); a1= (-605.15); a0= (15674);
 8001b0c:	4c22      	ldr	r4, [pc, #136]	; (8001b98 <main+0x790>)
 8001b0e:	4a23      	ldr	r2, [pc, #140]	; (8001b9c <main+0x794>)
 8001b10:	4923      	ldr	r1, [pc, #140]	; (8001ba0 <main+0x798>)
 8001b12:	e7a5      	b.n	8001a60 <main+0x658>
	{ a2= (8.2796); a1= (-478.93); a0= (14905);
 8001b14:	4c23      	ldr	r4, [pc, #140]	; (8001ba4 <main+0x79c>)
 8001b16:	4a24      	ldr	r2, [pc, #144]	; (8001ba8 <main+0x7a0>)
 8001b18:	4924      	ldr	r1, [pc, #144]	; (8001bac <main+0x7a4>)
 8001b1a:	e7a1      	b.n	8001a60 <main+0x658>
	{ a2= (3.8651); a1= (-327.64); a0= (13606);
 8001b1c:	4c24      	ldr	r4, [pc, #144]	; (8001bb0 <main+0x7a8>)
 8001b1e:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <main+0x7ac>)
 8001b20:	4925      	ldr	r1, [pc, #148]	; (8001bb8 <main+0x7b0>)
 8001b22:	e79d      	b.n	8001a60 <main+0x658>
 8001b24:	20000364 	.word	0x20000364
 8001b28:	200002c0 	.word	0x200002c0
 8001b2c:	20000350 	.word	0x20000350
 8001b30:	20000320 	.word	0x20000320
 8001b34:	20000278 	.word	0x20000278
 8001b38:	20000230 	.word	0x20000230
 8001b3c:	20000168 	.word	0x20000168
 8001b40:	200000d0 	.word	0x200000d0
 8001b44:	20000138 	.word	0x20000138
 8001b48:	08005bf0 	.word	0x08005bf0
 8001b4c:	08005c04 	.word	0x08005c04
 8001b50:	3dcccccd 	.word	0x3dcccccd
 8001b54:	c8cdc860 	.word	0xc8cdc860
 8001b58:	460cb733 	.word	0x460cb733
 8001b5c:	c2408b44 	.word	0xc2408b44
 8001b60:	c6435000 	.word	0xc6435000
 8001b64:	46435000 	.word	0x46435000
 8001b68:	200000c0 	.word	0x200000c0
 8001b6c:	468afe00 	.word	0x468afe00
 8001b70:	c482e99a 	.word	0xc482e99a
 8001b74:	42125f3b 	.word	0x42125f3b
 8001b78:	200000c8 	.word	0x200000c8
 8001b7c:	20000126 	.word	0x20000126
 8001b80:	20000014 	.word	0x20000014
 8001b84:	200001dc 	.word	0x200001dc
 8001b88:	20000125 	.word	0x20000125
 8001b8c:	20000348 	.word	0x20000348
 8001b90:	20000127 	.word	0x20000127
 8001b94:	20000004 	.word	0x20000004
 8001b98:	4674e800 	.word	0x4674e800
 8001b9c:	c417499a 	.word	0xc417499a
 8001ba0:	4156cccd 	.word	0x4156cccd
 8001ba4:	4668e400 	.word	0x4668e400
 8001ba8:	c3ef770a 	.word	0xc3ef770a
 8001bac:	4104793e 	.word	0x4104793e
 8001bb0:	46549800 	.word	0x46549800
 8001bb4:	c3a3d1ec 	.word	0xc3a3d1ec
 8001bb8:	40775dcc 	.word	0x40775dcc
	{ a2= (2.0916); a1= (-246.39); a0= (12676);
 8001bbc:	4c2d      	ldr	r4, [pc, #180]	; (8001c74 <main+0x86c>)
 8001bbe:	4a2e      	ldr	r2, [pc, #184]	; (8001c78 <main+0x870>)
 8001bc0:	492e      	ldr	r1, [pc, #184]	; (8001c7c <main+0x874>)
 8001bc2:	e74d      	b.n	8001a60 <main+0x658>
	{ a2= (1.0415); a1= (-182.59); a0= (11707);
 8001bc4:	4c2e      	ldr	r4, [pc, #184]	; (8001c80 <main+0x878>)
 8001bc6:	4a2f      	ldr	r2, [pc, #188]	; (8001c84 <main+0x87c>)
 8001bc8:	492f      	ldr	r1, [pc, #188]	; (8001c88 <main+0x880>)
 8001bca:	e749      	b.n	8001a60 <main+0x658>
	{ a2= (0.3495); a1= (-126.29); a0= (10559);
 8001bcc:	4c2f      	ldr	r4, [pc, #188]	; (8001c8c <main+0x884>)
 8001bce:	4a30      	ldr	r2, [pc, #192]	; (8001c90 <main+0x888>)
 8001bd0:	4930      	ldr	r1, [pc, #192]	; (8001c94 <main+0x88c>)
 8001bd2:	e745      	b.n	8001a60 <main+0x658>
	{ a2= (-0.0402); a1= (-85.068); a0= (9469.5);
 8001bd4:	4c30      	ldr	r4, [pc, #192]	; (8001c98 <main+0x890>)
 8001bd6:	4a31      	ldr	r2, [pc, #196]	; (8001c9c <main+0x894>)
 8001bd8:	4931      	ldr	r1, [pc, #196]	; (8001ca0 <main+0x898>)
 8001bda:	e741      	b.n	8001a60 <main+0x658>
	{ a2= (-0.2825); a1= (-55.922); a0= (8598.7);
 8001bdc:	4c31      	ldr	r4, [pc, #196]	; (8001ca4 <main+0x89c>)
 8001bde:	4a32      	ldr	r2, [pc, #200]	; (8001ca8 <main+0x8a0>)
 8001be0:	4932      	ldr	r1, [pc, #200]	; (8001cac <main+0x8a4>)
 8001be2:	e73d      	b.n	8001a60 <main+0x658>
	{ a2= (-1.0587); a1= (54.887); a0= (4643.8);
 8001be4:	4c32      	ldr	r4, [pc, #200]	; (8001cb0 <main+0x8a8>)
 8001be6:	4a33      	ldr	r2, [pc, #204]	; (8001cb4 <main+0x8ac>)
 8001be8:	4933      	ldr	r1, [pc, #204]	; (8001cb8 <main+0x8b0>)
 8001bea:	e739      	b.n	8001a60 <main+0x658>
	{ a2= (-2.9832); a1= (370.43); a0= (-8293.3);
 8001bec:	4c33      	ldr	r4, [pc, #204]	; (8001cbc <main+0x8b4>)
 8001bee:	4a34      	ldr	r2, [pc, #208]	; (8001cc0 <main+0x8b8>)
 8001bf0:	4934      	ldr	r1, [pc, #208]	; (8001cc4 <main+0x8bc>)
 8001bf2:	e735      	b.n	8001a60 <main+0x658>
	{ a2= (-6.9405); a1= (1076.5); a0= (-39788);
 8001bf4:	4c34      	ldr	r4, [pc, #208]	; (8001cc8 <main+0x8c0>)
 8001bf6:	4a35      	ldr	r2, [pc, #212]	; (8001ccc <main+0x8c4>)
 8001bf8:	4935      	ldr	r1, [pc, #212]	; (8001cd0 <main+0x8c8>)
 8001bfa:	e731      	b.n	8001a60 <main+0x658>
	{ a2= (-16.833); a1= (2924.4); a0= (-126083);
 8001bfc:	4c35      	ldr	r4, [pc, #212]	; (8001cd4 <main+0x8cc>)
 8001bfe:	4a36      	ldr	r2, [pc, #216]	; (8001cd8 <main+0x8d0>)
 8001c00:	4936      	ldr	r1, [pc, #216]	; (8001cdc <main+0x8d4>)
 8001c02:	e72d      	b.n	8001a60 <main+0x658>
	{ a2= (-48.136); a1= (9005.8); a0= (-421443);
 8001c04:	4654      	mov	r4, sl
 8001c06:	464a      	mov	r2, r9
 8001c08:	4641      	mov	r1, r8
 8001c0a:	e729      	b.n	8001a60 <main+0x658>
	{ a2= (13.425); a1= (-605.15); a0= (15674);
 8001c0c:	4c34      	ldr	r4, [pc, #208]	; (8001ce0 <main+0x8d8>)
 8001c0e:	4a35      	ldr	r2, [pc, #212]	; (8001ce4 <main+0x8dc>)
 8001c10:	4935      	ldr	r1, [pc, #212]	; (8001ce8 <main+0x8e0>)
 8001c12:	e6c6      	b.n	80019a2 <main+0x59a>
	{ a2= (8.2796); a1= (-478.93); a0= (14905);
 8001c14:	4c35      	ldr	r4, [pc, #212]	; (8001cec <main+0x8e4>)
 8001c16:	4a36      	ldr	r2, [pc, #216]	; (8001cf0 <main+0x8e8>)
 8001c18:	4936      	ldr	r1, [pc, #216]	; (8001cf4 <main+0x8ec>)
 8001c1a:	e6c2      	b.n	80019a2 <main+0x59a>
	{ a2= (3.8651); a1= (-327.64); a0= (13606);
 8001c1c:	4c36      	ldr	r4, [pc, #216]	; (8001cf8 <main+0x8f0>)
 8001c1e:	4a37      	ldr	r2, [pc, #220]	; (8001cfc <main+0x8f4>)
 8001c20:	4937      	ldr	r1, [pc, #220]	; (8001d00 <main+0x8f8>)
 8001c22:	e6be      	b.n	80019a2 <main+0x59a>
	{ a2= (2.0916); a1= (-246.39); a0= (12676);
 8001c24:	4c13      	ldr	r4, [pc, #76]	; (8001c74 <main+0x86c>)
 8001c26:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <main+0x870>)
 8001c28:	4914      	ldr	r1, [pc, #80]	; (8001c7c <main+0x874>)
 8001c2a:	e6ba      	b.n	80019a2 <main+0x59a>
	{ a2= (1.0415); a1= (-182.59); a0= (11707);
 8001c2c:	4c14      	ldr	r4, [pc, #80]	; (8001c80 <main+0x878>)
 8001c2e:	4a15      	ldr	r2, [pc, #84]	; (8001c84 <main+0x87c>)
 8001c30:	4915      	ldr	r1, [pc, #84]	; (8001c88 <main+0x880>)
 8001c32:	e6b6      	b.n	80019a2 <main+0x59a>
	{ a2= (0.3495); a1= (-126.29); a0= (10559);
 8001c34:	4c15      	ldr	r4, [pc, #84]	; (8001c8c <main+0x884>)
 8001c36:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <main+0x888>)
 8001c38:	4916      	ldr	r1, [pc, #88]	; (8001c94 <main+0x88c>)
 8001c3a:	e6b2      	b.n	80019a2 <main+0x59a>
	{ a2= (-0.0402); a1= (-85.068); a0= (9469.5);
 8001c3c:	4c16      	ldr	r4, [pc, #88]	; (8001c98 <main+0x890>)
 8001c3e:	4a17      	ldr	r2, [pc, #92]	; (8001c9c <main+0x894>)
 8001c40:	4917      	ldr	r1, [pc, #92]	; (8001ca0 <main+0x898>)
 8001c42:	e6ae      	b.n	80019a2 <main+0x59a>
	{ a2= (-0.2825); a1= (-55.922); a0= (8598.7);
 8001c44:	4c17      	ldr	r4, [pc, #92]	; (8001ca4 <main+0x89c>)
 8001c46:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <main+0x8a0>)
 8001c48:	4918      	ldr	r1, [pc, #96]	; (8001cac <main+0x8a4>)
 8001c4a:	e6aa      	b.n	80019a2 <main+0x59a>
	{ a2= (-1.0587); a1= (54.887); a0= (4643.8);
 8001c4c:	4c18      	ldr	r4, [pc, #96]	; (8001cb0 <main+0x8a8>)
 8001c4e:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <main+0x8ac>)
 8001c50:	4919      	ldr	r1, [pc, #100]	; (8001cb8 <main+0x8b0>)
 8001c52:	e6a6      	b.n	80019a2 <main+0x59a>
	{ a2= (-2.9832); a1= (370.43); a0= (-8293.3);
 8001c54:	4c19      	ldr	r4, [pc, #100]	; (8001cbc <main+0x8b4>)
 8001c56:	4a1a      	ldr	r2, [pc, #104]	; (8001cc0 <main+0x8b8>)
 8001c58:	491a      	ldr	r1, [pc, #104]	; (8001cc4 <main+0x8bc>)
 8001c5a:	e6a2      	b.n	80019a2 <main+0x59a>
	{ a2= (-6.9405); a1= (1076.5); a0= (-39788);
 8001c5c:	4c1a      	ldr	r4, [pc, #104]	; (8001cc8 <main+0x8c0>)
 8001c5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ccc <main+0x8c4>)
 8001c60:	491b      	ldr	r1, [pc, #108]	; (8001cd0 <main+0x8c8>)
 8001c62:	e69e      	b.n	80019a2 <main+0x59a>
	{ a2= (-16.833); a1= (2924.4); a0= (-126083);
 8001c64:	4c1b      	ldr	r4, [pc, #108]	; (8001cd4 <main+0x8cc>)
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <main+0x8d0>)
 8001c68:	491c      	ldr	r1, [pc, #112]	; (8001cdc <main+0x8d4>)
 8001c6a:	e69a      	b.n	80019a2 <main+0x59a>
	{ a2= (-48.136); a1= (9005.8); a0= (-421443);
 8001c6c:	4654      	mov	r4, sl
 8001c6e:	464a      	mov	r2, r9
 8001c70:	4641      	mov	r1, r8
 8001c72:	e696      	b.n	80019a2 <main+0x59a>
 8001c74:	46461000 	.word	0x46461000
 8001c78:	c37663d7 	.word	0xc37663d7
 8001c7c:	4005dcc6 	.word	0x4005dcc6
 8001c80:	4636ec00 	.word	0x4636ec00
 8001c84:	c336970a 	.word	0xc336970a
 8001c88:	3f854fdf 	.word	0x3f854fdf
 8001c8c:	4624fc00 	.word	0x4624fc00
 8001c90:	c2fc947b 	.word	0xc2fc947b
 8001c94:	3eb2f1aa 	.word	0x3eb2f1aa
 8001c98:	4613f600 	.word	0x4613f600
 8001c9c:	c2aa22d1 	.word	0xc2aa22d1
 8001ca0:	bd24a8c1 	.word	0xbd24a8c1
 8001ca4:	46065acd 	.word	0x46065acd
 8001ca8:	c25fb021 	.word	0xc25fb021
 8001cac:	be90a3d7 	.word	0xbe90a3d7
 8001cb0:	45911e66 	.word	0x45911e66
 8001cb4:	425b8c4a 	.word	0x425b8c4a
 8001cb8:	bf87837b 	.word	0xbf87837b
 8001cbc:	c6019533 	.word	0xc6019533
 8001cc0:	43b9370a 	.word	0x43b9370a
 8001cc4:	c03eecc0 	.word	0xc03eecc0
 8001cc8:	c71b6c00 	.word	0xc71b6c00
 8001ccc:	44869000 	.word	0x44869000
 8001cd0:	c0de1893 	.word	0xc0de1893
 8001cd4:	c7f64180 	.word	0xc7f64180
 8001cd8:	4536c666 	.word	0x4536c666
 8001cdc:	c186a9fc 	.word	0xc186a9fc
 8001ce0:	4674e800 	.word	0x4674e800
 8001ce4:	c417499a 	.word	0xc417499a
 8001ce8:	4156cccd 	.word	0x4156cccd
 8001cec:	4668e400 	.word	0x4668e400
 8001cf0:	c3ef770a 	.word	0xc3ef770a
 8001cf4:	4104793e 	.word	0x4104793e
 8001cf8:	46549800 	.word	0x46549800
 8001cfc:	c3a3d1ec 	.word	0xc3a3d1ec
 8001d00:	40775dcc 	.word	0x40775dcc

08001d04 <HAL_ADC_ConvCpltCallback>:
{
 8001d04:	b430      	push	{r4, r5}
	GPIOC->BSRR = GPIO_PIN_13;  // SET  // LED FLT
 8001d06:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	convCompleted = 1;
 8001d0a:	f04f 0c01 	mov.w	ip, #1
	GPIOC->BSRR = GPIO_PIN_13;  // SET  // LED FLT
 8001d0e:	480e      	ldr	r0, [pc, #56]	; (8001d48 <HAL_ADC_ConvCpltCallback+0x44>)
	adc1[0] = (adcPair[0] & 0xFFFF);
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_ADC_ConvCpltCallback+0x48>)
	GPIOC->BSRR = GPIO_PIN_13;  // SET  // LED FLT
 8001d12:	6105      	str	r5, [r0, #16]
	adc1[0] = (adcPair[0] & 0xFFFF);
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	490e      	ldr	r1, [pc, #56]	; (8001d50 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001d18:	b280      	uxth	r0, r0
 8001d1a:	8008      	strh	r0, [r1, #0]
	adc2[0] = ((adcPair[0] >> 16) & 0xFFFF);
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <HAL_ADC_ConvCpltCallback+0x50>)
 8001d20:	0c00      	lsrs	r0, r0, #16
 8001d22:	8010      	strh	r0, [r2, #0]
	adc1[1] = (adcPair[1] & 0xFFFF);
 8001d24:	6858      	ldr	r0, [r3, #4]
	convCompleted = 1;
 8001d26:	4c0c      	ldr	r4, [pc, #48]	; (8001d58 <HAL_ADC_ConvCpltCallback+0x54>)
	adc1[1] = (adcPair[1] & 0xFFFF);
 8001d28:	b280      	uxth	r0, r0
 8001d2a:	8048      	strh	r0, [r1, #2]
	adc2[1] = ((adcPair[1] >> 16) & 0xFFFF);
 8001d2c:	6858      	ldr	r0, [r3, #4]
 8001d2e:	0c00      	lsrs	r0, r0, #16
 8001d30:	8050      	strh	r0, [r2, #2]
	adc1[2] = (adcPair[2] & 0xFFFF);
 8001d32:	6898      	ldr	r0, [r3, #8]
 8001d34:	b280      	uxth	r0, r0
 8001d36:	8088      	strh	r0, [r1, #4]
	adc2[2] = ((adcPair[2] >> 16) & 0xFFFF);
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	0c1b      	lsrs	r3, r3, #16
 8001d3c:	8093      	strh	r3, [r2, #4]
	convCompleted = 1;
 8001d3e:	f884 c000 	strb.w	ip, [r4]
}
 8001d42:	bc30      	pop	{r4, r5}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40011000 	.word	0x40011000
 8001d4c:	200000d0 	.word	0x200000d0
 8001d50:	200000c0 	.word	0x200000c0
 8001d54:	200000c8 	.word	0x200000c8
 8001d58:	200000f4 	.word	0x200000f4

08001d5c <HAL_UART_RxCpltCallback>:
  HAL_UART_Receive_IT(&huart1, tx_echo, sizeof(tx_echo));
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	4902      	ldr	r1, [pc, #8]	; (8001d68 <HAL_UART_RxCpltCallback+0xc>)
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <HAL_UART_RxCpltCallback+0x10>)
 8001d62:	f003 b829 	b.w	8004db8 <HAL_UART_Receive_IT>
 8001d66:	bf00      	nop
 8001d68:	20000364 	.word	0x20000364
 8001d6c:	200002c0 	.word	0x200002c0

08001d70 <Error_Handler>:
 8001d70:	b672      	cpsid	i
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <Error_Handler+0x2>

08001d74 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_MspInit+0x3c>)
{
 8001d76:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d78:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d7a:	490e      	ldr	r1, [pc, #56]	; (8001db4 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	619a      	str	r2, [r3, #24]
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	f002 0201 	and.w	r2, r2, #1
 8001d88:	9200      	str	r2, [sp, #0]
 8001d8a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8c:	69da      	ldr	r2, [r3, #28]
 8001d8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d92:	61da      	str	r2, [r3, #28]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d9e:	684b      	ldr	r3, [r1, #4]
 8001da0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001da8:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001daa:	b002      	add	sp, #8
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010000 	.word	0x40010000

08001db8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001db8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dba:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001dbc:	4a31      	ldr	r2, [pc, #196]	; (8001e84 <HAL_ADC_MspInit+0xcc>)
 8001dbe:	6803      	ldr	r3, [r0, #0]
{
 8001dc0:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8001dc2:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001dc8:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8001dcc:	d004      	beq.n	8001dd8 <HAL_ADC_MspInit+0x20>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001dce:	4a2e      	ldr	r2, [pc, #184]	; (8001e88 <HAL_ADC_MspInit+0xd0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d037      	beq.n	8001e44 <HAL_ADC_MspInit+0x8c>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001dd4:	b008      	add	sp, #32
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dd8:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <HAL_ADC_MspInit+0xd4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	4605      	mov	r5, r0
 8001de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de4:	619a      	str	r2, [r3, #24]
 8001de6:	699a      	ldr	r2, [r3, #24]
    hdma_adc1.Instance = DMA1_Channel1;
 8001de8:	4e29      	ldr	r6, [pc, #164]	; (8001e90 <HAL_ADC_MspInit+0xd8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dea:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001dee:	9200      	str	r2, [sp, #0]
 8001df0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	699a      	ldr	r2, [r3, #24]
 8001df4:	f042 0204 	orr.w	r2, r2, #4
 8001df8:	619a      	str	r2, [r3, #24]
 8001dfa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4;
 8001dfc:	2215      	movs	r2, #21
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4;
 8001e04:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	4822      	ldr	r0, [pc, #136]	; (8001e94 <HAL_ADC_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4;
 8001e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f000 ff3f 	bl	8002c90 <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e12:	f44f 7300 	mov.w	r3, #512	; 0x200
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e16:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8001e18:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <HAL_ADC_MspInit+0xe0>)
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e1a:	2020      	movs	r0, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e1c:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e20:	e9c6 1303 	strd	r1, r3, [r6, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e2c:	61b0      	str	r0, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e2e:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e30:	60b4      	str	r4, [r6, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e32:	6172      	str	r2, [r6, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001e34:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e36:	f000 fda5 	bl	8002984 <HAL_DMA_Init>
 8001e3a:	bb00      	cbnz	r0, 8001e7e <HAL_ADC_MspInit+0xc6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e3c:	622e      	str	r6, [r5, #32]
 8001e3e:	6275      	str	r5, [r6, #36]	; 0x24
}
 8001e40:	b008      	add	sp, #32
 8001e42:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
 8001e44:	242a      	movs	r4, #42	; 0x2a
 8001e46:	2503      	movs	r5, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_ADC_MspInit+0xd4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	4812      	ldr	r0, [pc, #72]	; (8001e94 <HAL_ADC_MspInit+0xdc>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e4c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e54:	619a      	str	r2, [r3, #24]
 8001e56:	699a      	ldr	r2, [r3, #24]
 8001e58:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001e5c:	9202      	str	r2, [sp, #8]
 8001e5e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	f042 0204 	orr.w	r2, r2, #4
 8001e66:	619a      	str	r2, [r3, #24]
 8001e68:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
 8001e6a:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	9303      	str	r3, [sp, #12]
 8001e74:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f000 ff0b 	bl	8002c90 <HAL_GPIO_Init>
}
 8001e7a:	b008      	add	sp, #32
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001e7e:	f7ff ff77 	bl	8001d70 <Error_Handler>
 8001e82:	e7db      	b.n	8001e3c <HAL_ADC_MspInit+0x84>
 8001e84:	40012400 	.word	0x40012400
 8001e88:	40012800 	.word	0x40012800
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	20000198 	.word	0x20000198
 8001e94:	40010800 	.word	0x40010800
 8001e98:	40020008 	.word	0x40020008

08001e9c <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	2300      	movs	r3, #0
{
 8001e9e:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8001ea0:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <HAL_I2C_MspInit+0x68>)
 8001ea2:	6801      	ldr	r1, [r0, #0]
{
 8001ea4:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C1)
 8001ea6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001eac:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8001eb0:	d001      	beq.n	8001eb6 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eb2:	b006      	add	sp, #24
 8001eb4:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb6:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eb8:	f44f 7640 	mov.w	r6, #768	; 0x300
 8001ebc:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	4c12      	ldr	r4, [pc, #72]	; (8001f08 <HAL_I2C_MspInit+0x6c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	4812      	ldr	r0, [pc, #72]	; (8001f0c <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	f043 0308 	orr.w	r3, r3, #8
 8001eca:	61a3      	str	r3, [r4, #24]
 8001ecc:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ece:	9205      	str	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ed8:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	f000 fed8 	bl	8002c90 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ee0:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <HAL_I2C_MspInit+0x74>)
 8001ee2:	6853      	ldr	r3, [r2, #4]
 8001ee4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eee:	69e3      	ldr	r3, [r4, #28]
 8001ef0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ef4:	61e3      	str	r3, [r4, #28]
 8001ef6:	69e3      	ldr	r3, [r4, #28]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	9b01      	ldr	r3, [sp, #4]
}
 8001f00:	b006      	add	sp, #24
 8001f02:	bdd0      	pop	{r4, r6, r7, pc}
 8001f04:	40005400 	.word	0x40005400
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010c00 	.word	0x40010c00
 8001f10:	40010000 	.word	0x40010000

08001f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f14:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f16:	2400      	movs	r4, #0
  if(htim_base->Instance==TIM1)
 8001f18:	4a23      	ldr	r2, [pc, #140]	; (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f1a:	6803      	ldr	r3, [r0, #0]
{
 8001f1c:	b089      	sub	sp, #36	; 0x24
  if(htim_base->Instance==TIM1)
 8001f1e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001f24:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(htim_base->Instance==TIM1)
 8001f28:	d004      	beq.n	8001f34 <HAL_TIM_Base_MspInit+0x20>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2e:	d025      	beq.n	8001f7c <HAL_TIM_Base_MspInit+0x68>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f30:	b009      	add	sp, #36	; 0x24
 8001f32:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f34:	f44f 5580 	mov.w	r5, #4096	; 0x1000
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f38:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <HAL_TIM_Base_MspInit+0x98>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f3c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3e:	481c      	ldr	r0, [pc, #112]	; (8001fb0 <HAL_TIM_Base_MspInit+0x9c>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f44:	619a      	str	r2, [r3, #24]
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f4c:	9201      	str	r2, [sp, #4]
 8001f4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	f042 0208 	orr.w	r2, r2, #8
 8001f56:	619a      	str	r2, [r3, #24]
 8001f58:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f5a:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	9302      	str	r3, [sp, #8]
 8001f62:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f000 fe94 	bl	8002c90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001f68:	4622      	mov	r2, r4
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	2019      	movs	r0, #25
 8001f6e:	f000 fca5 	bl	80028bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f72:	2019      	movs	r0, #25
 8001f74:	f000 fce0 	bl	8002938 <HAL_NVIC_EnableIRQ>
}
 8001f78:	b009      	add	sp, #36	; 0x24
 8001f7a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f7c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001f80:	69d9      	ldr	r1, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f82:	4622      	mov	r2, r4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f84:	f041 0101 	orr.w	r1, r1, #1
 8001f88:	61d9      	str	r1, [r3, #28]
 8001f8a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f8c:	4621      	mov	r1, r4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f94:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f96:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f98:	f000 fc90 	bl	80028bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f9c:	201c      	movs	r0, #28
 8001f9e:	f000 fccb 	bl	8002938 <HAL_NVIC_EnableIRQ>
}
 8001fa2:	b009      	add	sp, #36	; 0x24
 8001fa4:	bd30      	pop	{r4, r5, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40010c00 	.word	0x40010c00

08001fb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	2300      	movs	r3, #0
{
 8001fb6:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM1)
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <HAL_TIM_MspPostInit+0x74>)
 8001fba:	6801      	ldr	r1, [r0, #0]
{
 8001fbc:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 8001fbe:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001fc4:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM1)
 8001fc8:	d001      	beq.n	8001fce <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fca:	b006      	add	sp, #24
 8001fcc:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001fd0:	f44f 44c0 	mov.w	r4, #24576	; 0x6000
 8001fd4:	2502      	movs	r5, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fda:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001fde:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	f042 0208 	orr.w	r2, r2, #8
 8001fe6:	619a      	str	r2, [r3, #24]
 8001fe8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	4810      	ldr	r0, [pc, #64]	; (800202c <HAL_TIM_MspPostInit+0x78>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fec:	f002 0208 	and.w	r2, r2, #8
 8001ff0:	9200      	str	r2, [sp, #0]
 8001ff2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	f042 0204 	orr.w	r2, r2, #4
 8001ffa:	619a      	str	r2, [r3, #24]
 8001ffc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001ffe:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200c:	f000 fe40 	bl	8002c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002010:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002014:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	4806      	ldr	r0, [pc, #24]	; (8002030 <HAL_TIM_MspPostInit+0x7c>)
 8002018:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800201a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002020:	f000 fe36 	bl	8002c90 <HAL_GPIO_Init>
}
 8002024:	b006      	add	sp, #24
 8002026:	bd70      	pop	{r4, r5, r6, pc}
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40010c00 	.word	0x40010c00
 8002030:	40010800 	.word	0x40010800

08002034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002034:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002036:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_UART_MspInit+0x8c>)
 800203a:	6802      	ldr	r2, [r0, #0]
{
 800203c:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 800203e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002044:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8002048:	d001      	beq.n	800204e <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800204a:	b007      	add	sp, #28
 800204c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800204e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002052:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002054:	2640      	movs	r6, #64	; 0x40
    __HAL_RCC_USART1_CLK_ENABLE();
 8002056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800205a:	619a      	str	r2, [r3, #24]
 800205c:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800205e:	2702      	movs	r7, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8002060:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002064:	9200      	str	r2, [sp, #0]
 8002066:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206c:	f042 0208 	orr.w	r2, r2, #8
 8002070:	619a      	str	r2, [r3, #24]
 8002072:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002074:	4813      	ldr	r0, [pc, #76]	; (80020c4 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002080:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002082:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f000 fe03 	bl	8002c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	2300      	movs	r3, #0
    __HAL_AFIO_REMAP_USART1_ENABLE();
 800208e:	4d0e      	ldr	r5, [pc, #56]	; (80020c8 <HAL_UART_MspInit+0x94>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	a902      	add	r1, sp, #8
 8002092:	480c      	ldr	r0, [pc, #48]	; (80020c4 <HAL_UART_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002094:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f000 fdf9 	bl	8002c90 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 800209e:	686b      	ldr	r3, [r5, #4]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020a0:	4622      	mov	r2, r4
    __HAL_AFIO_REMAP_USART1_ENABLE();
 80020a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020a6:	f043 0304 	orr.w	r3, r3, #4
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020aa:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_USART1_ENABLE();
 80020ac:	606b      	str	r3, [r5, #4]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020ae:	2025      	movs	r0, #37	; 0x25
 80020b0:	f000 fc04 	bl	80028bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020b4:	2025      	movs	r0, #37	; 0x25
 80020b6:	f000 fc3f 	bl	8002938 <HAL_NVIC_EnableIRQ>
}
 80020ba:	b007      	add	sp, #28
 80020bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020be:	bf00      	nop
 80020c0:	40013800 	.word	0x40013800
 80020c4:	40010c00 	.word	0x40010c00
 80020c8:	40010000 	.word	0x40010000

080020cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <NMI_Handler>
 80020ce:	bf00      	nop

080020d0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <HardFault_Handler>
 80020d2:	bf00      	nop

080020d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <MemManage_Handler>
 80020d6:	bf00      	nop

080020d8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <BusFault_Handler>
 80020da:	bf00      	nop

080020dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <UsageFault_Handler>
 80020de:	bf00      	nop

080020e0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop

080020e4 <DebugMon_Handler>:
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop

080020e8 <PendSV_Handler>:
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop

080020ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ee:	f000 f8ad 	bl	800224c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  delayTime--;
 80020f2:	4a04      	ldr	r2, [pc, #16]	; (8002104 <SysTick_Handler+0x18>)
 80020f4:	6813      	ldr	r3, [r2, #0]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	6013      	str	r3, [r2, #0]
  sysTick();
  /* USER CODE END SysTick_IRQn 1 */
}
 80020fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysTick();
 80020fe:	f7ff b83f 	b.w	8001180 <sysTick>
 8002102:	bf00      	nop
 8002104:	20000108 	.word	0x20000108

08002108 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002108:	4801      	ldr	r0, [pc, #4]	; (8002110 <DMA1_Channel1_IRQHandler+0x8>)
 800210a:	f000 bd2b 	b.w	8002b64 <HAL_DMA_IRQHandler>
 800210e:	bf00      	nop
 8002110:	20000198 	.word	0x20000198

08002114 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002114:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002116:	4803      	ldr	r0, [pc, #12]	; (8002124 <TIM1_UP_IRQHandler+0x10>)
 8002118:	f002 fbe4 	bl	80048e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  TIM1_ISR();

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800211c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TIM1_ISR();
 8002120:	f7fe be2a 	b.w	8000d78 <TIM1_ISR>
 8002124:	20000230 	.word	0x20000230

08002128 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002128:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800212a:	4803      	ldr	r0, [pc, #12]	; (8002138 <TIM2_IRQHandler+0x10>)
 800212c:	f002 fbda 	bl	80048e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  TIM2_ISR();
  /* USER CODE END TIM2_IRQn 1 */
}
 8002130:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TIM2_ISR();
 8002134:	f7fe bd80 	b.w	8000c38 <TIM2_ISR>
 8002138:	20000278 	.word	0x20000278

0800213c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800213c:	4801      	ldr	r0, [pc, #4]	; (8002144 <USART1_IRQHandler+0x8>)
 800213e:	f002 bed5 	b.w	8004eec <HAL_UART_IRQHandler>
 8002142:	bf00      	nop
 8002144:	200002c0 	.word	0x200002c0

08002148 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	490d      	ldr	r1, [pc, #52]	; (8002180 <_sbrk+0x38>)
{
 800214a:	4603      	mov	r3, r0
 800214c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800214e:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <_sbrk+0x3c>)
 8002150:	4c0d      	ldr	r4, [pc, #52]	; (8002188 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8002152:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002154:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002156:	b120      	cbz	r0, 8002162 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002158:	4403      	add	r3, r0
 800215a:	4293      	cmp	r3, r2
 800215c:	d807      	bhi.n	800216e <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800215e:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8002160:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002162:	4c0a      	ldr	r4, [pc, #40]	; (800218c <_sbrk+0x44>)
 8002164:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8002166:	4403      	add	r3, r0
 8002168:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 800216a:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800216c:	d9f7      	bls.n	800215e <_sbrk+0x16>
    errno = ENOMEM;
 800216e:	f003 f873 	bl	8005258 <__errno>
 8002172:	220c      	movs	r2, #12
 8002174:	4603      	mov	r3, r0
    return (void *)-1;
 8002176:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 800217a:	601a      	str	r2, [r3, #0]
}
 800217c:	bd10      	pop	{r4, pc}
 800217e:	bf00      	nop
 8002180:	20000370 	.word	0x20000370
 8002184:	20002800 	.word	0x20002800
 8002188:	00000400 	.word	0x00000400
 800218c:	200004c0 	.word	0x200004c0

08002190 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop

08002194 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002194:	f7ff fffc 	bl	8002190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002198:	480b      	ldr	r0, [pc, #44]	; (80021c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800219a:	490c      	ldr	r1, [pc, #48]	; (80021cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800219c:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021b0:	4c09      	ldr	r4, [pc, #36]	; (80021d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021be:	f003 f851 	bl	8005264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021c2:	f7ff f921 	bl	8001408 <main>
  bx lr
 80021c6:	4770      	bx	lr
  ldr r0, =_sdata
 80021c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021cc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80021d0:	08005dc0 	.word	0x08005dc0
  ldr r2, =_sbss
 80021d4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80021d8:	200004c0 	.word	0x200004c0

080021dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <ADC1_2_IRQHandler>
	...

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e6:	4a0d      	ldr	r2, [pc, #52]	; (800221c <HAL_InitTick+0x3c>)
{
 80021e8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ea:	7811      	ldrb	r1, [r2, #0]
 80021ec:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <HAL_InitTick+0x40>)
 80021ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	fbb2 f0f3 	udiv	r0, r2, r3
 80021f8:	f000 fbac 	bl	8002954 <HAL_SYSTICK_Config>
 80021fc:	b908      	cbnz	r0, 8002202 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021fe:	2d0f      	cmp	r5, #15
 8002200:	d901      	bls.n	8002206 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002202:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002204:	bd38      	pop	{r3, r4, r5, pc}
 8002206:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002208:	4602      	mov	r2, r0
 800220a:	4629      	mov	r1, r5
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f000 fb54 	bl	80028bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_InitTick+0x44>)
 8002216:	4620      	mov	r0, r4
 8002218:	601d      	str	r5, [r3, #0]
}
 800221a:	bd38      	pop	{r3, r4, r5, pc}
 800221c:	20000020 	.word	0x20000020
 8002220:	2000001c 	.word	0x2000001c
 8002224:	20000024 	.word	0x20000024

08002228 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002228:	4a07      	ldr	r2, [pc, #28]	; (8002248 <HAL_Init+0x20>)
{
 800222a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800222c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002230:	f043 0310 	orr.w	r3, r3, #16
 8002234:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002236:	f000 fb2f 	bl	8002898 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800223a:	200f      	movs	r0, #15
 800223c:	f7ff ffd0 	bl	80021e0 <HAL_InitTick>
  HAL_MspInit();
 8002240:	f7ff fd98 	bl	8001d74 <HAL_MspInit>
}
 8002244:	2000      	movs	r0, #0
 8002246:	bd08      	pop	{r3, pc}
 8002248:	40022000 	.word	0x40022000

0800224c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800224c:	4a03      	ldr	r2, [pc, #12]	; (800225c <HAL_IncTick+0x10>)
 800224e:	4b04      	ldr	r3, [pc, #16]	; (8002260 <HAL_IncTick+0x14>)
 8002250:	6811      	ldr	r1, [r2, #0]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	440b      	add	r3, r1
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000374 	.word	0x20000374
 8002260:	20000020 	.word	0x20000020

08002264 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002264:	4b01      	ldr	r3, [pc, #4]	; (800226c <HAL_GetTick+0x8>)
 8002266:	6818      	ldr	r0, [r3, #0]
}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000374 	.word	0x20000374

08002270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002270:	b538      	push	{r3, r4, r5, lr}
 8002272:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff fff6 	bl	8002264 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002278:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800227a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800227c:	d002      	beq.n	8002284 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <HAL_Delay+0x20>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002284:	f7ff ffee 	bl	8002264 <HAL_GetTick>
 8002288:	1b40      	subs	r0, r0, r5
 800228a:	42a0      	cmp	r0, r4
 800228c:	d3fa      	bcc.n	8002284 <HAL_Delay+0x14>
  {
  }
}
 800228e:	bd38      	pop	{r3, r4, r5, pc}
 8002290:	20000020 	.word	0x20000020

08002294 <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002294:	2800      	cmp	r0, #0
 8002296:	f000 808b 	beq.w	80023b0 <HAL_ADC_Init+0x11c>
{
 800229a:	b538      	push	{r3, r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800229c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800229e:	4604      	mov	r4, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d06d      	beq.n	8002380 <HAL_ADC_Init+0xec>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	07d1      	lsls	r1, r2, #31
 80022aa:	d442      	bmi.n	8002332 <HAL_ADC_Init+0x9e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022ae:	06d2      	lsls	r2, r2, #27
 80022b0:	d460      	bmi.n	8002374 <HAL_ADC_Init+0xe0>
    ADC_STATE_CLR_SET(hadc->State,
 80022b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022b4:	6861      	ldr	r1, [r4, #4]
 80022b6:	69e0      	ldr	r0, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80022b8:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022bc:	7b25      	ldrb	r5, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80022be:	f022 0202 	bic.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022c2:	4301      	orrs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 80022c4:	f042 0202 	orr.w	r2, r2, #2
 80022c8:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022ca:	ea41 0245 	orr.w	r2, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022ce:	68a1      	ldr	r1, [r4, #8]
 80022d0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80022d4:	d05a      	beq.n	800238c <HAL_ADC_Init+0xf8>
 80022d6:	f1a1 0001 	sub.w	r0, r1, #1
 80022da:	fab0 f080 	clz	r0, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022de:	f894 c014 	ldrb.w	ip, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022e2:	0940      	lsrs	r0, r0, #5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022e4:	f1bc 0f01 	cmp.w	ip, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022e8:	ea4f 2000 	mov.w	r0, r0, lsl #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022ec:	d06c      	beq.n	80023c8 <HAL_ADC_Init+0x134>
      MODIFY_REG(hadc->Instance->CR1,
 80022ee:	685d      	ldr	r5, [r3, #4]
 80022f0:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80022f4:	4328      	orrs	r0, r5
 80022f6:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80022f8:	689d      	ldr	r5, [r3, #8]
 80022fa:	4844      	ldr	r0, [pc, #272]	; (800240c <HAL_ADC_Init+0x178>)
 80022fc:	4028      	ands	r0, r5
 80022fe:	4310      	orrs	r0, r2
 8002300:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002302:	2901      	cmp	r1, #1
 8002304:	d050      	beq.n	80023a8 <HAL_ADC_Init+0x114>
  uint32_t tmp_sqr1 = 0U;
 8002306:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 8002308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800230a:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800230e:	4301      	orrs	r1, r0
 8002310:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002312:	6899      	ldr	r1, [r3, #8]
 8002314:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <HAL_ADC_Init+0x17c>)
 8002316:	400b      	ands	r3, r1
 8002318:	429a      	cmp	r2, r3
 800231a:	d04b      	beq.n	80023b4 <HAL_ADC_Init+0x120>
      tmp_hal_status = HAL_ERROR;
 800231c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800231e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002320:	f023 0312 	bic.w	r3, r3, #18
 8002324:	f043 0310 	orr.w	r3, r3, #16
 8002328:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800232a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800232c:	4303      	orrs	r3, r0
 800232e:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002330:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800233a:	f7ff ff93 	bl	8002264 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800233e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002340:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	07d2      	lsls	r2, r2, #31
 8002346:	d5b1      	bpl.n	80022ac <HAL_ADC_Init+0x18>
 8002348:	e002      	b.n	8002350 <HAL_ADC_Init+0xbc>
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	07d1      	lsls	r1, r2, #31
 800234e:	d5ad      	bpl.n	80022ac <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002350:	f7ff ff88 	bl	8002264 <HAL_GetTick>
 8002354:	1b40      	subs	r0, r0, r5
 8002356:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002358:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800235a:	d9f6      	bls.n	800234a <HAL_ADC_Init+0xb6>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	07d0      	lsls	r0, r2, #31
 8002360:	d5f3      	bpl.n	800234a <HAL_ADC_Init+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002362:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002364:	f043 0310 	orr.w	r3, r3, #16
 8002368:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002372:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002374:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002376:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002378:	f043 0310 	orr.w	r3, r3, #16
 800237c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800237e:	bd38      	pop	{r3, r4, r5, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8002380:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002382:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002386:	f7ff fd17 	bl	8001db8 <HAL_ADC_MspInit>
 800238a:	e78b      	b.n	80022a4 <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800238c:	7d20      	ldrb	r0, [r4, #20]
 800238e:	2801      	cmp	r0, #1
 8002390:	d019      	beq.n	80023c6 <HAL_ADC_Init+0x132>
      MODIFY_REG(hadc->Instance->CR1,
 8002392:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002394:	491d      	ldr	r1, [pc, #116]	; (800240c <HAL_ADC_Init+0x178>)
      MODIFY_REG(hadc->Instance->CR1,
 8002396:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 800239a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800239e:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80023a0:	6898      	ldr	r0, [r3, #8]
 80023a2:	4001      	ands	r1, r0
 80023a4:	4311      	orrs	r1, r2
 80023a6:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023a8:	6920      	ldr	r0, [r4, #16]
 80023aa:	3801      	subs	r0, #1
 80023ac:	0500      	lsls	r0, r0, #20
 80023ae:	e7ab      	b.n	8002308 <HAL_ADC_Init+0x74>
    return HAL_ERROR;
 80023b0:	2001      	movs	r0, #1
}
 80023b2:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 80023b4:	2000      	movs	r0, #0
 80023b6:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80023b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023ba:	f023 0303 	bic.w	r3, r3, #3
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80023c4:	bd38      	pop	{r3, r4, r5, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023c6:	4608      	mov	r0, r1
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023c8:	b1c5      	cbz	r5, 80023fc <HAL_ADC_Init+0x168>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ca:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80023cc:	f045 0520 	orr.w	r5, r5, #32
 80023d0:	62a5      	str	r5, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80023d4:	f045 0501 	orr.w	r5, r5, #1
 80023d8:	62e5      	str	r5, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 80023da:	685d      	ldr	r5, [r3, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023dc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80023e0:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80023e4:	ea40 0005 	orr.w	r0, r0, r5
 80023e8:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80023ea:	689d      	ldr	r5, [r3, #8]
 80023ec:	4807      	ldr	r0, [pc, #28]	; (800240c <HAL_ADC_Init+0x178>)
 80023ee:	ea00 0005 	and.w	r0, r0, r5
 80023f2:	ea40 0002 	orr.w	r0, r0, r2
 80023f6:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023f8:	d183      	bne.n	8002302 <HAL_ADC_Init+0x6e>
 80023fa:	e7d5      	b.n	80023a8 <HAL_ADC_Init+0x114>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023fc:	69a5      	ldr	r5, [r4, #24]
 80023fe:	3d01      	subs	r5, #1
 8002400:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 8002404:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8002408:	e7e7      	b.n	80023da <HAL_ADC_Init+0x146>
 800240a:	bf00      	nop
 800240c:	ffe1f7fd 	.word	0xffe1f7fd
 8002410:	ff1f0efe 	.word	0xff1f0efe

08002414 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002414:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002418:	f012 0f50 	tst.w	r2, #80	; 0x50
 800241c:	d10f      	bne.n	800243e <ADC_DMAConvCplt+0x2a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800241e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002420:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 8002426:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002428:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800242a:	688a      	ldr	r2, [r1, #8]
 800242c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002430:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002434:	d006      	beq.n	8002444 <ADC_DMAConvCplt+0x30>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fc64 	bl	8001d04 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800243c:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4718      	bx	r3
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002444:	7b1a      	ldrb	r2, [r3, #12]
 8002446:	2a00      	cmp	r2, #0
 8002448:	d1f5      	bne.n	8002436 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800244a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002450:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002454:	04d2      	lsls	r2, r2, #19
 8002456:	d4ee      	bmi.n	8002436 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
 8002460:	e7e9      	b.n	8002436 <ADC_DMAConvCplt+0x22>
 8002462:	bf00      	nop

08002464 <HAL_ADC_ConvHalfCpltCallback>:
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop

08002468 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002468:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800246a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800246c:	f7ff fffa 	bl	8002464 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002470:	bd08      	pop	{r3, pc}
 8002472:	bf00      	nop

08002474 <HAL_ADC_ErrorCallback>:
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop

08002478 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002478:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800247a:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800247c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800247e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002482:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002484:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800248c:	f7ff fff2 	bl	8002474 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002490:	bd08      	pop	{r3, pc}
 8002492:	bf00      	nop

08002494 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002494:	2300      	movs	r3, #0
{ 
 8002496:	b530      	push	{r4, r5, lr}
 8002498:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800249a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800249c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d074      	beq.n	800258e <HAL_ADC_ConfigChannel+0xfa>
 80024a4:	2301      	movs	r3, #1
 80024a6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80024aa:	684b      	ldr	r3, [r1, #4]
 80024ac:	4602      	mov	r2, r0
 80024ae:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024b0:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 80024b2:	d932      	bls.n	800251a <HAL_ADC_ConfigChannel+0x86>
  else if (sConfig->Rank < 13U)
 80024b4:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 80024ba:	d84e      	bhi.n	800255a <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024bc:	f04f 0c1f 	mov.w	ip, #31
 80024c0:	6808      	ldr	r0, [r1, #0]
 80024c2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80024c4:	3b23      	subs	r3, #35	; 0x23
 80024c6:	fa00 fe03 	lsl.w	lr, r0, r3
 80024ca:	fa0c f303 	lsl.w	r3, ip, r3
 80024ce:	ea25 0303 	bic.w	r3, r5, r3
 80024d2:	ea43 030e 	orr.w	r3, r3, lr
 80024d6:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024d8:	2809      	cmp	r0, #9
 80024da:	d930      	bls.n	800253e <HAL_ADC_ConfigChannel+0xaa>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024dc:	f04f 0c07 	mov.w	ip, #7
 80024e0:	688d      	ldr	r5, [r1, #8]
 80024e2:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80024e6:	68e3      	ldr	r3, [r4, #12]
 80024e8:	391e      	subs	r1, #30
 80024ea:	408d      	lsls	r5, r1
 80024ec:	fa0c f101 	lsl.w	r1, ip, r1
 80024f0:	ea23 0301 	bic.w	r3, r3, r1
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024f4:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024f8:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024fa:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024fc:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024fe:	d844      	bhi.n	800258a <HAL_ADC_ConfigChannel+0xf6>
    if (hadc->Instance == ADC1)
 8002500:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <HAL_ADC_ConfigChannel+0x128>)
 8002502:	429c      	cmp	r4, r3
 8002504:	d038      	beq.n	8002578 <HAL_ADC_ConfigChannel+0xe4>
      tmp_hal_status = HAL_ERROR;
 8002506:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002508:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800250a:	f043 0320 	orr.w	r3, r3, #32
 800250e:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8002510:	2300      	movs	r3, #0
 8002512:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8002516:	b003      	add	sp, #12
 8002518:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800251a:	f04f 0c1f 	mov.w	ip, #31
 800251e:	6808      	ldr	r0, [r1, #0]
 8002520:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002524:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002526:	3b05      	subs	r3, #5
 8002528:	fa00 fe03 	lsl.w	lr, r0, r3
 800252c:	fa0c f303 	lsl.w	r3, ip, r3
 8002530:	ea25 0303 	bic.w	r3, r5, r3
 8002534:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002538:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800253a:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800253c:	d8ce      	bhi.n	80024dc <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800253e:	2507      	movs	r5, #7
 8002540:	6889      	ldr	r1, [r1, #8]
 8002542:	6923      	ldr	r3, [r4, #16]
 8002544:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002548:	4081      	lsls	r1, r0
 800254a:	fa05 f000 	lsl.w	r0, r5, r0
 800254e:	ea23 0300 	bic.w	r3, r3, r0
 8002552:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002554:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002556:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002558:	e7da      	b.n	8002510 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800255a:	f04f 0c1f 	mov.w	ip, #31
 800255e:	6808      	ldr	r0, [r1, #0]
 8002560:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002562:	3b41      	subs	r3, #65	; 0x41
 8002564:	fa00 fe03 	lsl.w	lr, r0, r3
 8002568:	fa0c f303 	lsl.w	r3, ip, r3
 800256c:	ea25 0303 	bic.w	r3, r5, r3
 8002570:	ea43 030e 	orr.w	r3, r3, lr
 8002574:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002576:	e7af      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002578:	68a3      	ldr	r3, [r4, #8]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	d405      	bmi.n	800258a <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800257e:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002580:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002582:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002586:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002588:	d004      	beq.n	8002594 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800258a:	2000      	movs	r0, #0
 800258c:	e7c0      	b.n	8002510 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 800258e:	2002      	movs	r0, #2
}
 8002590:	b003      	add	sp, #12
 8002592:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_ADC_ConfigChannel+0x12c>)
 8002596:	490b      	ldr	r1, [pc, #44]	; (80025c4 <HAL_ADC_ConfigChannel+0x130>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	fba1 1303 	umull	r1, r3, r1, r3
 800259e:	0c9b      	lsrs	r3, r3, #18
 80025a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80025a8:	9b01      	ldr	r3, [sp, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0ed      	beq.n	800258a <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 80025ae:	9b01      	ldr	r3, [sp, #4]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80025b4:	9b01      	ldr	r3, [sp, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f9      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x11a>
 80025ba:	e7e6      	b.n	800258a <HAL_ADC_ConfigChannel+0xf6>
 80025bc:	40012400 	.word	0x40012400
 80025c0:	2000001c 	.word	0x2000001c
 80025c4:	431bde83 	.word	0x431bde83

080025c8 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80025c8:	2300      	movs	r3, #0
{
 80025ca:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025cc:	6802      	ldr	r2, [r0, #0]
{
 80025ce:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80025d0:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025d2:	6893      	ldr	r3, [r2, #8]
 80025d4:	07d9      	lsls	r1, r3, #31
 80025d6:	d427      	bmi.n	8002628 <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <ADC_Enable+0x80>)
 80025da:	4604      	mov	r4, r0
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	481b      	ldr	r0, [pc, #108]	; (800264c <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 80025e0:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025e2:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80025e6:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025ea:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80025ec:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025ee:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80025f0:	9b01      	ldr	r3, [sp, #4]
 80025f2:	b12b      	cbz	r3, 8002600 <ADC_Enable+0x38>
      wait_loop_index--;
 80025f4:	9b01      	ldr	r3, [sp, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80025fa:	9b01      	ldr	r3, [sp, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f9      	bne.n	80025f4 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8002600:	f7ff fe30 	bl	8002264 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002604:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002606:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	07da      	lsls	r2, r3, #31
 800260c:	d40c      	bmi.n	8002628 <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800260e:	f7ff fe29 	bl	8002264 <HAL_GetTick>
 8002612:	1b43      	subs	r3, r0, r5
 8002614:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002616:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002618:	d903      	bls.n	8002622 <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	f012 0201 	ands.w	r2, r2, #1
 8002620:	d005      	beq.n	800262e <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	07db      	lsls	r3, r3, #31
 8002626:	d5f2      	bpl.n	800260e <ADC_Enable+0x46>
  return HAL_OK;
 8002628:	2000      	movs	r0, #0
}
 800262a:	b003      	add	sp, #12
 800262c:	bd30      	pop	{r4, r5, pc}
          __HAL_UNLOCK(hadc);
 800262e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002630:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8002632:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	f043 0310 	orr.w	r3, r3, #16
 800263a:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800263e:	4303      	orrs	r3, r0
 8002640:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002642:	b003      	add	sp, #12
 8002644:	bd30      	pop	{r4, r5, pc}
 8002646:	bf00      	nop
 8002648:	2000001c 	.word	0x2000001c
 800264c:	431bde83 	.word	0x431bde83

08002650 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8002650:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002654:	2b01      	cmp	r3, #1
 8002656:	d038      	beq.n	80026ca <HAL_ADC_Start+0x7a>
 8002658:	2301      	movs	r3, #1
{
 800265a:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800265c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002660:	4604      	mov	r4, r0
 8002662:	f7ff ffb1 	bl	80025c8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002666:	bb60      	cbnz	r0, 80026c2 <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 8002668:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800266a:	6822      	ldr	r2, [r4, #0]
 800266c:	4929      	ldr	r1, [pc, #164]	; (8002714 <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 800266e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002672:	f023 0301 	bic.w	r3, r3, #1
 8002676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800267a:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 800267c:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800267e:	d026      	beq.n	80026ce <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002680:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002682:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002686:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002688:	6853      	ldr	r3, [r2, #4]
 800268a:	0559      	lsls	r1, r3, #21
 800268c:	d42b      	bmi.n	80026e6 <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800268e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002690:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002692:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002696:	bf18      	it	ne
 8002698:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800269a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800269e:	bf18      	it	ne
 80026a0:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80026a4:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80026a6:	f06f 0302 	mvn.w	r3, #2
 80026aa:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026ac:	6893      	ldr	r3, [r2, #8]
 80026ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026b6:	d01d      	beq.n	80026f4 <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80026b8:	6893      	ldr	r3, [r2, #8]
 80026ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026be:	6093      	str	r3, [r2, #8]
}
 80026c0:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 80026c2:	2300      	movs	r3, #0
 80026c4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80026c8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80026ca:	2002      	movs	r0, #2
}
 80026cc:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_ADC_Start+0xc8>)
 80026d0:	6859      	ldr	r1, [r3, #4]
 80026d2:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 80026d6:	d0d3      	beq.n	8002680 <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80026da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80026de:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	055b      	lsls	r3, r3, #21
 80026e4:	d5d3      	bpl.n	800268e <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80026f2:	e7cc      	b.n	800268e <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <HAL_ADC_Start+0xc4>)
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d004      	beq.n	8002704 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80026fa:	6893      	ldr	r3, [r2, #8]
 80026fc:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8002700:	6093      	str	r3, [r2, #8]
}
 8002702:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002704:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002708:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800270a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800270e:	d1d3      	bne.n	80026b8 <HAL_ADC_Start+0x68>
 8002710:	e7f3      	b.n	80026fa <HAL_ADC_Start+0xaa>
 8002712:	bf00      	nop
 8002714:	40012800 	.word	0x40012800
 8002718:	40012400 	.word	0x40012400

0800271c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800271c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002720:	4604      	mov	r4, r0
 8002722:	b08d      	sub	sp, #52	; 0x34
 8002724:	460e      	mov	r6, r1
 8002726:	4617      	mov	r7, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_HandleTypeDef tmphadcSlave={0};
 8002728:	2100      	movs	r1, #0
 800272a:	2230      	movs	r2, #48	; 0x30
 800272c:	4668      	mov	r0, sp
 800272e:	f002 fd8b 	bl	8005248 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002732:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002736:	2b01      	cmp	r3, #1
 8002738:	d069      	beq.n	800280e <HAL_ADCEx_MultiModeStart_DMA+0xf2>
 800273a:	2501      	movs	r5, #1

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800273c:	4836      	ldr	r0, [pc, #216]	; (8002818 <HAL_ADCEx_MultiModeStart_DMA+0xfc>)
  __HAL_LOCK(hadc);
 800273e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002742:	9000      	str	r0, [sp, #0]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 8002744:	6880      	ldr	r0, [r0, #8]
 8002746:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
 800274a:	f5b0 2f60 	cmp.w	r0, #917504	; 0xe0000
 800274e:	d00a      	beq.n	8002766 <HAL_ADCEx_MultiModeStart_DMA+0x4a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002750:	2200      	movs	r2, #0
    __HAL_UNLOCK(hadc);
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8002752:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002754:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002756:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275a:	f043 0320 	orr.w	r3, r3, #32
 800275e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002760:	b00d      	add	sp, #52	; 0x34
 8002762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  tmp_hal_status = ADC_Enable(hadc);
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff ff2e 	bl	80025c8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800276c:	4605      	mov	r5, r0
 800276e:	b130      	cbz	r0, 800277e <HAL_ADCEx_MultiModeStart_DMA+0x62>
    __HAL_UNLOCK(hadc);
 8002770:	2300      	movs	r3, #0
}
 8002772:	4628      	mov	r0, r5
    __HAL_UNLOCK(hadc);
 8002774:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002778:	b00d      	add	sp, #52	; 0x34
 800277a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 800277e:	4668      	mov	r0, sp
 8002780:	f7ff ff22 	bl	80025c8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002784:	4605      	mov	r5, r0
 8002786:	2800      	cmp	r0, #0
 8002788:	d1f2      	bne.n	8002770 <HAL_ADCEx_MultiModeStart_DMA+0x54>
    ADC_STATE_CLR_SET(hadc->State,
 800278a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800278c:	4b23      	ldr	r3, [pc, #140]	; (800281c <HAL_ADCEx_MultiModeStart_DMA+0x100>)
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800278e:	f8d4 c000 	ldr.w	ip, [r4]
    ADC_STATE_CLR_SET(hadc->State,
 8002792:	4013      	ands	r3, r2
 8002794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002798:	62a3      	str	r3, [r4, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800279a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800279e:	055b      	lsls	r3, r3, #21
 80027a0:	d505      	bpl.n	80027ae <HAL_ADCEx_MultiModeStart_DMA+0x92>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027ac:	62a3      	str	r3, [r4, #40]	; 0x28
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027ae:	463b      	mov	r3, r7
 80027b0:	4632      	mov	r2, r6
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80027b2:	f06f 0702 	mvn.w	r7, #2
    __HAL_UNLOCK(hadc);
 80027b6:	2600      	movs	r6, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027b8:	6a20      	ldr	r0, [r4, #32]
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027ba:	f8df e064 	ldr.w	lr, [pc, #100]	; 8002820 <HAL_ADCEx_MultiModeStart_DMA+0x104>
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027be:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8002824 <HAL_ADCEx_MultiModeStart_DMA+0x108>
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027c2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002828 <HAL_ADCEx_MultiModeStart_DMA+0x10c>
    __HAL_UNLOCK(hadc);
 80027c6:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    ADC_CLEAR_ERRORCODE(hadc);
 80027ca:	62e6      	str	r6, [r4, #44]	; 0x2c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027cc:	e9c0 980a 	strd	r9, r8, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027d0:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80027d4:	f8cc 7000 	str.w	r7, [ip]
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80027d8:	f8dc 6008 	ldr.w	r6, [ip, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027dc:	f10c 014c 	add.w	r1, ip, #76	; 0x4c
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80027e0:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 80027e4:	f8cc 6008 	str.w	r6, [ip, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027e8:	f000 f904 	bl	80029f4 <HAL_DMA_Start_IT>
}
 80027ec:	4628      	mov	r0, r5
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80027f6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	bf0c      	ite	eq
 80027fe:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002802:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8002806:	609a      	str	r2, [r3, #8]
}
 8002808:	b00d      	add	sp, #52	; 0x34
 800280a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hadc);
 800280e:	2502      	movs	r5, #2
}
 8002810:	4628      	mov	r0, r5
 8002812:	b00d      	add	sp, #52	; 0x34
 8002814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002818:	40012800 	.word	0x40012800
 800281c:	ffeffcfe 	.word	0xffeffcfe
 8002820:	08002479 	.word	0x08002479
 8002824:	08002415 	.word	0x08002415
 8002828:	08002469 	.word	0x08002469

0800282c <HAL_ADCEx_MultiModeConfigChannel>:
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800282c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002830:	2a01      	cmp	r2, #1
 8002832:	d02a      	beq.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8002834:	4603      	mov	r3, r0
 8002836:	2001      	movs	r0, #1
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002838:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 800283a:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 800283e:	6890      	ldr	r0, [r2, #8]
 8002840:	07c0      	lsls	r0, r0, #31
 8002842:	d412      	bmi.n	800286a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002844:	4812      	ldr	r0, [pc, #72]	; (8002890 <HAL_ADCEx_MultiModeConfigChannel+0x64>)
 8002846:	6880      	ldr	r0, [r0, #8]
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002848:	f010 0001 	ands.w	r0, r0, #1
 800284c:	d10d      	bne.n	800286a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
{
 800284e:	b430      	push	{r4, r5}
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002850:	4c10      	ldr	r4, [pc, #64]	; (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x68>)
 8002852:	42a2      	cmp	r2, r4
 8002854:	d012      	beq.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x50>
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    tmp_hal_status = HAL_ERROR;
 8002856:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800285a:	f042 0220 	orr.w	r2, r2, #32
 800285e:	629a      	str	r2, [r3, #40]	; 0x28
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
} 
 8002866:	bc30      	pop	{r4, r5}
 8002868:	4770      	bx	lr
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800286a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800286c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800286e:	f042 0220 	orr.w	r2, r2, #32
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
} 
 800287a:	4770      	bx	lr
    MODIFY_REG(hadc->Instance->CR1,
 800287c:	6854      	ldr	r4, [r2, #4]
 800287e:	680d      	ldr	r5, [r1, #0]
 8002880:	f424 2170 	bic.w	r1, r4, #983040	; 0xf0000
 8002884:	4329      	orrs	r1, r5
 8002886:	6051      	str	r1, [r2, #4]
 8002888:	e7ea      	b.n	8002860 <HAL_ADCEx_MultiModeConfigChannel+0x34>
  __HAL_LOCK(hadc);
 800288a:	2002      	movs	r0, #2
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40012800 	.word	0x40012800
 8002894:	40012400 	.word	0x40012400

08002898 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002898:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800289c:	4906      	ldr	r1, [pc, #24]	; (80028b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800289e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80028b4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028be:	b500      	push	{lr}
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c6:	f1c3 0e07 	rsb	lr, r3, #7
 80028ca:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ce:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d2:	bf28      	it	cs
 80028d4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d8:	f1bc 0f06 	cmp.w	ip, #6
 80028dc:	d91b      	bls.n	8002916 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028de:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e2:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e4:	fa0c fc03 	lsl.w	ip, ip, r3
 80028e8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 3cff 	mov.w	ip, #4294967295
 80028f0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80028f4:	ea21 010c 	bic.w	r1, r1, ip
 80028f8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80028fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002900:	db0c      	blt.n	800291c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002902:	0109      	lsls	r1, r1, #4
 8002904:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002908:	b2c9      	uxtb	r1, r1
 800290a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800290e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002912:	f85d fb04 	ldr.w	pc, [sp], #4
 8002916:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002918:	4613      	mov	r3, r2
 800291a:	e7e7      	b.n	80028ec <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_NVIC_SetPriority+0x78>)
 800291e:	f000 000f 	and.w	r0, r0, #15
 8002922:	0109      	lsls	r1, r1, #4
 8002924:	b2c9      	uxtb	r1, r1
 8002926:	4403      	add	r3, r0
 8002928:	7619      	strb	r1, [r3, #24]
 800292a:	f85d fb04 	ldr.w	pc, [sp], #4
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00
 8002934:	e000ecfc 	.word	0xe000ecfc

08002938 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002938:	2800      	cmp	r0, #0
 800293a:	db07      	blt.n	800294c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293c:	2301      	movs	r3, #1
 800293e:	f000 011f 	and.w	r1, r0, #31
 8002942:	4a03      	ldr	r2, [pc, #12]	; (8002950 <HAL_NVIC_EnableIRQ+0x18>)
 8002944:	0940      	lsrs	r0, r0, #5
 8002946:	408b      	lsls	r3, r1
 8002948:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000e100 	.word	0xe000e100

08002954 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002954:	3801      	subs	r0, #1
 8002956:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800295a:	d20f      	bcs.n	800297c <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002960:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002964:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002966:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002968:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296a:	4c05      	ldr	r4, [pc, #20]	; (8002980 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002972:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002974:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8002976:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002978:	6119      	str	r1, [r3, #16]
 800297a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800297c:	2001      	movs	r0, #1
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002984:	b370      	cbz	r0, 80029e4 <HAL_DMA_Init+0x60>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002986:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002988:	2202      	movs	r2, #2
{
 800298a:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800298c:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002990:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002992:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002994:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8002998:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299a:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800299c:	f422 5e7f 	bic.w	lr, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 80029a0:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 80029a4:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029a6:	4910      	ldr	r1, [pc, #64]	; (80029e8 <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a8:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029aa:	4d10      	ldr	r5, [pc, #64]	; (80029ec <HAL_DMA_Init+0x68>)
 80029ac:	4401      	add	r1, r0
 80029ae:	fba5 5101 	umull	r5, r1, r5, r1
 80029b2:	0909      	lsrs	r1, r1, #4
 80029b4:	0089      	lsls	r1, r1, #2
 80029b6:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b8:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029ba:	f02e 0e30 	bic.w	lr, lr, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029be:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c0:	6959      	ldr	r1, [r3, #20]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	6999      	ldr	r1, [r3, #24]
 80029c6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c8:	69d9      	ldr	r1, [r3, #28]
 80029ca:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 80029cc:	4908      	ldr	r1, [pc, #32]	; (80029f0 <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 80029ce:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 80029d2:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 80029d4:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d6:	639c      	str	r4, [r3, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029d8:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80029dc:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 80029e0:	4620      	mov	r0, r4
}
 80029e2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80029e4:	2001      	movs	r0, #1
}
 80029e6:	4770      	bx	lr
 80029e8:	bffdfff8 	.word	0xbffdfff8
 80029ec:	cccccccd 	.word	0xcccccccd
 80029f0:	40020000 	.word	0x40020000

080029f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f4:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029f6:	f890 0020 	ldrb.w	r0, [r0, #32]
 80029fa:	2801      	cmp	r0, #1
 80029fc:	d040      	beq.n	8002a80 <HAL_DMA_Start_IT+0x8c>
{
 80029fe:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8002a00:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a02:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002a06:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a0a:	42a0      	cmp	r0, r4
 8002a0c:	fa5f fe80 	uxtb.w	lr, r0
 8002a10:	d004      	beq.n	8002a1c <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a12:	2300      	movs	r3, #0
 8002a14:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a18:	2002      	movs	r0, #2
  }    
  return status;
}
 8002a1a:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a1c:	2002      	movs	r0, #2
 8002a1e:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a22:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002a24:	f8dc 4000 	ldr.w	r4, [ip]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a28:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002a2c:	6825      	ldr	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a2e:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8002a32:	f025 0501 	bic.w	r5, r5, #1
 8002a36:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a38:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8002a3c:	fa0e f000 	lsl.w	r0, lr, r0
 8002a40:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a42:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a44:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002a48:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8002a4a:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a4e:	bf0b      	itete	eq
 8002a50:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002a52:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002a54:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002a56:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002a58:	b14b      	cbz	r3, 8002a6e <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	f043 030e 	orr.w	r3, r3, #14
 8002a60:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002a62:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a64:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6023      	str	r3, [r4, #0]
}
 8002a6c:	bd30      	pop	{r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	f043 030a 	orr.w	r3, r3, #10
 8002a7c:	6023      	str	r3, [r4, #0]
 8002a7e:	e7f0      	b.n	8002a62 <HAL_DMA_Start_IT+0x6e>
  __HAL_LOCK(hdma);
 8002a80:	2002      	movs	r0, #2
}
 8002a82:	4770      	bx	lr

08002a84 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a84:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8002a88:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a8a:	2a02      	cmp	r2, #2
 8002a8c:	d006      	beq.n	8002a9c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a8e:	2204      	movs	r2, #4
 8002a90:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002a92:	2200      	movs	r2, #0
    return HAL_ERROR;
 8002a94:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002a96:	f883 2020 	strb.w	r2, [r3, #32]
}
 8002a9a:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a9c:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa0:	681a      	ldr	r2, [r3, #0]
  return status; 
 8002aa2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa4:	6811      	ldr	r1, [r2, #0]
 8002aa6:	f021 010e 	bic.w	r1, r1, #14
 8002aaa:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002aac:	6811      	ldr	r1, [r2, #0]
 8002aae:	f021 0101 	bic.w	r1, r1, #1
 8002ab2:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ab4:	e9d3 120f 	ldrd	r1, r2, [r3, #60]	; 0x3c
 8002ab8:	fa0c f202 	lsl.w	r2, ip, r2
 8002abc:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002abe:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002ac0:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002ac4:	f883 2020 	strb.w	r2, [r3, #32]
}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop

08002acc <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002acc:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8002ad0:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ad2:	2a02      	cmp	r2, #2
 8002ad4:	d003      	beq.n	8002ade <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad6:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8002ad8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ada:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002adc:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ade:	6802      	ldr	r2, [r0, #0]
{  
 8002ae0:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae2:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ae4:	481c      	ldr	r0, [pc, #112]	; (8002b58 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae6:	f021 010e 	bic.w	r1, r1, #14
 8002aea:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002aec:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002aee:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8002af0:	f021 0101 	bic.w	r1, r1, #1
 8002af4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002af6:	d024      	beq.n	8002b42 <HAL_DMA_Abort_IT+0x76>
 8002af8:	4918      	ldr	r1, [pc, #96]	; (8002b5c <HAL_DMA_Abort_IT+0x90>)
 8002afa:	428a      	cmp	r2, r1
 8002afc:	d01d      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x6e>
 8002afe:	3114      	adds	r1, #20
 8002b00:	428a      	cmp	r2, r1
 8002b02:	d020      	beq.n	8002b46 <HAL_DMA_Abort_IT+0x7a>
 8002b04:	3114      	adds	r1, #20
 8002b06:	428a      	cmp	r2, r1
 8002b08:	d020      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x80>
 8002b0a:	3114      	adds	r1, #20
 8002b0c:	428a      	cmp	r2, r1
 8002b0e:	d020      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x86>
 8002b10:	3114      	adds	r1, #20
 8002b12:	428a      	cmp	r2, r1
 8002b14:	bf0c      	ite	eq
 8002b16:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8002b1a:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8002b20:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b22:	480f      	ldr	r0, [pc, #60]	; (8002b60 <HAL_DMA_Abort_IT+0x94>)
 8002b24:	6042      	str	r2, [r0, #4]
    if(hdma->XferAbortCallback != NULL)
 8002b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8002b28:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002b2c:	f883 4020 	strb.w	r4, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8002b30:	b12a      	cbz	r2, 8002b3e <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 8002b32:	4618      	mov	r0, r3
 8002b34:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	4620      	mov	r0, r4
}
 8002b38:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b3a:	2210      	movs	r2, #16
 8002b3c:	e7ef      	b.n	8002b1e <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	4610      	mov	r0, r2
}
 8002b40:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b42:	2201      	movs	r2, #1
 8002b44:	e7eb      	b.n	8002b1e <HAL_DMA_Abort_IT+0x52>
 8002b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b4a:	e7e8      	b.n	8002b1e <HAL_DMA_Abort_IT+0x52>
 8002b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b50:	e7e5      	b.n	8002b1e <HAL_DMA_Abort_IT+0x52>
 8002b52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b56:	e7e2      	b.n	8002b1e <HAL_DMA_Abort_IT+0x52>
 8002b58:	40020008 	.word	0x40020008
 8002b5c:	4002001c 	.word	0x4002001c
 8002b60:	40020000 	.word	0x40020000

08002b64 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b64:	2204      	movs	r2, #4
{
 8002b66:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b68:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b6a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b6c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002b6e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b70:	408a      	lsls	r2, r1
 8002b72:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002b74:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b76:	d01f      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x54>
 8002b78:	076a      	lsls	r2, r5, #29
 8002b7a:	d51d      	bpl.n	8002bb8 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	0691      	lsls	r1, r2, #26
 8002b80:	d403      	bmi.n	8002b8a <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	f022 0204 	bic.w	r2, r2, #4
 8002b88:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b8a:	4a3f      	ldr	r2, [pc, #252]	; (8002c88 <HAL_DMA_IRQHandler+0x124>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d05c      	beq.n	8002c4a <HAL_DMA_IRQHandler+0xe6>
 8002b90:	3214      	adds	r2, #20
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d061      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xf6>
 8002b96:	3214      	adds	r2, #20
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d068      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x10a>
 8002b9c:	3214      	adds	r2, #20
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d06b      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x116>
 8002ba2:	3214      	adds	r2, #20
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d05d      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x100>
 8002ba8:	3214      	adds	r2, #20
 8002baa:	4293      	cmp	r3, r2
 8002bac:	bf0c      	ite	eq
 8002bae:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8002bb2:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8002bb6:	e049      	b.n	8002c4c <HAL_DMA_IRQHandler+0xe8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bb8:	2202      	movs	r2, #2
 8002bba:	408a      	lsls	r2, r1
 8002bbc:	4222      	tst	r2, r4
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMA_IRQHandler+0xa2>
 8002bc0:	07aa      	lsls	r2, r5, #30
 8002bc2:	d520      	bpl.n	8002c06 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	0691      	lsls	r1, r2, #26
 8002bc8:	d406      	bmi.n	8002bd8 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8002bca:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	f022 020a 	bic.w	r2, r2, #10
 8002bd2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002bd4:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bd8:	4a2b      	ldr	r2, [pc, #172]	; (8002c88 <HAL_DMA_IRQHandler+0x124>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d02b      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xd2>
 8002bde:	3214      	adds	r2, #20
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d042      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x106>
 8002be4:	3214      	adds	r2, #20
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d044      	beq.n	8002c74 <HAL_DMA_IRQHandler+0x110>
 8002bea:	3214      	adds	r2, #20
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d036      	beq.n	8002c5e <HAL_DMA_IRQHandler+0xfa>
 8002bf0:	3214      	adds	r2, #20
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d044      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x11c>
 8002bf6:	3214      	adds	r2, #20
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	bf0c      	ite	eq
 8002bfc:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8002c00:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8002c04:	e018      	b.n	8002c38 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c06:	2208      	movs	r2, #8
 8002c08:	408a      	lsls	r2, r1
 8002c0a:	4222      	tst	r2, r4
 8002c0c:	d01b      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xe2>
 8002c0e:	072a      	lsls	r2, r5, #28
 8002c10:	d519      	bpl.n	8002c46 <HAL_DMA_IRQHandler+0xe2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c12:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 8002c14:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c16:	f022 020e 	bic.w	r2, r2, #14
 8002c1a:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c1c:	2301      	movs	r3, #1
    if (hdma->XferErrorCallback != NULL)
 8002c1e:	6b02      	ldr	r2, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c20:	fa03 f101 	lsl.w	r1, r3, r1
 8002c24:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c26:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002c28:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 8002c2c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 8002c30:	b14a      	cbz	r2, 8002c46 <HAL_DMA_IRQHandler+0xe2>
}
 8002c32:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002c34:	4710      	bx	r2
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c36:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8002c38:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c3a:	4c14      	ldr	r4, [pc, #80]	; (8002c8c <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 8002c3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c3e:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002c40:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002c44:	b93b      	cbnz	r3, 8002c56 <HAL_DMA_IRQHandler+0xf2>
}
 8002c46:	bc70      	pop	{r4, r5, r6}
 8002c48:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	490f      	ldr	r1, [pc, #60]	; (8002c8c <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 8002c4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c50:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f7      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xe2>
}
 8002c56:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8002c58:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c5a:	2240      	movs	r2, #64	; 0x40
 8002c5c:	e7f6      	b.n	8002c4c <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c62:	e7e9      	b.n	8002c38 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002c68:	e7f0      	b.n	8002c4c <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	e7e4      	b.n	8002c38 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c72:	e7eb      	b.n	8002c4c <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c78:	e7de      	b.n	8002c38 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c7e:	e7e5      	b.n	8002c4c <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c84:	e7d8      	b.n	8002c38 <HAL_DMA_IRQHandler+0xd4>
 8002c86:	bf00      	nop
 8002c88:	40020008 	.word	0x40020008
 8002c8c:	40020000 	.word	0x40020000

08002c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c94:	680e      	ldr	r6, [r1, #0]
{
 8002c96:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c98:	2e00      	cmp	r6, #0
 8002c9a:	f000 80b1 	beq.w	8002e00 <HAL_GPIO_Init+0x170>
 8002c9e:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ca0:	4f74      	ldr	r7, [pc, #464]	; (8002e74 <HAL_GPIO_Init+0x1e4>)
  uint32_t config = 0x00u;
 8002ca2:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8002ca4:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ca6:	4d74      	ldr	r5, [pc, #464]	; (8002e78 <HAL_GPIO_Init+0x1e8>)
      switch (GPIO_Init->Mode)
 8002ca8:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8002e7c <HAL_GPIO_Init+0x1ec>
 8002cac:	e006      	b.n	8002cbc <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8002cae:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb0:	fa36 f403 	lsrs.w	r4, r6, r3
 8002cb4:	f102 0204 	add.w	r2, r2, #4
 8002cb8:	f000 80a2 	beq.w	8002e00 <HAL_GPIO_Init+0x170>
    ioposition = (0x01uL << position);
 8002cbc:	2401      	movs	r4, #1
 8002cbe:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8002cc0:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cc4:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8002cc8:	d1f1      	bne.n	8002cae <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8002cca:	684e      	ldr	r6, [r1, #4]
 8002ccc:	2e12      	cmp	r6, #18
 8002cce:	f200 809a 	bhi.w	8002e06 <HAL_GPIO_Init+0x176>
 8002cd2:	2e12      	cmp	r6, #18
 8002cd4:	d81a      	bhi.n	8002d0c <HAL_GPIO_Init+0x7c>
 8002cd6:	e8df f006 	tbb	[pc, r6]
 8002cda:	b9a3      	.short	0xb9a3
 8002cdc:	1919c3b5 	.word	0x1919c3b5
 8002ce0:	19191919 	.word	0x19191919
 8002ce4:	19191919 	.word	0x19191919
 8002ce8:	b1191919 	.word	0xb1191919
 8002cec:	ad          	.byte	0xad
 8002ced:	00          	.byte	0x00
 8002cee:	f8df e190 	ldr.w	lr, [pc, #400]	; 8002e80 <HAL_GPIO_Init+0x1f0>
 8002cf2:	4576      	cmp	r6, lr
 8002cf4:	f000 8094 	beq.w	8002e20 <HAL_GPIO_Init+0x190>
 8002cf8:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8002cfc:	4576      	cmp	r6, lr
 8002cfe:	f000 808f 	beq.w	8002e20 <HAL_GPIO_Init+0x190>
 8002d02:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8002d06:	4576      	cmp	r6, lr
 8002d08:	f000 808a 	beq.w	8002e20 <HAL_GPIO_Init+0x190>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d0c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8002d10:	bf9c      	itt	ls
 8002d12:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d14:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d16:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d1a:	bf84      	itt	hi
 8002d1c:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d20:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d24:	f8de 4000 	ldr.w	r4, [lr]
 8002d28:	fa0a f90b 	lsl.w	r9, sl, fp
 8002d2c:	fa06 fb0b 	lsl.w	fp, r6, fp
 8002d30:	ea24 040b 	bic.w	r4, r4, fp
 8002d34:	ea44 0409 	orr.w	r4, r4, r9
 8002d38:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d3c:	684c      	ldr	r4, [r1, #4]
 8002d3e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002d42:	d075      	beq.n	8002e30 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d44:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d48:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d4c:	f04e 0e01 	orr.w	lr, lr, #1
 8002d50:	f8c7 e018 	str.w	lr, [r7, #24]
 8002d54:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d58:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d5c:	f00e 0e01 	and.w	lr, lr, #1
 8002d60:	f8cd e004 	str.w	lr, [sp, #4]
 8002d64:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002d68:	f023 0e03 	bic.w	lr, r3, #3
 8002d6c:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8002d70:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8002d74:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d78:	fa06 f609 	lsl.w	r6, r6, r9
 8002d7c:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d80:	f8df b100 	ldr.w	fp, [pc, #256]	; 8002e84 <HAL_GPIO_Init+0x1f4>
 8002d84:	4558      	cmp	r0, fp
 8002d86:	d00f      	beq.n	8002da8 <HAL_GPIO_Init+0x118>
 8002d88:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8002d8c:	4558      	cmp	r0, fp
 8002d8e:	d060      	beq.n	8002e52 <HAL_GPIO_Init+0x1c2>
 8002d90:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8002e88 <HAL_GPIO_Init+0x1f8>
 8002d94:	4558      	cmp	r0, fp
 8002d96:	bf0c      	ite	eq
 8002d98:	f04f 0b02 	moveq.w	fp, #2
 8002d9c:	f04f 0b03 	movne.w	fp, #3
 8002da0:	fa0b f909 	lsl.w	r9, fp, r9
 8002da4:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002da8:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dac:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dae:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002db2:	bf14      	ite	ne
 8002db4:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002db8:	ea26 060c 	biceq.w	r6, r6, ip
 8002dbc:	60ae      	str	r6, [r5, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dbe:	68ee      	ldr	r6, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dc0:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dc4:	bf14      	ite	ne
 8002dc6:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dca:	ea26 060c 	biceq.w	r6, r6, ip
 8002dce:	60ee      	str	r6, [r5, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002dd0:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002dd6:	bf14      	ite	ne
 8002dd8:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ddc:	ea26 060c 	biceq.w	r6, r6, ip
 8002de0:	606e      	str	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002de2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002de6:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002de8:	d01f      	beq.n	8002e2a <HAL_GPIO_Init+0x19a>
          SET_BIT(EXTI->IMR, iocurrent);
 8002dea:	ea44 040c 	orr.w	r4, r4, ip
 8002dee:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df0:	680e      	ldr	r6, [r1, #0]
	position++;
 8002df2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df4:	fa36 f403 	lsrs.w	r4, r6, r3
 8002df8:	f102 0204 	add.w	r2, r2, #4
 8002dfc:	f47f af5e 	bne.w	8002cbc <HAL_GPIO_Init+0x2c>
  }
}
 8002e00:	b003      	add	sp, #12
 8002e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8002e06:	4546      	cmp	r6, r8
 8002e08:	d00a      	beq.n	8002e20 <HAL_GPIO_Init+0x190>
 8002e0a:	f67f af70 	bls.w	8002cee <HAL_GPIO_Init+0x5e>
 8002e0e:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8002e8c <HAL_GPIO_Init+0x1fc>
 8002e12:	4576      	cmp	r6, lr
 8002e14:	d004      	beq.n	8002e20 <HAL_GPIO_Init+0x190>
 8002e16:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8002e1a:	4576      	cmp	r6, lr
 8002e1c:	f47f af76 	bne.w	8002d0c <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e20:	688e      	ldr	r6, [r1, #8]
 8002e22:	bb06      	cbnz	r6, 8002e66 <HAL_GPIO_Init+0x1d6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e24:	f04f 0a04 	mov.w	sl, #4
 8002e28:	e770      	b.n	8002d0c <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e2a:	ea24 040c 	bic.w	r4, r4, ip
 8002e2e:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e30:	680e      	ldr	r6, [r1, #0]
 8002e32:	e73c      	b.n	8002cae <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e34:	68cc      	ldr	r4, [r1, #12]
 8002e36:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8002e3a:	e767      	b.n	8002d0c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e3c:	68cc      	ldr	r4, [r1, #12]
 8002e3e:	f104 0a04 	add.w	sl, r4, #4
          break;
 8002e42:	e763      	b.n	8002d0c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e44:	68cc      	ldr	r4, [r1, #12]
 8002e46:	f104 0a08 	add.w	sl, r4, #8
          break;
 8002e4a:	e75f      	b.n	8002d0c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e4c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8002e50:	e75c      	b.n	8002d0c <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e52:	f04f 0b01 	mov.w	fp, #1
 8002e56:	fa0b f909 	lsl.w	r9, fp, r9
 8002e5a:	ea46 0609 	orr.w	r6, r6, r9
 8002e5e:	e7a3      	b.n	8002da8 <HAL_GPIO_Init+0x118>
      switch (GPIO_Init->Mode)
 8002e60:	f04f 0a00 	mov.w	sl, #0
 8002e64:	e752      	b.n	8002d0c <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e66:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e68:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8002e6c:	bf0c      	ite	eq
 8002e6e:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8002e70:	6144      	strne	r4, [r0, #20]
 8002e72:	e74b      	b.n	8002d0c <HAL_GPIO_Init+0x7c>
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40010400 	.word	0x40010400
 8002e7c:	10220000 	.word	0x10220000
 8002e80:	10120000 	.word	0x10120000
 8002e84:	40010800 	.word	0x40010800
 8002e88:	40011000 	.word	0x40011000
 8002e8c:	10310000 	.word	0x10310000

08002e90 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e90:	6883      	ldr	r3, [r0, #8]
 8002e92:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002e94:	bf14      	ite	ne
 8002e96:	2001      	movne	r0, #1
 8002e98:	2000      	moveq	r0, #0
 8002e9a:	4770      	bx	lr

08002e9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e9c:	b902      	cbnz	r2, 8002ea0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e9e:	0409      	lsls	r1, r1, #16
 8002ea0:	6101      	str	r1, [r0, #16]
  }
}
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ea4:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ea6:	ea01 0203 	and.w	r2, r1, r3
 8002eaa:	ea21 0103 	bic.w	r1, r1, r3
 8002eae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002eb2:	6101      	str	r1, [r0, #16]
}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop

08002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	4605      	mov	r5, r0
 8002ebc:	460e      	mov	r6, r1
 8002ebe:	4617      	mov	r7, r2
 8002ec0:	6804      	ldr	r4, [r0, #0]
 8002ec2:	1c72      	adds	r2, r6, #1
 8002ec4:	d003      	beq.n	8002ece <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x16>
 8002ec6:	e009      	b.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x24>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ec8:	6963      	ldr	r3, [r4, #20]
 8002eca:	055b      	lsls	r3, r3, #21
 8002ecc:	d428      	bmi.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x68>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ece:	6963      	ldr	r3, [r4, #20]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	f013 0302 	ands.w	r3, r3, #2
 8002ed6:	d1f7      	bne.n	8002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x10>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002ed8:	4618      	mov	r0, r3
}
 8002eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002edc:	6963      	ldr	r3, [r4, #20]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	f013 0302 	ands.w	r3, r3, #2
 8002ee4:	d0f8      	beq.n	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ee6:	6963      	ldr	r3, [r4, #20]
 8002ee8:	0558      	lsls	r0, r3, #21
 8002eea:	d419      	bmi.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eec:	f7ff f9ba 	bl	8002264 <HAL_GetTick>
 8002ef0:	1bc0      	subs	r0, r0, r7
 8002ef2:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ef4:	682c      	ldr	r4, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef6:	d301      	bcc.n	8002efc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x44>
 8002ef8:	2e00      	cmp	r6, #0
 8002efa:	d1e2      	bne.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002efc:	6963      	ldr	r3, [r4, #20]
 8002efe:	0799      	lsls	r1, r3, #30
 8002f00:	d4df      	bmi.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0xa>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f02:	2200      	movs	r2, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	2320      	movs	r3, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f06:	632a      	str	r2, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f08:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f10:	6c2b      	ldr	r3, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8002f12:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	f043 0320 	orr.w	r3, r3, #32
          return HAL_ERROR;
 8002f1a:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f1c:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f20:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f22:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f26:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f28:	6823      	ldr	r3, [r4, #0]
      return HAL_ERROR;
 8002f2a:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f30:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f32:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f34:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f36:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f3e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002f40:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f44:	f043 0304 	orr.w	r3, r3, #4
 8002f48:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f4c <I2C_RequestMemoryWrite>:
{
 8002f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f50:	4606      	mov	r6, r0
 8002f52:	460f      	mov	r7, r1
 8002f54:	4690      	mov	r8, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f56:	6805      	ldr	r5, [r0, #0]
{
 8002f58:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5a:	682b      	ldr	r3, [r5, #0]
{
 8002f5c:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f62:	602b      	str	r3, [r5, #0]
{
 8002f64:	e9dd ba0c 	ldrd	fp, sl, [sp, #48]	; 0x30
 8002f68:	f1bb 3fff 	cmp.w	fp, #4294967295
 8002f6c:	d111      	bne.n	8002f92 <I2C_RequestMemoryWrite+0x46>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f6e:	696c      	ldr	r4, [r5, #20]
 8002f70:	07e3      	lsls	r3, r4, #31
 8002f72:	d5fc      	bpl.n	8002f6e <I2C_RequestMemoryWrite+0x22>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f74:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f78:	4652      	mov	r2, sl
 8002f7a:	4659      	mov	r1, fp
 8002f7c:	4630      	mov	r0, r6
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f7e:	612f      	str	r7, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f80:	f7ff ff9a 	bl	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8002f84:	4604      	mov	r4, r0
 8002f86:	b348      	cbz	r0, 8002fdc <I2C_RequestMemoryWrite+0x90>
    return HAL_ERROR;
 8002f88:	2401      	movs	r4, #1
}
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	b003      	add	sp, #12
 8002f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f92:	696b      	ldr	r3, [r5, #20]
 8002f94:	07dc      	lsls	r4, r3, #31
 8002f96:	d4ed      	bmi.n	8002f74 <I2C_RequestMemoryWrite+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f98:	f7ff f964 	bl	8002264 <HAL_GetTick>
 8002f9c:	eba0 000a 	sub.w	r0, r0, sl
 8002fa0:	4583      	cmp	fp, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fa2:	6835      	ldr	r5, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa4:	d244      	bcs.n	8003030 <I2C_RequestMemoryWrite+0xe4>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fa6:	696b      	ldr	r3, [r5, #20]
 8002fa8:	07d9      	lsls	r1, r3, #31
 8002faa:	d4dd      	bmi.n	8002f68 <I2C_RequestMemoryWrite+0x1c>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fac:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fae:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fb0:	6332      	str	r2, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fb2:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fb6:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fba:	6c33      	ldr	r3, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8002fbc:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	f043 0320 	orr.w	r3, r3, #32
 8002fc4:	6433      	str	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fc6:	682b      	ldr	r3, [r5, #0]
 8002fc8:	05da      	lsls	r2, r3, #23
 8002fca:	d542      	bpl.n	8003052 <I2C_RequestMemoryWrite+0x106>
    return HAL_TIMEOUT;
 8002fcc:	2403      	movs	r4, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fce:	f44f 7300 	mov.w	r3, #512	; 0x200
}
 8002fd2:	4620      	mov	r0, r4
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fd4:	6433      	str	r3, [r6, #64]	; 0x40
}
 8002fd6:	b003      	add	sp, #12
 8002fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fdc:	6833      	ldr	r3, [r6, #0]
 8002fde:	9001      	str	r0, [sp, #4]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	9201      	str	r2, [sp, #4]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	9201      	str	r2, [sp, #4]
 8002fe8:	9a01      	ldr	r2, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fea:	f1bb 3fff 	cmp.w	fp, #4294967295
 8002fee:	d15c      	bne.n	80030aa <I2C_RequestMemoryWrite+0x15e>
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	0611      	lsls	r1, r2, #24
 8002ff4:	d423      	bmi.n	800303e <I2C_RequestMemoryWrite+0xf2>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	0552      	lsls	r2, r2, #21
 8002ffa:	d5f9      	bpl.n	8002ff0 <I2C_RequestMemoryWrite+0xa4>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffc:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ffe:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8003002:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003004:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003006:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003008:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003010:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8003012:	f042 0204 	orr.w	r2, r2, #4
 8003016:	6432      	str	r2, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003018:	2100      	movs	r1, #0
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301a:	6c32      	ldr	r2, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800301c:	f886 103c 	strb.w	r1, [r6, #60]	; 0x3c
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003020:	2a04      	cmp	r2, #4
 8003022:	d1b1      	bne.n	8002f88 <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003024:	681a      	ldr	r2, [r3, #0]
    return HAL_ERROR;
 8003026:	2401      	movs	r4, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e7ac      	b.n	8002f8a <I2C_RequestMemoryWrite+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003030:	f1bb 0f00 	cmp.w	fp, #0
 8003034:	d198      	bne.n	8002f68 <I2C_RequestMemoryWrite+0x1c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003036:	696b      	ldr	r3, [r5, #20]
 8003038:	07d9      	lsls	r1, r3, #31
 800303a:	d495      	bmi.n	8002f68 <I2C_RequestMemoryWrite+0x1c>
 800303c:	e7b6      	b.n	8002fac <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800303e:	f1b9 0f01 	cmp.w	r9, #1
 8003042:	d10b      	bne.n	800305c <I2C_RequestMemoryWrite+0x110>
}
 8003044:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003046:	fa5f f288 	uxtb.w	r2, r8
 800304a:	611a      	str	r2, [r3, #16]
}
 800304c:	b003      	add	sp, #12
 800304e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_TIMEOUT;
 8003052:	2403      	movs	r4, #3
}
 8003054:	4620      	mov	r0, r4
 8003056:	b003      	add	sp, #12
 8003058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800305c:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003060:	611a      	str	r2, [r3, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003062:	f1bb 3fff 	cmp.w	fp, #4294967295
 8003066:	d13e      	bne.n	80030e6 <I2C_RequestMemoryWrite+0x19a>
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	0610      	lsls	r0, r2, #24
 800306c:	d4ea      	bmi.n	8003044 <I2C_RequestMemoryWrite+0xf8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	0551      	lsls	r1, r2, #21
 8003072:	d5f9      	bpl.n	8003068 <I2C_RequestMemoryWrite+0x11c>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003074:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003076:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800307a:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800307c:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800307e:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003080:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003084:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003088:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800308a:	f042 0204 	orr.w	r2, r2, #4
 800308e:	6432      	str	r2, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003090:	2100      	movs	r1, #0
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003092:	6c32      	ldr	r2, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003094:	f886 103c 	strb.w	r1, [r6, #60]	; 0x3c
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003098:	2a04      	cmp	r2, #4
 800309a:	f47f af75 	bne.w	8002f88 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309e:	681a      	ldr	r2, [r3, #0]
      return HAL_ERROR;
 80030a0:	2401      	movs	r4, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e76f      	b.n	8002f8a <I2C_RequestMemoryWrite+0x3e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	0617      	lsls	r7, r2, #24
 80030ae:	d4c6      	bmi.n	800303e <I2C_RequestMemoryWrite+0xf2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	0550      	lsls	r0, r2, #21
 80030b4:	d4a2      	bmi.n	8002ffc <I2C_RequestMemoryWrite+0xb0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7ff f8d5 	bl	8002264 <HAL_GetTick>
 80030ba:	eba0 030a 	sub.w	r3, r0, sl
 80030be:	459b      	cmp	fp, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030c0:	6833      	ldr	r3, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	d302      	bcc.n	80030ca <I2C_RequestMemoryWrite+0x17e>
 80030c4:	f1bb 0f00 	cmp.w	fp, #0
 80030c8:	d18f      	bne.n	8002fea <I2C_RequestMemoryWrite+0x9e>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 80030d0:	d18b      	bne.n	8002fea <I2C_RequestMemoryWrite+0x9e>
          hi2c->State               = HAL_I2C_STATE_READY;
 80030d2:	2120      	movs	r1, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030d4:	6332      	str	r2, [r6, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030d6:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030da:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030de:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80030e0:	430a      	orrs	r2, r1
 80030e2:	6432      	str	r2, [r6, #64]	; 0x40
          return HAL_ERROR;
 80030e4:	e798      	b.n	8003018 <I2C_RequestMemoryWrite+0xcc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	0612      	lsls	r2, r2, #24
 80030ea:	d4ab      	bmi.n	8003044 <I2C_RequestMemoryWrite+0xf8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	0555      	lsls	r5, r2, #21
 80030f0:	d4c0      	bmi.n	8003074 <I2C_RequestMemoryWrite+0x128>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f2:	f7ff f8b7 	bl	8002264 <HAL_GetTick>
 80030f6:	eba0 030a 	sub.w	r3, r0, sl
 80030fa:	459b      	cmp	fp, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030fc:	6833      	ldr	r3, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fe:	d302      	bcc.n	8003106 <I2C_RequestMemoryWrite+0x1ba>
 8003100:	f1bb 0f00 	cmp.w	fp, #0
 8003104:	d1ad      	bne.n	8003062 <I2C_RequestMemoryWrite+0x116>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 800310c:	d1a9      	bne.n	8003062 <I2C_RequestMemoryWrite+0x116>
          hi2c->State               = HAL_I2C_STATE_READY;
 800310e:	2120      	movs	r1, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003110:	6332      	str	r2, [r6, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003112:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003116:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800311c:	430a      	orrs	r2, r1
 800311e:	6432      	str	r2, [r6, #64]	; 0x40
          return HAL_ERROR;
 8003120:	e7b6      	b.n	8003090 <I2C_RequestMemoryWrite+0x144>
 8003122:	bf00      	nop

08003124 <I2C_RequestMemoryRead>:
{
 8003124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003128:	4606      	mov	r6, r0
 800312a:	468b      	mov	fp, r1
 800312c:	4690      	mov	r8, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800312e:	6805      	ldr	r5, [r0, #0]
{
 8003130:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003132:	682b      	ldr	r3, [r5, #0]
{
 8003134:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800313a:	602b      	str	r3, [r5, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800313c:	682b      	ldr	r3, [r5, #0]
{
 800313e:	e9dd 7a0c 	ldrd	r7, sl, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003146:	602b      	str	r3, [r5, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003148:	1c79      	adds	r1, r7, #1
 800314a:	d111      	bne.n	8003170 <I2C_RequestMemoryRead+0x4c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800314c:	696c      	ldr	r4, [r5, #20]
 800314e:	07e2      	lsls	r2, r4, #31
 8003150:	d5fc      	bpl.n	800314c <I2C_RequestMemoryRead+0x28>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003152:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003156:	4652      	mov	r2, sl
 8003158:	4639      	mov	r1, r7
 800315a:	4630      	mov	r0, r6
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800315c:	612b      	str	r3, [r5, #16]
 800315e:	fa5f fb8b 	uxtb.w	fp, fp
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003162:	f7ff fea9 	bl	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8003166:	b338      	cbz	r0, 80031b8 <I2C_RequestMemoryRead+0x94>
    return HAL_ERROR;
 8003168:	2001      	movs	r0, #1
}
 800316a:	b003      	add	sp, #12
 800316c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003170:	696b      	ldr	r3, [r5, #20]
 8003172:	07db      	lsls	r3, r3, #31
 8003174:	d4ed      	bmi.n	8003152 <I2C_RequestMemoryRead+0x2e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003176:	f7ff f875 	bl	8002264 <HAL_GetTick>
 800317a:	eba0 000a 	sub.w	r0, r0, sl
 800317e:	4287      	cmp	r7, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003180:	6835      	ldr	r5, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003182:	d242      	bcs.n	800320a <I2C_RequestMemoryRead+0xe6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003184:	696b      	ldr	r3, [r5, #20]
 8003186:	07dc      	lsls	r4, r3, #31
 8003188:	d4de      	bmi.n	8003148 <I2C_RequestMemoryRead+0x24>
          hi2c->PreviousState     = I2C_STATE_NONE;
 800318a:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 800318c:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 800318e:	6332      	str	r2, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003190:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003194:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003198:	6c33      	ldr	r3, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 800319a:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800319e:	f043 0320 	orr.w	r3, r3, #32
 80031a2:	6433      	str	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	05d8      	lsls	r0, r3, #23
 80031a8:	d561      	bpl.n	800326e <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031aa:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 80031ae:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b0:	6433      	str	r3, [r6, #64]	; 0x40
}
 80031b2:	b003      	add	sp, #12
 80031b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b8:	6834      	ldr	r4, [r6, #0]
 80031ba:	9001      	str	r0, [sp, #4]
 80031bc:	6963      	ldr	r3, [r4, #20]
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	69a3      	ldr	r3, [r4, #24]
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031c6:	1c78      	adds	r0, r7, #1
 80031c8:	d179      	bne.n	80032be <I2C_RequestMemoryRead+0x19a>
 80031ca:	6963      	ldr	r3, [r4, #20]
 80031cc:	0619      	lsls	r1, r3, #24
 80031ce:	d422      	bmi.n	8003216 <I2C_RequestMemoryRead+0xf2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031d0:	6963      	ldr	r3, [r4, #20]
 80031d2:	055a      	lsls	r2, r3, #21
 80031d4:	d5f9      	bpl.n	80031ca <I2C_RequestMemoryRead+0xa6>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80031d6:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d8:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80031dc:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031de:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80031e0:	6333      	str	r3, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031e2:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e6:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ea:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80031ec:	f043 0304 	orr.w	r3, r3, #4
 80031f0:	6433      	str	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80031f2:	2200      	movs	r2, #0
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f4:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80031f6:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d1b4      	bne.n	8003168 <I2C_RequestMemoryRead+0x44>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fe:	6823      	ldr	r3, [r4, #0]
    return HAL_ERROR;
 8003200:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003206:	6023      	str	r3, [r4, #0]
 8003208:	e7af      	b.n	800316a <I2C_RequestMemoryRead+0x46>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320a:	2f00      	cmp	r7, #0
 800320c:	d19c      	bne.n	8003148 <I2C_RequestMemoryRead+0x24>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800320e:	696b      	ldr	r3, [r5, #20]
 8003210:	07dc      	lsls	r4, r3, #31
 8003212:	d499      	bmi.n	8003148 <I2C_RequestMemoryRead+0x24>
 8003214:	e7b9      	b.n	800318a <I2C_RequestMemoryRead+0x66>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003216:	f1b9 0f01 	cmp.w	r9, #1
 800321a:	d12c      	bne.n	8003276 <I2C_RequestMemoryRead+0x152>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800321c:	fa5f f388 	uxtb.w	r3, r8
 8003220:	6123      	str	r3, [r4, #16]
 8003222:	1c78      	adds	r0, r7, #1
 8003224:	d16a      	bne.n	80032fc <I2C_RequestMemoryRead+0x1d8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003226:	6963      	ldr	r3, [r4, #20]
 8003228:	0619      	lsls	r1, r3, #24
 800322a:	d430      	bmi.n	800328e <I2C_RequestMemoryRead+0x16a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800322c:	6963      	ldr	r3, [r4, #20]
 800322e:	055a      	lsls	r2, r3, #21
 8003230:	d5f9      	bpl.n	8003226 <I2C_RequestMemoryRead+0x102>
 8003232:	e7d0      	b.n	80031d6 <I2C_RequestMemoryRead+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003234:	6963      	ldr	r3, [r4, #20]
 8003236:	07db      	lsls	r3, r3, #31
 8003238:	d432      	bmi.n	80032a0 <I2C_RequestMemoryRead+0x17c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7ff f813 	bl	8002264 <HAL_GetTick>
 800323e:	eba0 030a 	sub.w	r3, r0, sl
 8003242:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003244:	6834      	ldr	r4, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003246:	d237      	bcs.n	80032b8 <I2C_RequestMemoryRead+0x194>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003248:	6963      	ldr	r3, [r4, #20]
 800324a:	07dd      	lsls	r5, r3, #31
 800324c:	d423      	bmi.n	8003296 <I2C_RequestMemoryRead+0x172>
          hi2c->PreviousState     = I2C_STATE_NONE;
 800324e:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8003250:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003252:	6332      	str	r2, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003254:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003258:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800325c:	6c33      	ldr	r3, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 800325e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003262:	f043 0320 	orr.w	r3, r3, #32
 8003266:	6433      	str	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	05d8      	lsls	r0, r3, #23
 800326c:	d49d      	bmi.n	80031aa <I2C_RequestMemoryRead+0x86>
    return HAL_TIMEOUT;
 800326e:	2003      	movs	r0, #3
}
 8003270:	b003      	add	sp, #12
 8003272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003276:	ea4f 2318 	mov.w	r3, r8, lsr #8
 800327a:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800327c:	1c78      	adds	r0, r7, #1
 800327e:	d153      	bne.n	8003328 <I2C_RequestMemoryRead+0x204>
 8003280:	6963      	ldr	r3, [r4, #20]
 8003282:	0619      	lsls	r1, r3, #24
 8003284:	d4ca      	bmi.n	800321c <I2C_RequestMemoryRead+0xf8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003286:	6963      	ldr	r3, [r4, #20]
 8003288:	055a      	lsls	r2, r3, #21
 800328a:	d5f9      	bpl.n	8003280 <I2C_RequestMemoryRead+0x15c>
 800328c:	e7a3      	b.n	80031d6 <I2C_RequestMemoryRead+0xb2>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003294:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003296:	1c79      	adds	r1, r7, #1
 8003298:	d1cc      	bne.n	8003234 <I2C_RequestMemoryRead+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800329a:	6963      	ldr	r3, [r4, #20]
 800329c:	07da      	lsls	r2, r3, #31
 800329e:	d5fc      	bpl.n	800329a <I2C_RequestMemoryRead+0x176>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032a0:	f04b 0301 	orr.w	r3, fp, #1
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032a4:	4652      	mov	r2, sl
 80032a6:	4639      	mov	r1, r7
 80032a8:	4630      	mov	r0, r6
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032aa:	6123      	str	r3, [r4, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ac:	f7ff fe04 	bl	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
    return HAL_TIMEOUT;
 80032b0:	3800      	subs	r0, #0
 80032b2:	bf18      	it	ne
 80032b4:	2001      	movne	r0, #1
 80032b6:	e758      	b.n	800316a <I2C_RequestMemoryRead+0x46>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b8:	2f00      	cmp	r7, #0
 80032ba:	d1ec      	bne.n	8003296 <I2C_RequestMemoryRead+0x172>
 80032bc:	e7c4      	b.n	8003248 <I2C_RequestMemoryRead+0x124>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032be:	6963      	ldr	r3, [r4, #20]
 80032c0:	061b      	lsls	r3, r3, #24
 80032c2:	d4a8      	bmi.n	8003216 <I2C_RequestMemoryRead+0xf2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032c4:	6963      	ldr	r3, [r4, #20]
 80032c6:	055d      	lsls	r5, r3, #21
 80032c8:	d485      	bmi.n	80031d6 <I2C_RequestMemoryRead+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ca:	f7fe ffcb 	bl	8002264 <HAL_GetTick>
 80032ce:	eba0 030a 	sub.w	r3, r0, sl
 80032d2:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032d4:	6834      	ldr	r4, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d6:	d302      	bcc.n	80032de <I2C_RequestMemoryRead+0x1ba>
 80032d8:	2f00      	cmp	r7, #0
 80032da:	f47f af74 	bne.w	80031c6 <I2C_RequestMemoryRead+0xa2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032de:	6963      	ldr	r3, [r4, #20]
 80032e0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80032e4:	f47f af6f 	bne.w	80031c6 <I2C_RequestMemoryRead+0xa2>
          hi2c->State               = HAL_I2C_STATE_READY;
 80032e8:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ea:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032ec:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f0:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80032f6:	4313      	orrs	r3, r2
 80032f8:	6433      	str	r3, [r6, #64]	; 0x40
          return HAL_ERROR;
 80032fa:	e77a      	b.n	80031f2 <I2C_RequestMemoryRead+0xce>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032fc:	6963      	ldr	r3, [r4, #20]
 80032fe:	061b      	lsls	r3, r3, #24
 8003300:	d4c5      	bmi.n	800328e <I2C_RequestMemoryRead+0x16a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003302:	6963      	ldr	r3, [r4, #20]
 8003304:	055d      	lsls	r5, r3, #21
 8003306:	f53f af66 	bmi.w	80031d6 <I2C_RequestMemoryRead+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330a:	f7fe ffab 	bl	8002264 <HAL_GetTick>
 800330e:	eba0 030a 	sub.w	r3, r0, sl
 8003312:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003314:	6834      	ldr	r4, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003316:	d301      	bcc.n	800331c <I2C_RequestMemoryRead+0x1f8>
 8003318:	2f00      	cmp	r7, #0
 800331a:	d182      	bne.n	8003222 <I2C_RequestMemoryRead+0xfe>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800331c:	6963      	ldr	r3, [r4, #20]
 800331e:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003322:	f47f af7e 	bne.w	8003222 <I2C_RequestMemoryRead+0xfe>
 8003326:	e7df      	b.n	80032e8 <I2C_RequestMemoryRead+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003328:	6963      	ldr	r3, [r4, #20]
 800332a:	061b      	lsls	r3, r3, #24
 800332c:	f53f af76 	bmi.w	800321c <I2C_RequestMemoryRead+0xf8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003330:	6963      	ldr	r3, [r4, #20]
 8003332:	055d      	lsls	r5, r3, #21
 8003334:	f53f af4f 	bmi.w	80031d6 <I2C_RequestMemoryRead+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003338:	f7fe ff94 	bl	8002264 <HAL_GetTick>
 800333c:	eba0 030a 	sub.w	r3, r0, sl
 8003340:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003342:	6834      	ldr	r4, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003344:	d301      	bcc.n	800334a <I2C_RequestMemoryRead+0x226>
 8003346:	2f00      	cmp	r7, #0
 8003348:	d198      	bne.n	800327c <I2C_RequestMemoryRead+0x158>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800334a:	6963      	ldr	r3, [r4, #20]
 800334c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003350:	d194      	bne.n	800327c <I2C_RequestMemoryRead+0x158>
 8003352:	e7c9      	b.n	80032e8 <I2C_RequestMemoryRead+0x1c4>

08003354 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003354:	2800      	cmp	r0, #0
 8003356:	f000 80b7 	beq.w	80034c8 <HAL_I2C_Init+0x174>
{
 800335a:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800335c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003360:	4604      	mov	r4, r0
 8003362:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8096 	beq.w	8003498 <HAL_I2C_Init+0x144>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800336c:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800336e:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003370:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800338a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800338c:	f000 fe70 	bl	8004070 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003390:	6865      	ldr	r5, [r4, #4]
 8003392:	4b4e      	ldr	r3, [pc, #312]	; (80034cc <HAL_I2C_Init+0x178>)
 8003394:	429d      	cmp	r5, r3
 8003396:	d84d      	bhi.n	8003434 <HAL_I2C_Init+0xe0>
 8003398:	4b4d      	ldr	r3, [pc, #308]	; (80034d0 <HAL_I2C_Init+0x17c>)
 800339a:	4298      	cmp	r0, r3
 800339c:	d97a      	bls.n	8003494 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800339e:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 80033a0:	4d4c      	ldr	r5, [pc, #304]	; (80034d4 <HAL_I2C_Init+0x180>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033a2:	f640 7cfc 	movw	ip, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 80033a6:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033aa:	1e43      	subs	r3, r0, #1
 80033ac:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80033b2:	0ca8      	lsrs	r0, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b4:	6851      	ldr	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033b6:	3001      	adds	r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80033bc:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80033c0:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c2:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033c4:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80033ca:	4301      	orrs	r1, r0
 80033cc:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033ce:	69d1      	ldr	r1, [r2, #28]
 80033d0:	ea13 0f0c 	tst.w	r3, ip
 80033d4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80033d8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80033dc:	d161      	bne.n	80034a2 <HAL_I2C_Init+0x14e>
 80033de:	2304      	movs	r3, #4
 80033e0:	430b      	orrs	r3, r1
 80033e2:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033e4:	6811      	ldr	r1, [r2, #0]
 80033e6:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80033ea:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80033ee:	4303      	orrs	r3, r0
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033f4:	6891      	ldr	r1, [r2, #8]
 80033f6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80033fa:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80033fe:	4303      	orrs	r3, r0
 8003400:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003404:	430b      	orrs	r3, r1
 8003406:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003408:	68d0      	ldr	r0, [r2, #12]
 800340a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800340e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003412:	430b      	orrs	r3, r1
 8003414:	4303      	orrs	r3, r0
 8003416:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003418:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341a:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003422:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003426:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800342a:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800342c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8003430:	4608      	mov	r0, r1
}
 8003432:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003434:	4b28      	ldr	r3, [pc, #160]	; (80034d8 <HAL_I2C_Init+0x184>)
 8003436:	4298      	cmp	r0, r3
 8003438:	d92c      	bls.n	8003494 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800343a:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800343e:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <HAL_I2C_Init+0x180>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003440:	4926      	ldr	r1, [pc, #152]	; (80034dc <HAL_I2C_Init+0x188>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003442:	fba3 3c00 	umull	r3, ip, r3, r0
 8003446:	ea4f 439c 	mov.w	r3, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800344a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800344e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003450:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003454:	6851      	ldr	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003456:	099b      	lsrs	r3, r3, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003458:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800345c:	ea41 419c 	orr.w	r1, r1, ip, lsr #18
 8003460:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003462:	6a11      	ldr	r1, [r2, #32]
 8003464:	3301      	adds	r3, #1
 8003466:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800346a:	430b      	orrs	r3, r1
 800346c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800346e:	69d1      	ldr	r1, [r2, #28]
 8003470:	68a3      	ldr	r3, [r4, #8]
 8003472:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003476:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800347a:	b9ab      	cbnz	r3, 80034a8 <HAL_I2C_Init+0x154>
 800347c:	1e43      	subs	r3, r0, #1
 800347e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003482:	fbb3 f3f5 	udiv	r3, r3, r5
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	b1d3      	cbz	r3, 80034c4 <HAL_I2C_Init+0x170>
 800348e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003492:	e7a5      	b.n	80033e0 <HAL_I2C_Init+0x8c>
    return HAL_ERROR;
 8003494:	2001      	movs	r0, #1
}
 8003496:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003498:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800349c:	f7fe fcfe 	bl	8001e9c <HAL_I2C_MspInit>
 80034a0:	e764      	b.n	800336c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a6:	e79b      	b.n	80033e0 <HAL_I2C_Init+0x8c>
 80034a8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80034ac:	1e43      	subs	r3, r0, #1
 80034ae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80034b2:	fbb3 f3f5 	udiv	r3, r3, r5
 80034b6:	3301      	adds	r3, #1
 80034b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034bc:	b113      	cbz	r3, 80034c4 <HAL_I2C_Init+0x170>
 80034be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034c2:	e78d      	b.n	80033e0 <HAL_I2C_Init+0x8c>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e78b      	b.n	80033e0 <HAL_I2C_Init+0x8c>
    return HAL_ERROR;
 80034c8:	2001      	movs	r0, #1
}
 80034ca:	4770      	bx	lr
 80034cc:	000186a0 	.word	0x000186a0
 80034d0:	001e847f 	.word	0x001e847f
 80034d4:	431bde83 	.word	0x431bde83
 80034d8:	003d08ff 	.word	0x003d08ff
 80034dc:	10624dd3 	.word	0x10624dd3

080034e0 <HAL_I2C_Mem_Write>:
{
 80034e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e4:	4604      	mov	r4, r0
 80034e6:	b082      	sub	sp, #8
 80034e8:	4699      	mov	r9, r3
 80034ea:	460f      	mov	r7, r1
 80034ec:	4690      	mov	r8, r2
 80034ee:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80034f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80034f4:	f7fe feb6 	bl	8002264 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d004      	beq.n	800350a <HAL_I2C_Mem_Write+0x2a>
    return HAL_BUSY;
 8003500:	2702      	movs	r7, #2
}
 8003502:	4638      	mov	r0, r7
 8003504:	b002      	add	sp, #8
 8003506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800350a:	4605      	mov	r5, r0
 800350c:	6820      	ldr	r0, [r4, #0]
 800350e:	6983      	ldr	r3, [r0, #24]
 8003510:	079a      	lsls	r2, r3, #30
 8003512:	d51a      	bpl.n	800354a <HAL_I2C_Mem_Write+0x6a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003514:	f7fe fea6 	bl	8002264 <HAL_GetTick>
 8003518:	1b40      	subs	r0, r0, r5
 800351a:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800351c:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351e:	d9f6      	bls.n	800350e <HAL_I2C_Mem_Write+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003520:	6983      	ldr	r3, [r0, #24]
 8003522:	43db      	mvns	r3, r3
 8003524:	f013 0302 	ands.w	r3, r3, #2
 8003528:	d1f1      	bne.n	800350e <HAL_I2C_Mem_Write+0x2e>
      return HAL_BUSY;
 800352a:	2702      	movs	r7, #2
          hi2c->State             = HAL_I2C_STATE_READY;
 800352c:	2220      	movs	r2, #32
}
 800352e:	4638      	mov	r0, r7
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003530:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003532:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003536:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          __HAL_UNLOCK(hi2c);
 800353a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800353e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003540:	4313      	orrs	r3, r2
 8003542:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003544:	b002      	add	sp, #8
 8003546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800354a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800354e:	2b01      	cmp	r3, #1
 8003550:	d0d6      	beq.n	8003500 <HAL_I2C_Mem_Write+0x20>
 8003552:	2301      	movs	r3, #1
 8003554:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003558:	6803      	ldr	r3, [r0, #0]
 800355a:	07db      	lsls	r3, r3, #31
 800355c:	f140 808f 	bpl.w	800367e <HAL_I2C_Mem_Write+0x19e>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003560:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003562:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003566:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800356a:	f04f 0821 	mov.w	r8, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800356e:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003570:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003572:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003574:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8003578:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 800357a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800357c:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800357e:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003582:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003586:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800358a:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800358e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003592:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003594:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003596:	4863      	ldr	r0, [pc, #396]	; (8003724 <HAL_I2C_Mem_Write+0x244>)
 8003598:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800359a:	4620      	mov	r0, r4
 800359c:	f7ff fcd6 	bl	8002f4c <I2C_RequestMemoryWrite>
 80035a0:	4607      	mov	r7, r0
 80035a2:	bb00      	cbnz	r0, 80035e6 <HAL_I2C_Mem_Write+0x106>
    while (hi2c->XferSize > 0U)
 80035a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80b9 	beq.w	800371e <HAL_I2C_Mem_Write+0x23e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	1c71      	adds	r1, r6, #1
 80035b0:	d16a      	bne.n	8003688 <HAL_I2C_Mem_Write+0x1a8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	0612      	lsls	r2, r2, #24
 80035b6:	d41b      	bmi.n	80035f0 <HAL_I2C_Mem_Write+0x110>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	0550      	lsls	r0, r2, #21
 80035bc:	d5f9      	bpl.n	80035b2 <HAL_I2C_Mem_Write+0xd2>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80035be:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035c0:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80035c4:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035c6:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80035c8:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035ca:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ce:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80035d4:	f042 0204 	orr.w	r2, r2, #4
 80035d8:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80035da:	2100      	movs	r1, #0
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80035de:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035e2:	2a04      	cmp	r2, #4
 80035e4:	d079      	beq.n	80036da <HAL_I2C_Mem_Write+0x1fa>
      return HAL_ERROR;
 80035e6:	2701      	movs	r7, #1
}
 80035e8:	4638      	mov	r0, r7
 80035ea:	b002      	add	sp, #8
 80035ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80035f2:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035f6:	4602      	mov	r2, r0
 80035f8:	f812 eb01 	ldrb.w	lr, [r2], #1
      hi2c->XferSize--;
 80035fc:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003600:	f8c3 e010 	str.w	lr, [r3, #16]
      hi2c->pBuffPtr++;
 8003604:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003606:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003608:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 800360a:	3a01      	subs	r2, #1
 800360c:	b292      	uxth	r2, r2
 800360e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003610:	695a      	ldr	r2, [r3, #20]
      hi2c->XferSize--;
 8003612:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003614:	0752      	lsls	r2, r2, #29
 8003616:	d52f      	bpl.n	8003678 <HAL_I2C_Mem_Write+0x198>
 8003618:	bb09      	cbnz	r1, 800365e <HAL_I2C_Mem_Write+0x17e>
 800361a:	1c72      	adds	r2, r6, #1
 800361c:	d163      	bne.n	80036e6 <HAL_I2C_Mem_Write+0x206>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	0750      	lsls	r0, r2, #29
 8003622:	d44d      	bmi.n	80036c0 <HAL_I2C_Mem_Write+0x1e0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	0551      	lsls	r1, r2, #21
 8003628:	d5f9      	bpl.n	800361e <HAL_I2C_Mem_Write+0x13e>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800362a:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800362c:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8003630:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003632:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003634:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003636:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800363e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003640:	f042 0204 	orr.w	r2, r2, #4
 8003644:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003646:	2100      	movs	r1, #0
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003648:	6c22      	ldr	r2, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800364a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364e:	2a04      	cmp	r2, #4
 8003650:	d1c9      	bne.n	80035e6 <HAL_I2C_Mem_Write+0x106>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003652:	681a      	ldr	r2, [r3, #0]
      return HAL_ERROR;
 8003654:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e751      	b.n	8003502 <HAL_I2C_Mem_Write+0x22>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800365e:	7842      	ldrb	r2, [r0, #1]
        hi2c->XferSize--;
 8003660:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003664:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8003666:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003668:	fa1f f18c 	uxth.w	r1, ip
        hi2c->XferCount--;
 800366c:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 800366e:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8003670:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8003672:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003674:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003676:	8562      	strh	r2, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003678:	2900      	cmp	r1, #0
 800367a:	d198      	bne.n	80035ae <HAL_I2C_Mem_Write+0xce>
 800367c:	e7cd      	b.n	800361a <HAL_I2C_Mem_Write+0x13a>
      __HAL_I2C_ENABLE(hi2c);
 800367e:	6803      	ldr	r3, [r0, #0]
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6003      	str	r3, [r0, #0]
 8003686:	e76b      	b.n	8003560 <HAL_I2C_Mem_Write+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	0611      	lsls	r1, r2, #24
 800368c:	d4b0      	bmi.n	80035f0 <HAL_I2C_Mem_Write+0x110>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800368e:	695a      	ldr	r2, [r3, #20]
 8003690:	0550      	lsls	r0, r2, #21
 8003692:	d494      	bmi.n	80035be <HAL_I2C_Mem_Write+0xde>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003694:	f7fe fde6 	bl	8002264 <HAL_GetTick>
 8003698:	1b40      	subs	r0, r0, r5
 800369a:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800369c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369e:	d301      	bcc.n	80036a4 <HAL_I2C_Mem_Write+0x1c4>
 80036a0:	2e00      	cmp	r6, #0
 80036a2:	d184      	bne.n	80035ae <HAL_I2C_Mem_Write+0xce>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 80036aa:	d180      	bne.n	80035ae <HAL_I2C_Mem_Write+0xce>
          hi2c->State               = HAL_I2C_STATE_READY;
 80036ac:	2120      	movs	r1, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ae:	6322      	str	r2, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036b0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80036ba:	430a      	orrs	r2, r1
 80036bc:	6422      	str	r2, [r4, #64]	; 0x40
          return HAL_ERROR;
 80036be:	e78c      	b.n	80035da <HAL_I2C_Mem_Write+0xfa>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c0:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ca:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80036d0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 80036d8:	e713      	b.n	8003502 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036da:	681a      	ldr	r2, [r3, #0]
        return HAL_ERROR;
 80036dc:	2701      	movs	r7, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e70d      	b.n	8003502 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	0752      	lsls	r2, r2, #29
 80036ea:	d4e9      	bmi.n	80036c0 <HAL_I2C_Mem_Write+0x1e0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	0551      	lsls	r1, r2, #21
 80036f0:	d49b      	bmi.n	800362a <HAL_I2C_Mem_Write+0x14a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f2:	f7fe fdb7 	bl	8002264 <HAL_GetTick>
 80036f6:	1b43      	subs	r3, r0, r5
 80036f8:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036fa:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fc:	d301      	bcc.n	8003702 <HAL_I2C_Mem_Write+0x222>
 80036fe:	2e00      	cmp	r6, #0
 8003700:	d18b      	bne.n	800361a <HAL_I2C_Mem_Write+0x13a>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	f012 0204 	ands.w	r2, r2, #4
 8003708:	d187      	bne.n	800361a <HAL_I2C_Mem_Write+0x13a>
          hi2c->State               = HAL_I2C_STATE_READY;
 800370a:	2120      	movs	r1, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800370c:	6322      	str	r2, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800370e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003712:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003716:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003718:	430a      	orrs	r2, r1
 800371a:	6422      	str	r2, [r4, #64]	; 0x40
          return HAL_ERROR;
 800371c:	e793      	b.n	8003646 <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	e77b      	b.n	800361a <HAL_I2C_Mem_Write+0x13a>
 8003722:	bf00      	nop
 8003724:	ffff0000 	.word	0xffff0000

08003728 <HAL_I2C_Mem_Read>:
{
 8003728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count = 0U;
 800372c:	2400      	movs	r4, #0
{
 800372e:	b088      	sub	sp, #32
  __IO uint32_t count = 0U;
 8003730:	9403      	str	r4, [sp, #12]
{
 8003732:	4604      	mov	r4, r0
 8003734:	4699      	mov	r9, r3
 8003736:	460f      	mov	r7, r1
 8003738:	4690      	mov	r8, r2
 800373a:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 800373e:	9e12      	ldr	r6, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8003740:	f7fe fd90 	bl	8002264 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003744:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003748:	2b20      	cmp	r3, #32
 800374a:	d004      	beq.n	8003756 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 800374c:	2702      	movs	r7, #2
}
 800374e:	4638      	mov	r0, r7
 8003750:	b008      	add	sp, #32
 8003752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003756:	4605      	mov	r5, r0
 8003758:	6820      	ldr	r0, [r4, #0]
 800375a:	6983      	ldr	r3, [r0, #24]
 800375c:	079a      	lsls	r2, r3, #30
 800375e:	d51a      	bpl.n	8003796 <HAL_I2C_Mem_Read+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003760:	f7fe fd80 	bl	8002264 <HAL_GetTick>
 8003764:	1b40      	subs	r0, r0, r5
 8003766:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003768:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376a:	d9f6      	bls.n	800375a <HAL_I2C_Mem_Read+0x32>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800376c:	6983      	ldr	r3, [r0, #24]
 800376e:	43db      	mvns	r3, r3
 8003770:	f013 0302 	ands.w	r3, r3, #2
 8003774:	d1f1      	bne.n	800375a <HAL_I2C_Mem_Read+0x32>
      return HAL_BUSY;
 8003776:	2702      	movs	r7, #2
          hi2c->State             = HAL_I2C_STATE_READY;
 8003778:	2220      	movs	r2, #32
}
 800377a:	4638      	mov	r0, r7
          hi2c->PreviousState     = I2C_STATE_NONE;
 800377c:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800377e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003782:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          __HAL_UNLOCK(hi2c);
 8003786:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800378a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800378c:	4313      	orrs	r3, r2
 800378e:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003790:	b008      	add	sp, #32
 8003792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003796:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800379a:	2b01      	cmp	r3, #1
 800379c:	d0d6      	beq.n	800374c <HAL_I2C_Mem_Read+0x24>
 800379e:	2301      	movs	r3, #1
 80037a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037a4:	6803      	ldr	r3, [r0, #0]
 80037a6:	07db      	lsls	r3, r3, #31
 80037a8:	d539      	bpl.n	800381e <HAL_I2C_Mem_Read+0xf6>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037aa:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ac:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b0:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037b4:	f04f 0822 	mov.w	r8, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037b8:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ba:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037bc:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037be:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 80037c2:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 80037c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80037c6:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037c8:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037cc:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037d0:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d4:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80037d8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037dc:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80037de:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037e0:	4895      	ldr	r0, [pc, #596]	; (8003a38 <HAL_I2C_Mem_Read+0x310>)
 80037e2:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037e4:	4620      	mov	r0, r4
 80037e6:	f7ff fc9d 	bl	8003124 <I2C_RequestMemoryRead>
 80037ea:	4607      	mov	r7, r0
 80037ec:	2800      	cmp	r0, #0
 80037ee:	f040 8091 	bne.w	8003914 <HAL_I2C_Mem_Read+0x1ec>
    if (hi2c->XferSize == 0U)
 80037f2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80037f4:	b9c2      	cbnz	r2, 8003828 <HAL_I2C_Mem_Read+0x100>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	9004      	str	r0, [sp, #16]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	9204      	str	r2, [sp, #16]
 80037fe:	699a      	ldr	r2, [r3, #24]
 8003800:	9204      	str	r2, [sp, #16]
 8003802:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800380c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800380e:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8003810:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003814:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003818:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800381c:	e797      	b.n	800374e <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 800381e:	6803      	ldr	r3, [r0, #0]
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6003      	str	r3, [r0, #0]
 8003826:	e7c0      	b.n	80037aa <HAL_I2C_Mem_Read+0x82>
    else if (hi2c->XferSize == 1U)
 8003828:	2a01      	cmp	r2, #1
 800382a:	f000 815b 	beq.w	8003ae4 <HAL_I2C_Mem_Read+0x3bc>
    else if (hi2c->XferSize == 2U)
 800382e:	2a02      	cmp	r2, #2
 8003830:	f000 80c4 	beq.w	80039bc <HAL_I2C_Mem_Read+0x294>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	6819      	ldr	r1, [r3, #0]
 8003838:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800383c:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383e:	9007      	str	r0, [sp, #28]
 8003840:	6959      	ldr	r1, [r3, #20]
 8003842:	9107      	str	r1, [sp, #28]
 8003844:	6999      	ldr	r1, [r3, #24]
 8003846:	9107      	str	r1, [sp, #28]
 8003848:	9907      	ldr	r1, [sp, #28]
      if (hi2c->XferSize <= 3U)
 800384a:	2a03      	cmp	r2, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800384c:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8003a3c <HAL_I2C_Mem_Read+0x314>
 8003850:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8003a40 <HAL_I2C_Mem_Read+0x318>
      if (hi2c->XferSize <= 3U)
 8003854:	d832      	bhi.n	80038bc <HAL_I2C_Mem_Read+0x194>
        if (hi2c->XferSize == 1U)
 8003856:	2a01      	cmp	r2, #1
 8003858:	f000 8117 	beq.w	8003a8a <HAL_I2C_Mem_Read+0x362>
        else if (hi2c->XferSize == 2U)
 800385c:	2a02      	cmp	r2, #2
 800385e:	d16c      	bne.n	800393a <HAL_I2C_Mem_Read+0x212>
 8003860:	1c71      	adds	r1, r6, #1
 8003862:	f040 80ef 	bne.w	8003a44 <HAL_I2C_Mem_Read+0x31c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003866:	695a      	ldr	r2, [r3, #20]
 8003868:	0752      	lsls	r2, r2, #29
 800386a:	d5fc      	bpl.n	8003866 <HAL_I2C_Mem_Read+0x13e>
 800386c:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386e:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003870:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003878:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 800387e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003880:	3b01      	subs	r3, #1
 8003882:	b29b      	uxth	r3, r3
 8003884:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003888:	3301      	adds	r3, #1
 800388a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800388c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800388e:	3b01      	subs	r3, #1
 8003890:	8523      	strh	r3, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003892:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800389a:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 800389c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 800389e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80038a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80038a8:	3a01      	subs	r2, #1
 80038aa:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 80038ac:	3301      	adds	r3, #1
          hi2c->XferSize--;
 80038ae:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 80038b0:	6263      	str	r3, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 80038b2:	2a00      	cmp	r2, #0
 80038b4:	d0aa      	beq.n	800380c <HAL_I2C_Mem_Read+0xe4>
      if (hi2c->XferSize <= 3U)
 80038b6:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038b8:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 80038ba:	d9cc      	bls.n	8003856 <HAL_I2C_Mem_Read+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	0651      	lsls	r1, r2, #25
 80038c0:	f100 80a1 	bmi.w	8003a06 <HAL_I2C_Mem_Read+0x2de>
 80038c4:	2e00      	cmp	r6, #0
 80038c6:	f000 809a 	beq.w	80039fe <HAL_I2C_Mem_Read+0x2d6>
 80038ca:	e00d      	b.n	80038e8 <HAL_I2C_Mem_Read+0x1c0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038cc:	f7fe fcca 	bl	8002264 <HAL_GetTick>
 80038d0:	1b40      	subs	r0, r0, r5
 80038d2:	4286      	cmp	r6, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038d4:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d6:	d203      	bcs.n	80038e0 <HAL_I2C_Mem_Read+0x1b8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	0651      	lsls	r1, r2, #25
 80038dc:	f140 80c3 	bpl.w	8003a66 <HAL_I2C_Mem_Read+0x33e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	0652      	lsls	r2, r2, #25
 80038e4:	f100 808f 	bmi.w	8003a06 <HAL_I2C_Mem_Read+0x2de>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038e8:	695a      	ldr	r2, [r3, #20]
 80038ea:	06d0      	lsls	r0, r2, #27
 80038ec:	d5ee      	bpl.n	80038cc <HAL_I2C_Mem_Read+0x1a4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ee:	f06f 0010 	mvn.w	r0, #16
          return HAL_ERROR;
 80038f2:	2701      	movs	r7, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038f4:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80038f6:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038f8:	6158      	str	r0, [r3, #20]
}
 80038fa:	4638      	mov	r0, r7
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038fc:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038fe:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003902:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003906:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003908:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800390c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800390e:	b008      	add	sp, #32
 8003910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_ERROR;
 8003914:	2701      	movs	r7, #1
}
 8003916:	4638      	mov	r0, r7
 8003918:	b008      	add	sp, #32
 800391a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	0751      	lsls	r1, r2, #29
 8003922:	d40f      	bmi.n	8003944 <HAL_I2C_Mem_Read+0x21c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003924:	f7fe fc9e 	bl	8002264 <HAL_GetTick>
 8003928:	1b40      	subs	r0, r0, r5
 800392a:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800392c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800392e:	d300      	bcc.n	8003932 <HAL_I2C_Mem_Read+0x20a>
 8003930:	b91e      	cbnz	r6, 800393a <HAL_I2C_Mem_Read+0x212>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	0751      	lsls	r1, r2, #29
 8003936:	f140 8096 	bpl.w	8003a66 <HAL_I2C_Mem_Read+0x33e>
 800393a:	1c72      	adds	r2, r6, #1
 800393c:	d1ef      	bne.n	800391e <HAL_I2C_Mem_Read+0x1f6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	0750      	lsls	r0, r2, #29
 8003942:	d5fc      	bpl.n	800393e <HAL_I2C_Mem_Read+0x216>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800394a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800394c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003954:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003956:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->pBuffPtr++;
 800395a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800395c:	08db      	lsrs	r3, r3, #3
 800395e:	fba8 2303 	umull	r2, r3, r8, r3
          hi2c->XferCount--;
 8003962:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003964:	0a1b      	lsrs	r3, r3, #8
 8003966:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 800396a:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800396c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 8003970:	b292      	uxth	r2, r2
 8003972:	8562      	strh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003974:	9303      	str	r3, [sp, #12]
          hi2c->XferSize--;
 8003976:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003978:	3b01      	subs	r3, #1
 800397a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 800397c:	1c4b      	adds	r3, r1, #1
 800397e:	6263      	str	r3, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003980:	e004      	b.n	800398c <HAL_I2C_Mem_Read+0x264>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	0752      	lsls	r2, r2, #29
 8003988:	f100 80a5 	bmi.w	8003ad6 <HAL_I2C_Mem_Read+0x3ae>
            count--;
 800398c:	9b03      	ldr	r3, [sp, #12]
 800398e:	3b01      	subs	r3, #1
 8003990:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8003992:	9b03      	ldr	r3, [sp, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f4      	bne.n	8003982 <HAL_I2C_Mem_Read+0x25a>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003998:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 800399a:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800399c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039a6:	f042 0220 	orr.w	r2, r2, #32
 80039aa:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80039ac:	b662      	cpsie	i
              return HAL_ERROR;
 80039ae:	2701      	movs	r7, #1
}
 80039b0:	4638      	mov	r0, r7
              __HAL_UNLOCK(hi2c);
 80039b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80039b6:	b008      	add	sp, #32
 80039b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039bc:	6822      	ldr	r2, [r4, #0]
 80039be:	6813      	ldr	r3, [r2, #0]
 80039c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039c4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039c6:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	9006      	str	r0, [sp, #24]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	9206      	str	r2, [sp, #24]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	9206      	str	r2, [sp, #24]
 80039d4:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039de:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 80039e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80039e2:	2a00      	cmp	r2, #0
 80039e4:	f43f af12 	beq.w	800380c <HAL_I2C_Mem_Read+0xe4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	e72e      	b.n	800384a <HAL_I2C_Mem_Read+0x122>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ec:	f7fe fc3a 	bl	8002264 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	0651      	lsls	r1, r2, #25
 80039f6:	d536      	bpl.n	8003a66 <HAL_I2C_Mem_Read+0x33e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	0652      	lsls	r2, r2, #25
 80039fc:	d403      	bmi.n	8003a06 <HAL_I2C_Mem_Read+0x2de>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	06d0      	lsls	r0, r2, #27
 8003a02:	d5f3      	bpl.n	80039ec <HAL_I2C_Mem_Read+0x2c4>
 8003a04:	e773      	b.n	80038ee <HAL_I2C_Mem_Read+0x1c6>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a0a:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8003a0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a0e:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8003a14:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003a16:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a18:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 8003a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003a1c:	3a01      	subs	r2, #1
 8003a1e:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8003a20:	f103 0c01 	add.w	ip, r3, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a24:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8003a26:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003a28:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a2c:	f57f af41 	bpl.w	80038b2 <HAL_I2C_Mem_Read+0x18a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a30:	690a      	ldr	r2, [r1, #16]
 8003a32:	705a      	strb	r2, [r3, #1]
 8003a34:	e732      	b.n	800389c <HAL_I2C_Mem_Read+0x174>
 8003a36:	bf00      	nop
 8003a38:	ffff0000 	.word	0xffff0000
 8003a3c:	2000001c 	.word	0x2000001c
 8003a40:	14f8b589 	.word	0x14f8b589
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	0758      	lsls	r0, r3, #29
 8003a48:	f53f af10 	bmi.w	800386c <HAL_I2C_Mem_Read+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4c:	f7fe fc0a 	bl	8002264 <HAL_GetTick>
 8003a50:	1b40      	subs	r0, r0, r5
 8003a52:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a54:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a56:	d302      	bcc.n	8003a5e <HAL_I2C_Mem_Read+0x336>
 8003a58:	2e00      	cmp	r6, #0
 8003a5a:	f47f af01 	bne.w	8003860 <HAL_I2C_Mem_Read+0x138>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	0750      	lsls	r0, r2, #29
 8003a62:	f53f aefd 	bmi.w	8003860 <HAL_I2C_Mem_Read+0x138>
          return HAL_ERROR;
 8003a66:	2701      	movs	r7, #1
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a68:	2200      	movs	r2, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a6a:	2320      	movs	r3, #32
}
 8003a6c:	4638      	mov	r0, r7
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6e:	6322      	str	r2, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a74:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a78:	6c23      	ldr	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003a7a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a7e:	f043 0320 	orr.w	r3, r3, #32
 8003a82:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003a84:	b008      	add	sp, #32
 8003a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a8a:	695a      	ldr	r2, [r3, #20]
 8003a8c:	0652      	lsls	r2, r2, #25
 8003a8e:	f53f af02 	bmi.w	8003896 <HAL_I2C_Mem_Read+0x16e>
 8003a92:	b1e6      	cbz	r6, 8003ace <HAL_I2C_Mem_Read+0x3a6>
 8003a94:	e00c      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x388>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a96:	f7fe fbe5 	bl	8002264 <HAL_GetTick>
 8003a9a:	1b40      	subs	r0, r0, r5
 8003a9c:	4286      	cmp	r6, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a9e:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa0:	d202      	bcs.n	8003aa8 <HAL_I2C_Mem_Read+0x380>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	0651      	lsls	r1, r2, #25
 8003aa6:	d5de      	bpl.n	8003a66 <HAL_I2C_Mem_Read+0x33e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	0652      	lsls	r2, r2, #25
 8003aac:	f53f aef3 	bmi.w	8003896 <HAL_I2C_Mem_Read+0x16e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	06d0      	lsls	r0, r2, #27
 8003ab4:	f53f af1b 	bmi.w	80038ee <HAL_I2C_Mem_Read+0x1c6>
 8003ab8:	e7ed      	b.n	8003a96 <HAL_I2C_Mem_Read+0x36e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7fe fbd3 	bl	8002264 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	0651      	lsls	r1, r2, #25
 8003ac4:	d5cf      	bpl.n	8003a66 <HAL_I2C_Mem_Read+0x33e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	0652      	lsls	r2, r2, #25
 8003aca:	f53f aee4 	bmi.w	8003896 <HAL_I2C_Mem_Read+0x16e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	06d0      	lsls	r0, r2, #27
 8003ad2:	d5f2      	bpl.n	8003aba <HAL_I2C_Mem_Read+0x392>
 8003ad4:	e70b      	b.n	80038ee <HAL_I2C_Mem_Read+0x1c6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003adc:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	704b      	strb	r3, [r1, #1]
 8003ae2:	e6cc      	b.n	800387e <HAL_I2C_Mem_Read+0x156>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae4:	6822      	ldr	r2, [r4, #0]
 8003ae6:	6813      	ldr	r3, [r2, #0]
 8003ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aec:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003aee:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	9005      	str	r0, [sp, #20]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	9205      	str	r2, [sp, #20]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	9205      	str	r2, [sp, #20]
 8003afc:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b06:	b662      	cpsie	i
}
 8003b08:	e76a      	b.n	80039e0 <HAL_I2C_Mem_Read+0x2b8>
 8003b0a:	bf00      	nop

08003b0c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	f000 81b6 	beq.w	8003e7e <HAL_RCC_OscConfig+0x372>
{
 8003b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b16:	6803      	ldr	r3, [r0, #0]
 8003b18:	4604      	mov	r4, r0
 8003b1a:	07dd      	lsls	r5, r3, #31
{
 8003b1c:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1e:	d535      	bpl.n	8003b8c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b20:	499a      	ldr	r1, [pc, #616]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
 8003b22:	684a      	ldr	r2, [r1, #4]
 8003b24:	f002 020c 	and.w	r2, r2, #12
 8003b28:	2a04      	cmp	r2, #4
 8003b2a:	f000 80ef 	beq.w	8003d0c <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b2e:	684a      	ldr	r2, [r1, #4]
 8003b30:	f002 020c 	and.w	r2, r2, #12
 8003b34:	2a08      	cmp	r2, #8
 8003b36:	f000 80e5 	beq.w	8003d04 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b3a:	6863      	ldr	r3, [r4, #4]
 8003b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b40:	d010      	beq.n	8003b64 <HAL_RCC_OscConfig+0x58>
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 810c 	beq.w	8003d60 <HAL_RCC_OscConfig+0x254>
 8003b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b4c:	f000 8182 	beq.w	8003e54 <HAL_RCC_OscConfig+0x348>
 8003b50:	4b8e      	ldr	r3, [pc, #568]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	e004      	b.n	8003b6e <HAL_RCC_OscConfig+0x62>
 8003b64:	4a89      	ldr	r2, [pc, #548]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
 8003b66:	6813      	ldr	r3, [r2, #0]
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6e:	f7fe fb79 	bl	8002264 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b72:	4e86      	ldr	r6, [pc, #536]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8003b74:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	e005      	b.n	8003b84 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b78:	f7fe fb74 	bl	8002264 <HAL_GetTick>
 8003b7c:	1b40      	subs	r0, r0, r5
 8003b7e:	2864      	cmp	r0, #100	; 0x64
 8003b80:	f200 80ea 	bhi.w	8003d58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b84:	6833      	ldr	r3, [r6, #0]
 8003b86:	039a      	lsls	r2, r3, #14
 8003b88:	d5f6      	bpl.n	8003b78 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	079f      	lsls	r7, r3, #30
 8003b8e:	d528      	bpl.n	8003be2 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b90:	4a7e      	ldr	r2, [pc, #504]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
 8003b92:	6851      	ldr	r1, [r2, #4]
 8003b94:	f011 0f0c 	tst.w	r1, #12
 8003b98:	f000 808d 	beq.w	8003cb6 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b9c:	6851      	ldr	r1, [r2, #4]
 8003b9e:	f001 010c 	and.w	r1, r1, #12
 8003ba2:	2908      	cmp	r1, #8
 8003ba4:	f000 8083 	beq.w	8003cae <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba8:	6923      	ldr	r3, [r4, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8118 	beq.w	8003de0 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	4b77      	ldr	r3, [pc, #476]	; (8003d90 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb4:	4e75      	ldr	r6, [pc, #468]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8003bb6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003bb8:	f7fe fb54 	bl	8002264 <HAL_GetTick>
 8003bbc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbe:	e005      	b.n	8003bcc <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc0:	f7fe fb50 	bl	8002264 <HAL_GetTick>
 8003bc4:	1b40      	subs	r0, r0, r5
 8003bc6:	2802      	cmp	r0, #2
 8003bc8:	f200 80c6 	bhi.w	8003d58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bcc:	6833      	ldr	r3, [r6, #0]
 8003bce:	0798      	lsls	r0, r3, #30
 8003bd0:	d5f6      	bpl.n	8003bc0 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd2:	6833      	ldr	r3, [r6, #0]
 8003bd4:	6962      	ldr	r2, [r4, #20]
 8003bd6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003bda:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003bde:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	071a      	lsls	r2, r3, #28
 8003be4:	d41f      	bmi.n	8003c26 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be6:	075d      	lsls	r5, r3, #29
 8003be8:	d542      	bpl.n	8003c70 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bea:	4b68      	ldr	r3, [pc, #416]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	00d0      	lsls	r0, r2, #3
 8003bf0:	d57d      	bpl.n	8003cee <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8003bf2:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf4:	4e67      	ldr	r6, [pc, #412]	; (8003d94 <HAL_RCC_OscConfig+0x288>)
 8003bf6:	6833      	ldr	r3, [r6, #0]
 8003bf8:	05d9      	lsls	r1, r3, #23
 8003bfa:	f140 809d 	bpl.w	8003d38 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfe:	68e3      	ldr	r3, [r4, #12]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	f000 80fe 	beq.w	8003e02 <HAL_RCC_OscConfig+0x2f6>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 80ca 	beq.w	8003da0 <HAL_RCC_OscConfig+0x294>
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	4b5f      	ldr	r3, [pc, #380]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
 8003c10:	6a1a      	ldr	r2, [r3, #32]
 8003c12:	f000 812c 	beq.w	8003e6e <HAL_RCC_OscConfig+0x362>
 8003c16:	f022 0201 	bic.w	r2, r2, #1
 8003c1a:	621a      	str	r2, [r3, #32]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	f022 0204 	bic.w	r2, r2, #4
 8003c22:	621a      	str	r2, [r3, #32]
 8003c24:	e0f2      	b.n	8003e0c <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c26:	69a3      	ldr	r3, [r4, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d04f      	beq.n	8003ccc <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	4b58      	ldr	r3, [pc, #352]	; (8003d90 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c30:	4e56      	ldr	r6, [pc, #344]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8003c32:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003c36:	f7fe fb15 	bl	8002264 <HAL_GetTick>
 8003c3a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3c:	e005      	b.n	8003c4a <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3e:	f7fe fb11 	bl	8002264 <HAL_GetTick>
 8003c42:	1b40      	subs	r0, r0, r5
 8003c44:	2802      	cmp	r0, #2
 8003c46:	f200 8087 	bhi.w	8003d58 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003c4c:	079b      	lsls	r3, r3, #30
 8003c4e:	d5f6      	bpl.n	8003c3e <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c50:	4b51      	ldr	r3, [pc, #324]	; (8003d98 <HAL_RCC_OscConfig+0x28c>)
 8003c52:	4a52      	ldr	r2, [pc, #328]	; (8003d9c <HAL_RCC_OscConfig+0x290>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	0a5b      	lsrs	r3, r3, #9
 8003c5c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003c5e:	bf00      	nop
  }
  while (Delay --);
 8003c60:	9b01      	ldr	r3, [sp, #4]
 8003c62:	1e5a      	subs	r2, r3, #1
 8003c64:	9201      	str	r2, [sp, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f9      	bne.n	8003c5e <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	075d      	lsls	r5, r3, #29
 8003c6e:	d4bc      	bmi.n	8003bea <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c70:	69e0      	ldr	r0, [r4, #28]
 8003c72:	b1c0      	cbz	r0, 8003ca6 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c74:	4d45      	ldr	r5, [pc, #276]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
 8003c76:	686b      	ldr	r3, [r5, #4]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	f000 80d8 	beq.w	8003e32 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8003c82:	2200      	movs	r2, #0
 8003c84:	4b42      	ldr	r3, [pc, #264]	; (8003d90 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c86:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003c88:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c8a:	f000 80fa 	beq.w	8003e82 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8003c8e:	f7fe fae9 	bl	8002264 <HAL_GetTick>
 8003c92:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c94:	e004      	b.n	8003ca0 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c96:	f7fe fae5 	bl	8002264 <HAL_GetTick>
 8003c9a:	1b00      	subs	r0, r0, r4
 8003c9c:	2802      	cmp	r0, #2
 8003c9e:	d85b      	bhi.n	8003d58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	019b      	lsls	r3, r3, #6
 8003ca4:	d4f7      	bmi.n	8003c96 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8003ca6:	2000      	movs	r0, #0
}
 8003ca8:	b002      	add	sp, #8
 8003caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cae:	6852      	ldr	r2, [r2, #4]
 8003cb0:	03d6      	lsls	r6, r2, #15
 8003cb2:	f53f af79 	bmi.w	8003ba8 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb6:	4a35      	ldr	r2, [pc, #212]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
 8003cb8:	6812      	ldr	r2, [r2, #0]
 8003cba:	0795      	lsls	r5, r2, #30
 8003cbc:	d530      	bpl.n	8003d20 <HAL_RCC_OscConfig+0x214>
 8003cbe:	6922      	ldr	r2, [r4, #16]
 8003cc0:	2a01      	cmp	r2, #1
 8003cc2:	d02d      	beq.n	8003d20 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8003cc4:	2001      	movs	r0, #1
}
 8003cc6:	b002      	add	sp, #8
 8003cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003ccc:	4a30      	ldr	r2, [pc, #192]	; (8003d90 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cce:	4e2f      	ldr	r6, [pc, #188]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8003cd0:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003cd4:	f7fe fac6 	bl	8002264 <HAL_GetTick>
 8003cd8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cda:	e004      	b.n	8003ce6 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cdc:	f7fe fac2 	bl	8002264 <HAL_GetTick>
 8003ce0:	1b40      	subs	r0, r0, r5
 8003ce2:	2802      	cmp	r0, #2
 8003ce4:	d838      	bhi.n	8003d58 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003ce8:	079f      	lsls	r7, r3, #30
 8003cea:	d4f7      	bmi.n	8003cdc <HAL_RCC_OscConfig+0x1d0>
 8003cec:	e7bd      	b.n	8003c6a <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cee:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8003cf0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cf6:	61da      	str	r2, [r3, #28]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8003d02:	e777      	b.n	8003bf4 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d04:	684a      	ldr	r2, [r1, #4]
 8003d06:	03d0      	lsls	r0, r2, #15
 8003d08:	f57f af17 	bpl.w	8003b3a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0c:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	0391      	lsls	r1, r2, #14
 8003d12:	f57f af3b 	bpl.w	8003b8c <HAL_RCC_OscConfig+0x80>
 8003d16:	6862      	ldr	r2, [r4, #4]
 8003d18:	2a00      	cmp	r2, #0
 8003d1a:	f47f af37 	bne.w	8003b8c <HAL_RCC_OscConfig+0x80>
 8003d1e:	e7d1      	b.n	8003cc4 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d20:	491a      	ldr	r1, [pc, #104]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
 8003d22:	6960      	ldr	r0, [r4, #20]
 8003d24:	680a      	ldr	r2, [r1, #0]
 8003d26:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003d2a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003d2e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d30:	071a      	lsls	r2, r3, #28
 8003d32:	f57f af58 	bpl.w	8003be6 <HAL_RCC_OscConfig+0xda>
 8003d36:	e776      	b.n	8003c26 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d38:	6833      	ldr	r3, [r6, #0]
 8003d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003d40:	f7fe fa90 	bl	8002264 <HAL_GetTick>
 8003d44:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d46:	6833      	ldr	r3, [r6, #0]
 8003d48:	05da      	lsls	r2, r3, #23
 8003d4a:	f53f af58 	bmi.w	8003bfe <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7fe fa89 	bl	8002264 <HAL_GetTick>
 8003d52:	1bc0      	subs	r0, r0, r7
 8003d54:	2864      	cmp	r0, #100	; 0x64
 8003d56:	d9f6      	bls.n	8003d46 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8003d58:	2003      	movs	r0, #3
}
 8003d5a:	b002      	add	sp, #8
 8003d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d60:	4d0a      	ldr	r5, [pc, #40]	; (8003d8c <HAL_RCC_OscConfig+0x280>)
 8003d62:	682b      	ldr	r3, [r5, #0]
 8003d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d68:	602b      	str	r3, [r5, #0]
 8003d6a:	682b      	ldr	r3, [r5, #0]
 8003d6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003d72:	f7fe fa77 	bl	8002264 <HAL_GetTick>
 8003d76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d78:	e004      	b.n	8003d84 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d7a:	f7fe fa73 	bl	8002264 <HAL_GetTick>
 8003d7e:	1b80      	subs	r0, r0, r6
 8003d80:	2864      	cmp	r0, #100	; 0x64
 8003d82:	d8e9      	bhi.n	8003d58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	039b      	lsls	r3, r3, #14
 8003d88:	d4f7      	bmi.n	8003d7a <HAL_RCC_OscConfig+0x26e>
 8003d8a:	e6fe      	b.n	8003b8a <HAL_RCC_OscConfig+0x7e>
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	42420000 	.word	0x42420000
 8003d94:	40007000 	.word	0x40007000
 8003d98:	2000001c 	.word	0x2000001c
 8003d9c:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da0:	4e50      	ldr	r6, [pc, #320]	; (8003ee4 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da6:	6a33      	ldr	r3, [r6, #32]
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	6233      	str	r3, [r6, #32]
 8003dae:	6a33      	ldr	r3, [r6, #32]
 8003db0:	f023 0304 	bic.w	r3, r3, #4
 8003db4:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8003db6:	f7fe fa55 	bl	8002264 <HAL_GetTick>
 8003dba:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dbc:	e004      	b.n	8003dc8 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dbe:	f7fe fa51 	bl	8002264 <HAL_GetTick>
 8003dc2:	1bc0      	subs	r0, r0, r7
 8003dc4:	4540      	cmp	r0, r8
 8003dc6:	d8c7      	bhi.n	8003d58 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc8:	6a33      	ldr	r3, [r6, #32]
 8003dca:	0798      	lsls	r0, r3, #30
 8003dcc:	d4f7      	bmi.n	8003dbe <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8003dce:	2d00      	cmp	r5, #0
 8003dd0:	f43f af4e 	beq.w	8003c70 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd4:	4a43      	ldr	r2, [pc, #268]	; (8003ee4 <HAL_RCC_OscConfig+0x3d8>)
 8003dd6:	69d3      	ldr	r3, [r2, #28]
 8003dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	61d3      	str	r3, [r2, #28]
 8003dde:	e747      	b.n	8003c70 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8003de0:	4a41      	ldr	r2, [pc, #260]	; (8003ee8 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de2:	4e40      	ldr	r6, [pc, #256]	; (8003ee4 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8003de4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003de6:	f7fe fa3d 	bl	8002264 <HAL_GetTick>
 8003dea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dec:	e004      	b.n	8003df8 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dee:	f7fe fa39 	bl	8002264 <HAL_GetTick>
 8003df2:	1b40      	subs	r0, r0, r5
 8003df4:	2802      	cmp	r0, #2
 8003df6:	d8af      	bhi.n	8003d58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df8:	6833      	ldr	r3, [r6, #0]
 8003dfa:	0799      	lsls	r1, r3, #30
 8003dfc:	d4f7      	bmi.n	8003dee <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	e6ef      	b.n	8003be2 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e02:	4a38      	ldr	r2, [pc, #224]	; (8003ee4 <HAL_RCC_OscConfig+0x3d8>)
 8003e04:	6a13      	ldr	r3, [r2, #32]
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003e0c:	f7fe fa2a 	bl	8002264 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e10:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003e14:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e16:	4f33      	ldr	r7, [pc, #204]	; (8003ee4 <HAL_RCC_OscConfig+0x3d8>)
 8003e18:	e004      	b.n	8003e24 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fe fa23 	bl	8002264 <HAL_GetTick>
 8003e1e:	1b80      	subs	r0, r0, r6
 8003e20:	4540      	cmp	r0, r8
 8003e22:	d899      	bhi.n	8003d58 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	079b      	lsls	r3, r3, #30
 8003e28:	d5f7      	bpl.n	8003e1a <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8003e2a:	2d00      	cmp	r5, #0
 8003e2c:	f43f af20 	beq.w	8003c70 <HAL_RCC_OscConfig+0x164>
 8003e30:	e7d0      	b.n	8003dd4 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e32:	2801      	cmp	r0, #1
 8003e34:	f43f af38 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8003e38:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3a:	6a22      	ldr	r2, [r4, #32]
 8003e3c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003e40:	4291      	cmp	r1, r2
 8003e42:	f47f af3f 	bne.w	8003cc4 <HAL_RCC_OscConfig+0x1b8>
 8003e46:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8003e4c:	1a18      	subs	r0, r3, r0
 8003e4e:	bf18      	it	ne
 8003e50:	2001      	movne	r0, #1
 8003e52:	e729      	b.n	8003ca8 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e58:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e67f      	b.n	8003b6e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6e:	f042 0204 	orr.w	r2, r2, #4
 8003e72:	621a      	str	r2, [r3, #32]
 8003e74:	6a1a      	ldr	r2, [r3, #32]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	621a      	str	r2, [r3, #32]
 8003e7c:	e7c6      	b.n	8003e0c <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8003e7e:	2001      	movs	r0, #1
}
 8003e80:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8003e82:	f7fe f9ef 	bl	8002264 <HAL_GetTick>
 8003e86:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e88:	e005      	b.n	8003e96 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8a:	f7fe f9eb 	bl	8002264 <HAL_GetTick>
 8003e8e:	1b80      	subs	r0, r0, r6
 8003e90:	2802      	cmp	r0, #2
 8003e92:	f63f af61 	bhi.w	8003d58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e96:	682b      	ldr	r3, [r5, #0]
 8003e98:	0199      	lsls	r1, r3, #6
 8003e9a:	d4f6      	bmi.n	8003e8a <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e9c:	6a23      	ldr	r3, [r4, #32]
 8003e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ea4:	686a      	ldr	r2, [r5, #4]
 8003ea6:	68a1      	ldr	r1, [r4, #8]
 8003ea8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003eac:	430a      	orrs	r2, r1
 8003eae:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003eb0:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eb2:	4d0c      	ldr	r5, [pc, #48]	; (8003ee4 <HAL_RCC_OscConfig+0x3d8>)
 8003eb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003eb6:	686a      	ldr	r2, [r5, #4]
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8003ebe:	490a      	ldr	r1, [pc, #40]	; (8003ee8 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ec4:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003ec6:	f7fe f9cd 	bl	8002264 <HAL_GetTick>
 8003eca:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ecc:	e005      	b.n	8003eda <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ece:	f7fe f9c9 	bl	8002264 <HAL_GetTick>
 8003ed2:	1b00      	subs	r0, r0, r4
 8003ed4:	2802      	cmp	r0, #2
 8003ed6:	f63f af3f 	bhi.w	8003d58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eda:	682b      	ldr	r3, [r5, #0]
 8003edc:	019a      	lsls	r2, r3, #6
 8003ede:	d5f6      	bpl.n	8003ece <HAL_RCC_OscConfig+0x3c2>
 8003ee0:	e6e1      	b.n	8003ca6 <HAL_RCC_OscConfig+0x19a>
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	42420000 	.word	0x42420000

08003eec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003eec:	2800      	cmp	r0, #0
 8003eee:	f000 80a1 	beq.w	8004034 <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef2:	4a56      	ldr	r2, [pc, #344]	; (800404c <HAL_RCC_ClockConfig+0x160>)
{
 8003ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef8:	6813      	ldr	r3, [r2, #0]
 8003efa:	4604      	mov	r4, r0
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	428b      	cmp	r3, r1
 8003f02:	460d      	mov	r5, r1
 8003f04:	d20c      	bcs.n	8003f20 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f06:	6813      	ldr	r3, [r2, #0]
 8003f08:	f023 0307 	bic.w	r3, r3, #7
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f10:	6813      	ldr	r3, [r2, #0]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	428b      	cmp	r3, r1
 8003f18:	d002      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003f1a:	2001      	movs	r0, #1
}
 8003f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	079e      	lsls	r6, r3, #30
 8003f24:	d514      	bpl.n	8003f50 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f26:	0758      	lsls	r0, r3, #29
 8003f28:	d504      	bpl.n	8003f34 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f2a:	4949      	ldr	r1, [pc, #292]	; (8004050 <HAL_RCC_ClockConfig+0x164>)
 8003f2c:	684a      	ldr	r2, [r1, #4]
 8003f2e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003f32:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	0719      	lsls	r1, r3, #28
 8003f36:	d504      	bpl.n	8003f42 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f38:	4945      	ldr	r1, [pc, #276]	; (8004050 <HAL_RCC_ClockConfig+0x164>)
 8003f3a:	684a      	ldr	r2, [r1, #4]
 8003f3c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003f40:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f42:	4943      	ldr	r1, [pc, #268]	; (8004050 <HAL_RCC_ClockConfig+0x164>)
 8003f44:	68a0      	ldr	r0, [r4, #8]
 8003f46:	684a      	ldr	r2, [r1, #4]
 8003f48:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003f4c:	4302      	orrs	r2, r0
 8003f4e:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f50:	07da      	lsls	r2, r3, #31
 8003f52:	d520      	bpl.n	8003f96 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f54:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	4b3e      	ldr	r3, [pc, #248]	; (8004050 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f58:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5c:	d06c      	beq.n	8004038 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f5e:	2a02      	cmp	r2, #2
 8003f60:	d065      	beq.n	800402e <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f62:	079e      	lsls	r6, r3, #30
 8003f64:	d5d9      	bpl.n	8003f1a <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f66:	4e3a      	ldr	r6, [pc, #232]	; (8004050 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f68:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6c:	6873      	ldr	r3, [r6, #4]
 8003f6e:	f023 0303 	bic.w	r3, r3, #3
 8003f72:	4313      	orrs	r3, r2
 8003f74:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003f76:	f7fe f975 	bl	8002264 <HAL_GetTick>
 8003f7a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7c:	e004      	b.n	8003f88 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7e:	f7fe f971 	bl	8002264 <HAL_GetTick>
 8003f82:	1bc0      	subs	r0, r0, r7
 8003f84:	4540      	cmp	r0, r8
 8003f86:	d85a      	bhi.n	800403e <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f88:	6873      	ldr	r3, [r6, #4]
 8003f8a:	6862      	ldr	r2, [r4, #4]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003f94:	d1f3      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f96:	4a2d      	ldr	r2, [pc, #180]	; (800404c <HAL_RCC_ClockConfig+0x160>)
 8003f98:	6813      	ldr	r3, [r2, #0]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	42ab      	cmp	r3, r5
 8003fa0:	d909      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	6813      	ldr	r3, [r2, #0]
 8003fa4:	f023 0307 	bic.w	r3, r3, #7
 8003fa8:	432b      	orrs	r3, r5
 8003faa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fac:	6813      	ldr	r3, [r2, #0]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	42ab      	cmp	r3, r5
 8003fb4:	d1b1      	bne.n	8003f1a <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	0758      	lsls	r0, r3, #29
 8003fba:	d506      	bpl.n	8003fca <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fbc:	4924      	ldr	r1, [pc, #144]	; (8004050 <HAL_RCC_ClockConfig+0x164>)
 8003fbe:	68e0      	ldr	r0, [r4, #12]
 8003fc0:	684a      	ldr	r2, [r1, #4]
 8003fc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fc6:	4302      	orrs	r2, r0
 8003fc8:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fca:	0719      	lsls	r1, r3, #28
 8003fcc:	d507      	bpl.n	8003fde <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fce:	4a20      	ldr	r2, [pc, #128]	; (8004050 <HAL_RCC_ClockConfig+0x164>)
 8003fd0:	6921      	ldr	r1, [r4, #16]
 8003fd2:	6853      	ldr	r3, [r2, #4]
 8003fd4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003fd8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003fdc:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 8003fde:	491c      	ldr	r1, [pc, #112]	; (8004050 <HAL_RCC_ClockConfig+0x164>)
 8003fe0:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003fe2:	f002 030c 	and.w	r3, r2, #12
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d010      	beq.n	800400c <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 8003fea:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fec:	4a18      	ldr	r2, [pc, #96]	; (8004050 <HAL_RCC_ClockConfig+0x164>)
 8003fee:	481a      	ldr	r0, [pc, #104]	; (8004058 <HAL_RCC_ClockConfig+0x16c>)
 8003ff0:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8003ff2:	491a      	ldr	r1, [pc, #104]	; (800405c <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ff4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003ff8:	5c80      	ldrb	r0, [r0, r2]
 8003ffa:	4a19      	ldr	r2, [pc, #100]	; (8004060 <HAL_RCC_ClockConfig+0x174>)
 8003ffc:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8003ffe:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004000:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8004002:	f7fe f8ed 	bl	80021e0 <HAL_InitTick>
  return HAL_OK;
 8004006:	2000      	movs	r0, #0
}
 8004008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800400c:	4815      	ldr	r0, [pc, #84]	; (8004064 <HAL_RCC_ClockConfig+0x178>)
 800400e:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004012:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004014:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004016:	d514      	bpl.n	8004042 <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004018:	480e      	ldr	r0, [pc, #56]	; (8004054 <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800401a:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800401c:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004020:	4911      	ldr	r1, [pc, #68]	; (8004068 <HAL_RCC_ClockConfig+0x17c>)
 8004022:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8004026:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004028:	fbb3 f3f2 	udiv	r3, r3, r2
 800402c:	e7de      	b.n	8003fec <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402e:	019f      	lsls	r7, r3, #6
 8004030:	d499      	bmi.n	8003f66 <HAL_RCC_ClockConfig+0x7a>
 8004032:	e772      	b.n	8003f1a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004034:	2001      	movs	r0, #1
}
 8004036:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004038:	039b      	lsls	r3, r3, #14
 800403a:	d494      	bmi.n	8003f66 <HAL_RCC_ClockConfig+0x7a>
 800403c:	e76d      	b.n	8003f1a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800403e:	2003      	movs	r0, #3
 8004040:	e76c      	b.n	8003f1c <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004042:	4a0a      	ldr	r2, [pc, #40]	; (800406c <HAL_RCC_ClockConfig+0x180>)
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	e7d0      	b.n	8003fec <HAL_RCC_ClockConfig+0x100>
 800404a:	bf00      	nop
 800404c:	40022000 	.word	0x40022000
 8004050:	40021000 	.word	0x40021000
 8004054:	007a1200 	.word	0x007a1200
 8004058:	08005d58 	.word	0x08005d58
 800405c:	20000024 	.word	0x20000024
 8004060:	2000001c 	.word	0x2000001c
 8004064:	08005d70 	.word	0x08005d70
 8004068:	08005d80 	.word	0x08005d80
 800406c:	003d0900 	.word	0x003d0900

08004070 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004072:	4a05      	ldr	r2, [pc, #20]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4905      	ldr	r1, [pc, #20]	; (800408c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004078:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800407c:	5ccb      	ldrb	r3, [r1, r3]
 800407e:	6810      	ldr	r0, [r2, #0]
}
 8004080:	40d8      	lsrs	r0, r3
 8004082:	4770      	bx	lr
 8004084:	40021000 	.word	0x40021000
 8004088:	2000001c 	.word	0x2000001c
 800408c:	08005d68 	.word	0x08005d68

08004090 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004090:	4b04      	ldr	r3, [pc, #16]	; (80040a4 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004092:	4a05      	ldr	r2, [pc, #20]	; (80040a8 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4905      	ldr	r1, [pc, #20]	; (80040ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004098:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800409c:	5ccb      	ldrb	r3, [r1, r3]
 800409e:	6810      	ldr	r0, [r2, #0]
}
 80040a0:	40d8      	lsrs	r0, r3
 80040a2:	4770      	bx	lr
 80040a4:	40021000 	.word	0x40021000
 80040a8:	2000001c 	.word	0x2000001c
 80040ac:	08005d68 	.word	0x08005d68

080040b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040b6:	6800      	ldr	r0, [r0, #0]
{
 80040b8:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040ba:	07c1      	lsls	r1, r0, #31
 80040bc:	d52c      	bpl.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040be:	4b3a      	ldr	r3, [pc, #232]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	00d2      	lsls	r2, r2, #3
 80040c4:	d53f      	bpl.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c6:	4d39      	ldr	r5, [pc, #228]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 80040c8:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ca:	682b      	ldr	r3, [r5, #0]
 80040cc:	05df      	lsls	r7, r3, #23
 80040ce:	d548      	bpl.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040d0:	4d35      	ldr	r5, [pc, #212]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80040d2:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040d4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80040d8:	d011      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80040da:	6861      	ldr	r1, [r4, #4]
 80040dc:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d00d      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040e4:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040e6:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040e8:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ea:	4a31      	ldr	r2, [pc, #196]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80040f0:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040f4:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040f8:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040fa:	07d9      	lsls	r1, r3, #31
 80040fc:	d444      	bmi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040fe:	6861      	ldr	r1, [r4, #4]
 8004100:	4a29      	ldr	r2, [pc, #164]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004102:	6a13      	ldr	r3, [r2, #32]
 8004104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004108:	430b      	orrs	r3, r1
 800410a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800410c:	b11e      	cbz	r6, 8004116 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410e:	69d3      	ldr	r3, [r2, #28]
 8004110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004114:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004116:	6820      	ldr	r0, [r4, #0]
 8004118:	0783      	lsls	r3, r0, #30
 800411a:	d506      	bpl.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800411c:	4922      	ldr	r1, [pc, #136]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800411e:	68a3      	ldr	r3, [r4, #8]
 8004120:	684a      	ldr	r2, [r1, #4]
 8004122:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004126:	431a      	orrs	r2, r3
 8004128:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800412a:	f010 0010 	ands.w	r0, r0, #16
 800412e:	d007      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004130:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004132:	4a1d      	ldr	r2, [pc, #116]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004134:	68e1      	ldr	r1, [r4, #12]
 8004136:	6853      	ldr	r3, [r2, #4]
 8004138:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800413c:	430b      	orrs	r3, r1
 800413e:	6053      	str	r3, [r2, #4]
}
 8004140:	b002      	add	sp, #8
 8004142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004146:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004148:	4d18      	ldr	r5, [pc, #96]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800414e:	61da      	str	r2, [r3, #28]
 8004150:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8004152:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	05df      	lsls	r7, r3, #23
 8004160:	d4b6      	bmi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004162:	682b      	ldr	r3, [r5, #0]
 8004164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004168:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800416a:	f7fe f87b 	bl	8002264 <HAL_GetTick>
 800416e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	05d8      	lsls	r0, r3, #23
 8004174:	d4ac      	bmi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004176:	f7fe f875 	bl	8002264 <HAL_GetTick>
 800417a:	1bc3      	subs	r3, r0, r7
 800417c:	2b64      	cmp	r3, #100	; 0x64
 800417e:	d9f7      	bls.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8004180:	2003      	movs	r0, #3
}
 8004182:	b002      	add	sp, #8
 8004184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8004188:	f7fe f86c 	bl	8002264 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004190:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004192:	e004      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004194:	f7fe f866 	bl	8002264 <HAL_GetTick>
 8004198:	1bc0      	subs	r0, r0, r7
 800419a:	4540      	cmp	r0, r8
 800419c:	d8f0      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419e:	6a2b      	ldr	r3, [r5, #32]
 80041a0:	079a      	lsls	r2, r3, #30
 80041a2:	d5f7      	bpl.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80041a4:	e7ab      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40007000 	.word	0x40007000
 80041b0:	42420000 	.word	0x42420000

080041b4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d062      	beq.n	800427e <HAL_TIM_Base_Init+0xca>
{
 80041b8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041be:	4604      	mov	r4, r0
 80041c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d041      	beq.n	800424c <HAL_TIM_Base_Init+0x98>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ca:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041cc:	492d      	ldr	r1, [pc, #180]	; (8004284 <HAL_TIM_Base_Init+0xd0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80041ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80041d4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d6:	d03e      	beq.n	8004256 <HAL_TIM_Base_Init+0xa2>
 80041d8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80041dc:	d024      	beq.n	8004228 <HAL_TIM_Base_Init+0x74>
 80041de:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80041e2:	428a      	cmp	r2, r1
 80041e4:	d020      	beq.n	8004228 <HAL_TIM_Base_Init+0x74>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e6:	69a0      	ldr	r0, [r4, #24]
 80041e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ec:	4303      	orrs	r3, r0

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ee:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 80041f0:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f2:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f4:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80041f6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041f8:	2301      	movs	r3, #1
 80041fa:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041fc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004200:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004204:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004208:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800420c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004218:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800421c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004220:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004224:	2000      	movs	r0, #0
}
 8004226:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8004228:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800422a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800422e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8004230:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004236:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004238:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800423a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800423e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004240:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004242:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004244:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004246:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004248:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800424a:	e7d5      	b.n	80041f8 <HAL_TIM_Base_Init+0x44>
    htim->Lock = HAL_UNLOCKED;
 800424c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004250:	f7fd fe60 	bl	8001f14 <HAL_TIM_Base_MspInit>
 8004254:	e7b8      	b.n	80041c8 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004256:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800425e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004264:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004266:	69a1      	ldr	r1, [r4, #24]
 8004268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800426c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800426e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004270:	68e3      	ldr	r3, [r4, #12]
 8004272:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004274:	6863      	ldr	r3, [r4, #4]
 8004276:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004278:	6963      	ldr	r3, [r4, #20]
 800427a:	6313      	str	r3, [r2, #48]	; 0x30
 800427c:	e7bc      	b.n	80041f8 <HAL_TIM_Base_Init+0x44>
    return HAL_ERROR;
 800427e:	2001      	movs	r0, #1
}
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40012c00 	.word	0x40012c00

08004288 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004288:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800428c:	2b01      	cmp	r3, #1
 800428e:	d116      	bne.n	80042be <HAL_TIM_Base_Start_IT+0x36>
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004292:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004298:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429a:	490d      	ldr	r1, [pc, #52]	; (80042d0 <HAL_TIM_Base_Start_IT+0x48>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800429c:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042a2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a4:	d00d      	beq.n	80042c2 <HAL_TIM_Base_Start_IT+0x3a>
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042aa:	d00a      	beq.n	80042c2 <HAL_TIM_Base_Start_IT+0x3a>
 80042ac:	4a09      	ldr	r2, [pc, #36]	; (80042d4 <HAL_TIM_Base_Start_IT+0x4c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d007      	beq.n	80042c2 <HAL_TIM_Base_Start_IT+0x3a>
    __HAL_TIM_ENABLE(htim);
 80042b2:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80042b4:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	4770      	bx	lr
    return HAL_ERROR;
 80042be:	2001      	movs	r0, #1
 80042c0:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c8:	2a06      	cmp	r2, #6
 80042ca:	d1f2      	bne.n	80042b2 <HAL_TIM_Base_Start_IT+0x2a>
  return HAL_OK;
 80042cc:	2000      	movs	r0, #0
}
 80042ce:	4770      	bx	lr
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40000400 	.word	0x40000400

080042d8 <HAL_TIM_PWM_MspInit>:
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop

080042dc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80042dc:	2800      	cmp	r0, #0
 80042de:	d062      	beq.n	80043a6 <HAL_TIM_PWM_Init+0xca>
{
 80042e0:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80042e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042e6:	4604      	mov	r4, r0
 80042e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d041      	beq.n	8004374 <HAL_TIM_PWM_Init+0x98>
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042f2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042f4:	492d      	ldr	r1, [pc, #180]	; (80043ac <HAL_TIM_PWM_Init+0xd0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80042f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042fa:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80042fc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042fe:	d03e      	beq.n	800437e <HAL_TIM_PWM_Init+0xa2>
 8004300:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004304:	d024      	beq.n	8004350 <HAL_TIM_PWM_Init+0x74>
 8004306:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800430a:	428a      	cmp	r2, r1
 800430c:	d020      	beq.n	8004350 <HAL_TIM_PWM_Init+0x74>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800430e:	69a0      	ldr	r0, [r4, #24]
 8004310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004314:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004316:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8004318:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800431a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800431c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800431e:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004320:	2301      	movs	r3, #1
 8004322:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004324:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004328:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800432c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004330:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004334:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800433c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004340:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004344:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004348:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800434c:	2000      	movs	r0, #0
}
 800434e:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8004350:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004356:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8004358:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800435a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800435e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004360:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004366:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004368:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800436a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800436c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800436e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004370:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004372:	e7d5      	b.n	8004320 <HAL_TIM_PWM_Init+0x44>
    htim->Lock = HAL_UNLOCKED;
 8004374:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004378:	f7ff ffae 	bl	80042d8 <HAL_TIM_PWM_MspInit>
 800437c:	e7b8      	b.n	80042f0 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800437e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004384:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8004386:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800438c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800438e:	69a1      	ldr	r1, [r4, #24]
 8004390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004394:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004396:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004398:	68e3      	ldr	r3, [r4, #12]
 800439a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800439c:	6863      	ldr	r3, [r4, #4]
 800439e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80043a0:	6963      	ldr	r3, [r4, #20]
 80043a2:	6313      	str	r3, [r2, #48]	; 0x30
 80043a4:	e7bc      	b.n	8004320 <HAL_TIM_PWM_Init+0x44>
    return HAL_ERROR;
 80043a6:	2001      	movs	r0, #1
}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40012c00 	.word	0x40012c00

080043b0 <HAL_TIM_PWM_Start>:
 80043b0:	bb19      	cbnz	r1, 80043fa <HAL_TIM_PWM_Start+0x4a>
 80043b2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d133      	bne.n	8004422 <HAL_TIM_PWM_Start+0x72>
 80043ba:	2302      	movs	r3, #2
 80043bc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80043c0:	2201      	movs	r2, #1
 80043c2:	6803      	ldr	r3, [r0, #0]
 80043c4:	f001 011f 	and.w	r1, r1, #31
 80043c8:	6a18      	ldr	r0, [r3, #32]
 80043ca:	408a      	lsls	r2, r1
 80043cc:	ea20 0002 	bic.w	r0, r0, r2
 80043d0:	b410      	push	{r4}
 80043d2:	6218      	str	r0, [r3, #32]
 80043d4:	6a19      	ldr	r1, [r3, #32]
 80043d6:	4c20      	ldr	r4, [pc, #128]	; (8004458 <HAL_TIM_PWM_Start+0xa8>)
 80043d8:	430a      	orrs	r2, r1
 80043da:	42a3      	cmp	r3, r4
 80043dc:	621a      	str	r2, [r3, #32]
 80043de:	d022      	beq.n	8004426 <HAL_TIM_PWM_Start+0x76>
 80043e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e4:	d023      	beq.n	800442e <HAL_TIM_PWM_Start+0x7e>
 80043e6:	4a1d      	ldr	r2, [pc, #116]	; (800445c <HAL_TIM_PWM_Start+0xac>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d020      	beq.n	800442e <HAL_TIM_PWM_Start+0x7e>
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	2000      	movs	r0, #0
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	bc10      	pop	{r4}
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	4770      	bx	lr
 80043fa:	2904      	cmp	r1, #4
 80043fc:	d01f      	beq.n	800443e <HAL_TIM_PWM_Start+0x8e>
 80043fe:	2908      	cmp	r1, #8
 8004400:	d00b      	beq.n	800441a <HAL_TIM_PWM_Start+0x6a>
 8004402:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004406:	2b01      	cmp	r3, #1
 8004408:	d10b      	bne.n	8004422 <HAL_TIM_PWM_Start+0x72>
 800440a:	2904      	cmp	r1, #4
 800440c:	d01b      	beq.n	8004446 <HAL_TIM_PWM_Start+0x96>
 800440e:	2908      	cmp	r1, #8
 8004410:	d01d      	beq.n	800444e <HAL_TIM_PWM_Start+0x9e>
 8004412:	2302      	movs	r3, #2
 8004414:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8004418:	e7d2      	b.n	80043c0 <HAL_TIM_PWM_Start+0x10>
 800441a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800441e:	2b01      	cmp	r3, #1
 8004420:	d015      	beq.n	800444e <HAL_TIM_PWM_Start+0x9e>
 8004422:	2001      	movs	r0, #1
 8004424:	4770      	bx	lr
 8004426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004428:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800442c:	645a      	str	r2, [r3, #68]	; 0x44
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	f002 0207 	and.w	r2, r2, #7
 8004434:	2a06      	cmp	r2, #6
 8004436:	d1d9      	bne.n	80043ec <HAL_TIM_PWM_Start+0x3c>
 8004438:	2000      	movs	r0, #0
 800443a:	bc10      	pop	{r4}
 800443c:	4770      	bx	lr
 800443e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004442:	2b01      	cmp	r3, #1
 8004444:	d1ed      	bne.n	8004422 <HAL_TIM_PWM_Start+0x72>
 8004446:	2302      	movs	r3, #2
 8004448:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800444c:	e7b8      	b.n	80043c0 <HAL_TIM_PWM_Start+0x10>
 800444e:	2302      	movs	r3, #2
 8004450:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8004454:	e7b4      	b.n	80043c0 <HAL_TIM_PWM_Start+0x10>
 8004456:	bf00      	nop
 8004458:	40012c00 	.word	0x40012c00
 800445c:	40000400 	.word	0x40000400

08004460 <HAL_TIM_PWM_ConfigChannel>:
{
 8004460:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004462:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8004466:	2801      	cmp	r0, #1
 8004468:	f000 80c5 	beq.w	80045f6 <HAL_TIM_PWM_ConfigChannel+0x196>
 800446c:	2001      	movs	r0, #1
{
 800446e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8004470:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 8004474:	2a0c      	cmp	r2, #12
 8004476:	d808      	bhi.n	800448a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004478:	e8df f002 	tbb	[pc, r2]
 800447c:	0707073b 	.word	0x0707073b
 8004480:	07070765 	.word	0x07070765
 8004484:	07070792 	.word	0x07070792
 8004488:	0d          	.byte	0x0d
 8004489:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  switch (Channel)
 8004490:	2001      	movs	r0, #1
}
 8004492:	bcf0      	pop	{r4, r5, r6, r7}
 8004494:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004496:	681a      	ldr	r2, [r3, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004498:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 800449a:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800449c:	6a14      	ldr	r4, [r2, #32]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800449e:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044a2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80044a6:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80044a8:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80044aa:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044ac:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044b4:	688e      	ldr	r6, [r1, #8]
 80044b6:	ea40 3006 	orr.w	r0, r0, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ba:	4e68      	ldr	r6, [pc, #416]	; (800465c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80044bc:	42b2      	cmp	r2, r6
 80044be:	f000 80b8 	beq.w	8004632 <HAL_TIM_PWM_ConfigChannel+0x1d2>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c2:	6055      	str	r5, [r2, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044c4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80044c6:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044c8:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 80044ca:	6415      	str	r5, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044cc:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ce:	69d1      	ldr	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80044d0:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044d2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80044d6:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044d8:	69d1      	ldr	r1, [r2, #28]
 80044da:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80044de:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044e0:	69d1      	ldr	r1, [r2, #28]
 80044e2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80044e6:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80044ee:	bcf0      	pop	{r4, r5, r6, r7}
 80044f0:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044f2:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 80044f4:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 80044f6:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f8:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC1P;
 80044fa:	f020 0002 	bic.w	r0, r0, #2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044fe:	f024 0401 	bic.w	r4, r4, #1
 8004502:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004504:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8004506:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004508:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800450c:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 800450e:	688e      	ldr	r6, [r1, #8]
 8004510:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004512:	4e52      	ldr	r6, [pc, #328]	; (800465c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004514:	42b2      	cmp	r2, r6
 8004516:	d070      	beq.n	80045fa <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 8004518:	6055      	str	r5, [r2, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 800451a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800451c:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800451e:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8004520:	6355      	str	r5, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8004522:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004524:	6991      	ldr	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004526:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004528:	f041 0108 	orr.w	r1, r1, #8
 800452c:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800452e:	6991      	ldr	r1, [r2, #24]
 8004530:	f021 0104 	bic.w	r1, r1, #4
 8004534:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004536:	6991      	ldr	r1, [r2, #24]
 8004538:	4321      	orrs	r1, r4
 800453a:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004542:	bcf0      	pop	{r4, r5, r6, r7}
 8004544:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004546:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004548:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 800454a:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800454c:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC2P;
 800454e:	f020 0020 	bic.w	r0, r0, #32
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004552:	f024 0410 	bic.w	r4, r4, #16
 8004556:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004558:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800455a:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800455c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004560:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004564:	688e      	ldr	r6, [r1, #8]
 8004566:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800456a:	4e3c      	ldr	r6, [pc, #240]	; (800465c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800456c:	42b2      	cmp	r2, r6
 800456e:	d051      	beq.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x1b4>
  TIMx->CR2 = tmpcr2;
 8004570:	6055      	str	r5, [r2, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8004572:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004574:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004576:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR2 = OC_Config->Pulse;
 8004578:	6395      	str	r5, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800457a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800457c:	6991      	ldr	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800457e:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004580:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004584:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004586:	6991      	ldr	r1, [r2, #24]
 8004588:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800458c:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800458e:	6991      	ldr	r1, [r2, #24]
 8004590:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8004594:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800459c:	bcf0      	pop	{r4, r5, r6, r7}
 800459e:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045a0:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 80045a2:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 80045a4:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045a6:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC3P;
 80045a8:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ac:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80045b0:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80045b2:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80045b4:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045b6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80045ba:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045bc:	688e      	ldr	r6, [r1, #8]
 80045be:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045c2:	4e26      	ldr	r6, [pc, #152]	; (800465c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80045c4:	42b2      	cmp	r2, r6
 80045c6:	d03a      	beq.n	800463e <HAL_TIM_PWM_ConfigChannel+0x1de>
  TIMx->CR2 = tmpcr2;
 80045c8:	6055      	str	r5, [r2, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 80045ca:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80045cc:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045ce:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR3 = OC_Config->Pulse;
 80045d0:	63d5      	str	r5, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80045d2:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045d4:	69d1      	ldr	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80045d6:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045d8:	f041 0108 	orr.w	r1, r1, #8
 80045dc:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045de:	69d1      	ldr	r1, [r2, #28]
 80045e0:	f021 0104 	bic.w	r1, r1, #4
 80045e4:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045e6:	69d1      	ldr	r1, [r2, #28]
 80045e8:	4321      	orrs	r1, r4
 80045ea:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80045f2:	bcf0      	pop	{r4, r5, r6, r7}
 80045f4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80045f6:	2002      	movs	r0, #2
}
 80045f8:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80045fa:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80045fc:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004600:	4330      	orrs	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004602:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004606:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 800460a:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800460c:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004610:	4335      	orrs	r5, r6
 8004612:	e781      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0xb8>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004614:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004616:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800461a:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800461e:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004622:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8004626:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8004628:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800462c:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8004630:	e79e      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x110>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004632:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004634:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004638:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800463c:	e741      	b.n	80044c2 <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800463e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004640:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004644:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004648:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800464c:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8004650:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8004652:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004656:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 800465a:	e7b5      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800465c:	40012c00 	.word	0x40012c00

08004660 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004660:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004664:	2b01      	cmp	r3, #1
 8004666:	d075      	beq.n	8004754 <HAL_TIM_ConfigClockSource+0xf4>
 8004668:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800466a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800466c:	2001      	movs	r0, #1
{
 800466e:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8004670:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(htim);
 8004672:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004676:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800467a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800467c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004680:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004684:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8004686:	680b      	ldr	r3, [r1, #0]
 8004688:	2b60      	cmp	r3, #96	; 0x60
 800468a:	d065      	beq.n	8004758 <HAL_TIM_ConfigClockSource+0xf8>
 800468c:	d824      	bhi.n	80046d8 <HAL_TIM_ConfigClockSource+0x78>
 800468e:	2b40      	cmp	r3, #64	; 0x40
 8004690:	d07c      	beq.n	800478c <HAL_TIM_ConfigClockSource+0x12c>
 8004692:	d94b      	bls.n	800472c <HAL_TIM_ConfigClockSource+0xcc>
 8004694:	2b50      	cmp	r3, #80	; 0x50
 8004696:	d117      	bne.n	80046c8 <HAL_TIM_ConfigClockSource+0x68>
  HAL_StatusTypeDef status = HAL_OK;
 8004698:	2000      	movs	r0, #0
                               sClockSourceConfig->ClockPolarity,
 800469a:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800469c:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800469e:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046a0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80046a4:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046a6:	6a23      	ldr	r3, [r4, #32]
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ae:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046b8:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80046ba:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046bc:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046c2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c6:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80046c8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80046ca:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80046d0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80046d4:	bc30      	pop	{r4, r5}
 80046d6:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046dc:	d038      	beq.n	8004750 <HAL_TIM_ConfigClockSource+0xf0>
 80046de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e2:	d110      	bne.n	8004706 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046e4:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80046e8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046ea:	432b      	orrs	r3, r5
 80046ec:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ee:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80046f6:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046f8:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046fa:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80046fc:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004702:	60a3      	str	r3, [r4, #8]
      break;
 8004704:	e7e0      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004706:	2b70      	cmp	r3, #112	; 0x70
 8004708:	d1de      	bne.n	80046c8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800470a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800470e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004710:	432b      	orrs	r3, r5
 8004712:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004714:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004718:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800471c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800471e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004720:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004722:	2000      	movs	r0, #0
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004724:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004728:	60a3      	str	r3, [r4, #8]
      break;
 800472a:	e7cd      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800472c:	2b20      	cmp	r3, #32
 800472e:	d002      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0xd6>
 8004730:	d90a      	bls.n	8004748 <HAL_TIM_ConfigClockSource+0xe8>
 8004732:	2b30      	cmp	r3, #48	; 0x30
 8004734:	d1c8      	bne.n	80046c8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8004736:	68a1      	ldr	r1, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004738:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800473a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800473e:	430b      	orrs	r3, r1
 8004740:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004744:	60a3      	str	r3, [r4, #8]
}
 8004746:	e7bf      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004748:	f033 0110 	bics.w	r1, r3, #16
 800474c:	d1bc      	bne.n	80046c8 <HAL_TIM_ConfigClockSource+0x68>
 800474e:	e7f2      	b.n	8004736 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8004750:	2000      	movs	r0, #0
 8004752:	e7b9      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8004754:	2002      	movs	r0, #2
}
 8004756:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8004758:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800475a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800475c:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004760:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004764:	f021 0110 	bic.w	r1, r1, #16
 8004768:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476a:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 800476c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004770:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004774:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004778:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800477a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800477c:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800477e:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 8004780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004784:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004788:	60a3      	str	r3, [r4, #8]
}
 800478a:	e79d      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 800478c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800478e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004790:	6a21      	ldr	r1, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8004792:	2000      	movs	r0, #0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004794:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004798:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479a:	6a23      	ldr	r3, [r4, #32]
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a2:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80047ac:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80047ae:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80047b0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80047b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047b6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80047ba:	60a3      	str	r3, [r4, #8]
}
 80047bc:	e784      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x68>
 80047be:	bf00      	nop

080047c0 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80047c0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80047c4:	2a01      	cmp	r2, #1
 80047c6:	d04b      	beq.n	8004860 <HAL_TIM_SlaveConfigSynchro+0xa0>
 80047c8:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80047ca:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 80047cc:	2001      	movs	r0, #1
{
 80047ce:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 80047d0:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(htim);
 80047d2:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80047da:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80047dc:	6848      	ldr	r0, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 80047de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80047e2:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80047e4:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 80047e6:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80047ea:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 80047ec:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80047ee:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80047f0:	d05b      	beq.n	80048aa <HAL_TIM_SlaveConfigSynchro+0xea>
 80047f2:	d90f      	bls.n	8004814 <HAL_TIM_SlaveConfigSynchro+0x54>
 80047f4:	2860      	cmp	r0, #96	; 0x60
 80047f6:	d035      	beq.n	8004864 <HAL_TIM_SlaveConfigSynchro+0xa4>
 80047f8:	2870      	cmp	r0, #112	; 0x70
 80047fa:	d10e      	bne.n	800481a <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047fc:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8004800:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004802:	432a      	orrs	r2, r5
 8004804:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004806:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800480a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800480e:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004810:	60a2      	str	r2, [r4, #8]
 8004812:	e010      	b.n	8004836 <HAL_TIM_SlaveConfigSynchro+0x76>
  switch (sSlaveConfig->InputTrigger)
 8004814:	2840      	cmp	r0, #64	; 0x40
 8004816:	d038      	beq.n	800488a <HAL_TIM_SlaveConfigSynchro+0xca>
 8004818:	d908      	bls.n	800482c <HAL_TIM_SlaveConfigSynchro+0x6c>
    htim->State = HAL_TIM_STATE_READY;
 800481a:	2201      	movs	r2, #1
    __HAL_UNLOCK(htim);
 800481c:	2100      	movs	r1, #0
    htim->State = HAL_TIM_STATE_READY;
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004822:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004826:	4610      	mov	r0, r2
}
 8004828:	bc30      	pop	{r4, r5}
 800482a:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800482c:	2820      	cmp	r0, #32
 800482e:	d002      	beq.n	8004836 <HAL_TIM_SlaveConfigSynchro+0x76>
 8004830:	d912      	bls.n	8004858 <HAL_TIM_SlaveConfigSynchro+0x98>
 8004832:	2830      	cmp	r0, #48	; 0x30
 8004834:	d1f1      	bne.n	800481a <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_UNLOCK(htim);
 8004836:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8004838:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800483a:	68e2      	ldr	r2, [r4, #12]
  return HAL_OK;
 800483c:	4608      	mov	r0, r1
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800483e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004842:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004844:	68e2      	ldr	r2, [r4, #12]
 8004846:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800484a:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 800484c:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004850:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
}
 8004854:	bc30      	pop	{r4, r5}
 8004856:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004858:	f030 0210 	bics.w	r2, r0, #16
 800485c:	d1dd      	bne.n	800481a <HAL_TIM_SlaveConfigSynchro+0x5a>
 800485e:	e7ea      	b.n	8004836 <HAL_TIM_SlaveConfigSynchro+0x76>
  __HAL_LOCK(htim);
 8004860:	2002      	movs	r0, #2
}
 8004862:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8004864:	6a22      	ldr	r2, [r4, #32]
                               sSlaveConfig->TriggerPolarity,
 8004866:	688d      	ldr	r5, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8004868:	6908      	ldr	r0, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800486a:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800486c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004870:	f021 0110 	bic.w	r1, r1, #16
 8004874:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004876:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004878:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800487c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004880:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004884:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8004886:	6222      	str	r2, [r4, #32]
 8004888:	e7d5      	b.n	8004836 <HAL_TIM_SlaveConfigSynchro+0x76>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800488a:	2d05      	cmp	r5, #5
 800488c:	d0c5      	beq.n	800481a <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 800488e:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004890:	6a22      	ldr	r2, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004892:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	6222      	str	r2, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800489a:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800489c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80048a0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80048a4:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 80048a6:	6220      	str	r0, [r4, #32]
      break;
 80048a8:	e7c5      	b.n	8004836 <HAL_TIM_SlaveConfigSynchro+0x76>
                               sSlaveConfig->TriggerPolarity,
 80048aa:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 80048ac:	6908      	ldr	r0, [r1, #16]
  tmpccer = TIMx->CCER;
 80048ae:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048b0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80048b4:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b6:	6a22      	ldr	r2, [r4, #32]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048be:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c4:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80048c8:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 80048ca:	6221      	str	r1, [r4, #32]
 80048cc:	e7b3      	b.n	8004836 <HAL_TIM_SlaveConfigSynchro+0x76>
 80048ce:	bf00      	nop

080048d0 <HAL_TIM_PeriodElapsedCallback>:
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop

080048d4 <HAL_TIM_OC_DelayElapsedCallback>:
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop

080048d8 <HAL_TIM_IC_CaptureCallback>:
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop

080048dc <HAL_TIM_PWM_PulseFinishedCallback>:
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop

080048e0 <HAL_TIM_TriggerCallback>:
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop

080048e4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048e4:	6803      	ldr	r3, [r0, #0]
{
 80048e6:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048e8:	691a      	ldr	r2, [r3, #16]
{
 80048ea:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048ec:	0791      	lsls	r1, r2, #30
 80048ee:	d502      	bpl.n	80048f6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	0792      	lsls	r2, r2, #30
 80048f4:	d45f      	bmi.n	80049b6 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	0750      	lsls	r0, r2, #29
 80048fa:	d502      	bpl.n	8004902 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	0751      	lsls	r1, r2, #29
 8004900:	d446      	bmi.n	8004990 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	0712      	lsls	r2, r2, #28
 8004906:	d502      	bpl.n	800490e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	0710      	lsls	r0, r2, #28
 800490c:	d42e      	bmi.n	800496c <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	06d2      	lsls	r2, r2, #27
 8004912:	d502      	bpl.n	800491a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	06d0      	lsls	r0, r2, #27
 8004918:	d418      	bmi.n	800494c <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	07d1      	lsls	r1, r2, #31
 800491e:	d502      	bpl.n	8004926 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	07d2      	lsls	r2, r2, #31
 8004924:	d45d      	bmi.n	80049e2 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	0610      	lsls	r0, r2, #24
 800492a:	d502      	bpl.n	8004932 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	0611      	lsls	r1, r2, #24
 8004930:	d45f      	bmi.n	80049f2 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	0652      	lsls	r2, r2, #25
 8004936:	d502      	bpl.n	800493e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	0650      	lsls	r0, r2, #25
 800493c:	d461      	bmi.n	8004a02 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	0691      	lsls	r1, r2, #26
 8004942:	d502      	bpl.n	800494a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	0692      	lsls	r2, r2, #26
 8004948:	d443      	bmi.n	80049d2 <HAL_TIM_IRQHandler+0xee>
}
 800494a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800494c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004950:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004952:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004954:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004956:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004958:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800495a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800495e:	d064      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004960:	f7ff ffba 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004964:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004966:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004968:	7722      	strb	r2, [r4, #28]
 800496a:	e7d6      	b.n	800491a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800496c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004970:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004972:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004974:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004976:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004978:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800497a:	0799      	lsls	r1, r3, #30
 800497c:	d152      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	f7ff ffa9 	bl	80048d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004982:	4620      	mov	r0, r4
 8004984:	f7ff ffaa 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004988:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800498a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498c:	7722      	strb	r2, [r4, #28]
 800498e:	e7be      	b.n	800490e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004990:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004994:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004996:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004998:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800499a:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800499c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800499e:	f413 7f40 	tst.w	r3, #768	; 0x300
 80049a2:	d13c      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a4:	f7ff ff96 	bl	80048d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a8:	4620      	mov	r0, r4
 80049aa:	f7ff ff97 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ae:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049b0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b2:	7722      	strb	r2, [r4, #28]
 80049b4:	e7a5      	b.n	8004902 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049b6:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ba:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049bc:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049be:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	079b      	lsls	r3, r3, #30
 80049c4:	d025      	beq.n	8004a12 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	f7ff ff87 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049cc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ce:	7722      	strb	r2, [r4, #28]
 80049d0:	e791      	b.n	80048f6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049d2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80049d6:	4620      	mov	r0, r4
}
 80049d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80049de:	f000 b8d7 	b.w	8004b90 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049e2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80049e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ea:	f7ff ff71 	bl	80048d0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	e799      	b.n	8004926 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80049f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80049fa:	f000 f8cb 	bl	8004b94 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	e797      	b.n	8004932 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a02:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8004a06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a08:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004a0a:	f7ff ff69 	bl	80048e0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	e795      	b.n	800493e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	f7ff ff5f 	bl	80048d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a16:	4620      	mov	r0, r4
 8004a18:	f7ff ff60 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
 8004a1c:	e7d5      	b.n	80049ca <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	f7ff ff5b 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
 8004a22:	e7c4      	b.n	80049ae <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a24:	f7ff ff58 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
 8004a28:	e7ae      	b.n	8004988 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2a:	f7ff ff53 	bl	80048d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f7ff ff54 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
 8004a34:	e796      	b.n	8004964 <HAL_TIM_IRQHandler+0x80>
 8004a36:	bf00      	nop

08004a38 <HAL_TIMEx_PWMN_Start>:
 8004a38:	bb39      	cbnz	r1, 8004a8a <HAL_TIMEx_PWMN_Start+0x52>
 8004a3a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d12f      	bne.n	8004aa2 <HAL_TIMEx_PWMN_Start+0x6a>
 8004a42:	2302      	movs	r3, #2
 8004a44:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8004a48:	2204      	movs	r2, #4
 8004a4a:	6803      	ldr	r3, [r0, #0]
 8004a4c:	f001 011f 	and.w	r1, r1, #31
 8004a50:	6a18      	ldr	r0, [r3, #32]
 8004a52:	408a      	lsls	r2, r1
 8004a54:	ea20 0002 	bic.w	r0, r0, r2
 8004a58:	b410      	push	{r4}
 8004a5a:	6218      	str	r0, [r3, #32]
 8004a5c:	6a19      	ldr	r1, [r3, #32]
 8004a5e:	4c1e      	ldr	r4, [pc, #120]	; (8004ad8 <HAL_TIMEx_PWMN_Start+0xa0>)
 8004a60:	430a      	orrs	r2, r1
 8004a62:	621a      	str	r2, [r3, #32]
 8004a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a66:	42a3      	cmp	r3, r4
 8004a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a6c:	645a      	str	r2, [r3, #68]	; 0x44
 8004a6e:	d01a      	beq.n	8004aa6 <HAL_TIMEx_PWMN_Start+0x6e>
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a74:	d017      	beq.n	8004aa6 <HAL_TIMEx_PWMN_Start+0x6e>
 8004a76:	4a19      	ldr	r2, [pc, #100]	; (8004adc <HAL_TIMEx_PWMN_Start+0xa4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d014      	beq.n	8004aa6 <HAL_TIMEx_PWMN_Start+0x6e>
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	2000      	movs	r0, #0
 8004a80:	f042 0201 	orr.w	r2, r2, #1
 8004a84:	bc10      	pop	{r4}
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	4770      	bx	lr
 8004a8a:	2904      	cmp	r1, #4
 8004a8c:	d013      	beq.n	8004ab6 <HAL_TIMEx_PWMN_Start+0x7e>
 8004a8e:	2908      	cmp	r1, #8
 8004a90:	d019      	beq.n	8004ac6 <HAL_TIMEx_PWMN_Start+0x8e>
 8004a92:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d103      	bne.n	8004aa2 <HAL_TIMEx_PWMN_Start+0x6a>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8004aa0:	e7d2      	b.n	8004a48 <HAL_TIMEx_PWMN_Start+0x10>
 8004aa2:	2001      	movs	r0, #1
 8004aa4:	4770      	bx	lr
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	f002 0207 	and.w	r2, r2, #7
 8004aac:	2a06      	cmp	r2, #6
 8004aae:	d1e5      	bne.n	8004a7c <HAL_TIMEx_PWMN_Start+0x44>
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	bc10      	pop	{r4}
 8004ab4:	4770      	bx	lr
 8004ab6:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d1f1      	bne.n	8004aa2 <HAL_TIMEx_PWMN_Start+0x6a>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8004ac4:	e7c0      	b.n	8004a48 <HAL_TIMEx_PWMN_Start+0x10>
 8004ac6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d1e9      	bne.n	8004aa2 <HAL_TIMEx_PWMN_Start+0x6a>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8004ad4:	e7b8      	b.n	8004a48 <HAL_TIMEx_PWMN_Start+0x10>
 8004ad6:	bf00      	nop
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40000400 	.word	0x40000400

08004ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ae0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004ae4:	2a01      	cmp	r2, #1
 8004ae6:	d023      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8004ae8:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aea:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aec:	681a      	ldr	r2, [r3, #0]
{
 8004aee:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004af4:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af6:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af8:	4d0e      	ldr	r5, [pc, #56]	; (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004afa:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004afe:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b00:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8004b02:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8004b04:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b06:	d005      	beq.n	8004b14 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004b08:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004b0c:	d002      	beq.n	8004b14 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004b0e:	480a      	ldr	r0, [pc, #40]	; (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8004b10:	4282      	cmp	r2, r0
 8004b12:	d104      	bne.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b14:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b16:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b1a:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b1c:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004b1e:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8004b20:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004b26:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b2a:	4610      	mov	r0, r2
}
 8004b2c:	bc30      	pop	{r4, r5}
 8004b2e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004b30:	2002      	movs	r0, #2
}
 8004b32:	4770      	bx	lr
 8004b34:	40012c00 	.word	0x40012c00
 8004b38:	40000400 	.word	0x40000400

08004b3c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d023      	beq.n	8004b8c <HAL_TIMEx_ConfigBreakDeadTime+0x50>
 8004b44:	4602      	mov	r2, r0
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b46:	e9d1 0302 	ldrd	r0, r3, [r1, #8]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8004b4a:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b52:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b54:	6848      	ldr	r0, [r1, #4]
 8004b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b5a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b5c:	6808      	ldr	r0, [r1, #0]
 8004b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b62:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b64:	6908      	ldr	r0, [r1, #16]
 8004b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8004b6a:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b6c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b6e:	694c      	ldr	r4, [r1, #20]
 8004b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b74:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b76:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8004b78:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b7e:	4303      	orrs	r3, r0
  htim->Instance->BDTR = tmpbdtr;
 8004b80:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004b82:	f882 c03c 	strb.w	ip, [r2, #60]	; 0x3c

  return HAL_OK;
 8004b86:	4660      	mov	r0, ip
}
 8004b88:	bc10      	pop	{r4}
 8004b8a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004b8c:	2002      	movs	r0, #2
}
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIMEx_CommutCallback>:
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop

08004b94 <HAL_TIMEx_BreakCallback>:
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop

08004b98 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d065      	beq.n	8004c68 <HAL_UART_Init+0xd0>
{
 8004b9c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b9e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d055      	beq.n	8004c58 <HAL_UART_Init+0xc0>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bac:	e9d4 2602 	ldrd	r2, r6, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8004bb0:	2124      	movs	r1, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004bb2:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004bb4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8004bb8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bba:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8004bbc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bc0:	69a5      	ldr	r5, [r4, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bc2:	4302      	orrs	r2, r0
 8004bc4:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8004bc6:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc8:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bca:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bcc:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004bd0:	4331      	orrs	r1, r6
 8004bd2:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004bd4:	68d9      	ldr	r1, [r3, #12]


  if(huart->Instance == USART1)
 8004bd6:	4825      	ldr	r0, [pc, #148]	; (8004c6c <HAL_UART_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR1,
 8004bd8:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8004bdc:	f021 010c 	bic.w	r1, r1, #12
 8004be0:	430a      	orrs	r2, r1
 8004be2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004be4:	695a      	ldr	r2, [r3, #20]
  if(huart->Instance == USART1)
 8004be6:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004be8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bec:	ea42 0205 	orr.w	r2, r2, r5
 8004bf0:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8004bf2:	d036      	beq.n	8004c62 <HAL_UART_Init+0xca>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bf4:	f7ff fa3c 	bl	8004070 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bf8:	6862      	ldr	r2, [r4, #4]
 8004bfa:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8004bfe:	0092      	lsls	r2, r2, #2
 8004c00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c08:	f04f 0e64 	mov.w	lr, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0c:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004c0e:	f04f 0c20 	mov.w	ip, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c12:	4817      	ldr	r0, [pc, #92]	; (8004c70 <HAL_UART_Init+0xd8>)
 8004c14:	6821      	ldr	r1, [r4, #0]
 8004c16:	fba0 6203 	umull	r6, r2, r0, r3
 8004c1a:	0952      	lsrs	r2, r2, #5
 8004c1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	3332      	adds	r3, #50	; 0x32
 8004c24:	fba0 0303 	umull	r0, r3, r0, r3
 8004c28:	0112      	lsls	r2, r2, #4
 8004c2a:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 8004c2e:	608a      	str	r2, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c30:	690b      	ldr	r3, [r1, #16]
  return HAL_OK;
 8004c32:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c34:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004c38:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c3a:	694b      	ldr	r3, [r1, #20]
 8004c3c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004c40:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 8004c42:	68cb      	ldr	r3, [r1, #12]
 8004c44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c48:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4a:	6465      	str	r5, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c4c:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c50:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c54:	6365      	str	r5, [r4, #52]	; 0x34
}
 8004c56:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8004c58:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8004c5c:	f7fd f9ea 	bl	8002034 <HAL_UART_MspInit>
 8004c60:	e7a4      	b.n	8004bac <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c62:	f7ff fa15 	bl	8004090 <HAL_RCC_GetPCLK2Freq>
 8004c66:	e7c7      	b.n	8004bf8 <HAL_UART_Init+0x60>
    return HAL_ERROR;
 8004c68:	2001      	movs	r0, #1
}
 8004c6a:	4770      	bx	lr
 8004c6c:	40013800 	.word	0x40013800
 8004c70:	51eb851f 	.word	0x51eb851f

08004c74 <HAL_UART_Transmit>:
{
 8004c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c78:	461d      	mov	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004c7a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d16b      	bne.n	8004d5a <HAL_UART_Transmit+0xe6>
    if ((pData == NULL) || (Size == 0U))
 8004c82:	4688      	mov	r8, r1
 8004c84:	b109      	cbz	r1, 8004c8a <HAL_UART_Transmit+0x16>
 8004c86:	4617      	mov	r7, r2
 8004c88:	b912      	cbnz	r2, 8004c90 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8004c8a:	2001      	movs	r0, #1
}
 8004c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c90:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c92:	f04f 0900 	mov.w	r9, #0
 8004c96:	4604      	mov	r4, r0
 8004c98:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c9c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8004ca0:	f7fd fae0 	bl	8002264 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ca4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8004ca6:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8004cac:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cae:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb0:	d056      	beq.n	8004d60 <HAL_UART_Transmit+0xec>
    while (huart->TxXferCount > 0U)
 8004cb2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d07b      	beq.n	8004db2 <HAL_UART_Transmit+0x13e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	1c69      	adds	r1, r5, #1
 8004cbe:	d11b      	bne.n	8004cf8 <HAL_UART_Transmit+0x84>
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	0612      	lsls	r2, r2, #24
 8004cc4:	d5fc      	bpl.n	8004cc0 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 8004cc6:	f1b8 0f00 	cmp.w	r8, #0
 8004cca:	d041      	beq.n	8004d50 <HAL_UART_Transmit+0xdc>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ccc:	f818 2b01 	ldrb.w	r2, [r8], #1
 8004cd0:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 8004cd2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004cd4:	3a01      	subs	r2, #1
 8004cd6:	b292      	uxth	r2, r2
 8004cd8:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cda:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004cdc:	b292      	uxth	r2, r2
 8004cde:	2a00      	cmp	r2, #0
 8004ce0:	d1ec      	bne.n	8004cbc <HAL_UART_Transmit+0x48>
 8004ce2:	1c68      	adds	r0, r5, #1
 8004ce4:	d142      	bne.n	8004d6c <HAL_UART_Transmit+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	0651      	lsls	r1, r2, #25
 8004cea:	d5fc      	bpl.n	8004ce6 <HAL_UART_Transmit+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8004cec:	2320      	movs	r3, #32
 8004cee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8004cf2:	2000      	movs	r0, #0
}
 8004cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	0617      	lsls	r7, r2, #24
 8004cfc:	d4e3      	bmi.n	8004cc6 <HAL_UART_Transmit+0x52>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cfe:	b12d      	cbz	r5, 8004d0c <HAL_UART_Transmit+0x98>
 8004d00:	f7fd fab0 	bl	8002264 <HAL_GetTick>
 8004d04:	1b80      	subs	r0, r0, r6
 8004d06:	4285      	cmp	r5, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d08:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d0a:	d2d7      	bcs.n	8004cbc <HAL_UART_Transmit+0x48>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	f103 020c 	add.w	r2, r3, #12
 8004d10:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d18:	f103 000c 	add.w	r0, r3, #12
 8004d1c:	e840 2100 	strex	r1, r2, [r0]
 8004d20:	2900      	cmp	r1, #0
 8004d22:	d1f3      	bne.n	8004d0c <HAL_UART_Transmit+0x98>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	f103 0214 	add.w	r2, r3, #20
 8004d28:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	f103 0014 	add.w	r0, r3, #20
 8004d34:	e840 2100 	strex	r1, r2, [r0]
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	d1f3      	bne.n	8004d24 <HAL_UART_Transmit+0xb0>
        huart->gState  = HAL_UART_STATE_READY;
 8004d3c:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8004d3e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        huart->gState  = HAL_UART_STATE_READY;
 8004d42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004d46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_TIMEOUT;
 8004d4a:	2003      	movs	r0, #3
}
 8004d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d50:	f839 2b02 	ldrh.w	r2, [r9], #2
 8004d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d58:	e7ba      	b.n	8004cd0 <HAL_UART_Transmit+0x5c>
    return HAL_BUSY;
 8004d5a:	2002      	movs	r0, #2
}
 8004d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1a5      	bne.n	8004cb2 <HAL_UART_Transmit+0x3e>
 8004d66:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8004d68:	4698      	mov	r8, r3
 8004d6a:	e7a2      	b.n	8004cb2 <HAL_UART_Transmit+0x3e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	0652      	lsls	r2, r2, #25
 8004d70:	d4bc      	bmi.n	8004cec <HAL_UART_Transmit+0x78>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d72:	b12d      	cbz	r5, 8004d80 <HAL_UART_Transmit+0x10c>
 8004d74:	f7fd fa76 	bl	8002264 <HAL_GetTick>
 8004d78:	1b83      	subs	r3, r0, r6
 8004d7a:	429d      	cmp	r5, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d7c:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d7e:	d2b0      	bcs.n	8004ce2 <HAL_UART_Transmit+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	f103 020c 	add.w	r2, r3, #12
 8004d84:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	f103 000c 	add.w	r0, r3, #12
 8004d90:	e840 2100 	strex	r1, r2, [r0]
 8004d94:	2900      	cmp	r1, #0
 8004d96:	d1f3      	bne.n	8004d80 <HAL_UART_Transmit+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	f103 0214 	add.w	r2, r3, #20
 8004d9c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	f103 0014 	add.w	r0, r3, #20
 8004da8:	e840 2100 	strex	r1, r2, [r0]
 8004dac:	2900      	cmp	r1, #0
 8004dae:	d1f3      	bne.n	8004d98 <HAL_UART_Transmit+0x124>
 8004db0:	e7c4      	b.n	8004d3c <HAL_UART_Transmit+0xc8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	e795      	b.n	8004ce2 <HAL_UART_Transmit+0x6e>
 8004db6:	bf00      	nop

08004db8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004db8:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d11e      	bne.n	8004dfe <HAL_UART_Receive_IT+0x46>
    if ((pData == NULL) || (Size == 0U))
 8004dc0:	b101      	cbz	r1, 8004dc4 <HAL_UART_Receive_IT+0xc>
 8004dc2:	b90a      	cbnz	r2, 8004dc8 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 8004dc4:	2001      	movs	r0, #1
}
 8004dc6:	4770      	bx	lr
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc8:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dca:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 8004dce:	6281      	str	r1, [r0, #40]	; 0x28
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dd0:	6901      	ldr	r1, [r0, #16]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd2:	6303      	str	r3, [r0, #48]	; 0x30
  huart->RxXferSize = Size;
 8004dd4:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004dd6:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd8:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004dda:	6803      	ldr	r3, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ddc:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004de0:	b119      	cbz	r1, 8004dea <HAL_UART_Receive_IT+0x32>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de8:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004dea:	695a      	ldr	r2, [r3, #20]
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004dec:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	f042 0220 	orr.w	r2, r2, #32
 8004dfa:	60da      	str	r2, [r3, #12]
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004dfc:	4770      	bx	lr
    return HAL_BUSY;
 8004dfe:	2002      	movs	r0, #2
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop

08004e04 <HAL_UART_TxCpltCallback>:
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop

08004e08 <HAL_UART_ErrorCallback>:
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop

08004e0c <UART_DMAAbortOnError>:
{
 8004e0c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8004e0e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e10:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004e12:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e14:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004e16:	f7ff fff7 	bl	8004e08 <HAL_UART_ErrorCallback>
}
 8004e1a:	bd08      	pop	{r3, pc}

08004e1c <HAL_UARTEx_RxEventCallback>:
}
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop

08004e20 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e20:	6883      	ldr	r3, [r0, #8]
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e26:	d045      	beq.n	8004eb4 <UART_Receive_IT.part.0.isra.0+0x94>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e28:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d03a      	beq.n	8004ea4 <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e2e:	6803      	ldr	r3, [r0, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e36:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004e38:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004e3a:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8004e3c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 2U;
 8004e3e:	6282      	str	r2, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d133      	bne.n	8004eb2 <UART_Receive_IT.part.0.isra.0+0x92>
      huart->RxState = HAL_UART_STATE_READY;
 8004e4a:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e4e:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004e50:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e52:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004e54:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e56:	f021 0120 	bic.w	r1, r1, #32
 8004e5a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e5c:	68d1      	ldr	r1, [r2, #12]
 8004e5e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004e62:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e64:	6951      	ldr	r1, [r2, #20]
 8004e66:	f021 0101 	bic.w	r1, r1, #1
 8004e6a:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004e6c:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e70:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e72:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004e74:	2901      	cmp	r1, #1
 8004e76:	d127      	bne.n	8004ec8 <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e78:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	f102 030c 	add.w	r3, r2, #12
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e82:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	f102 0c0c 	add.w	ip, r2, #12
 8004e8a:	e84c 3100 	strex	r1, r3, [ip]
 8004e8e:	2900      	cmp	r1, #0
 8004e90:	d1f3      	bne.n	8004e7a <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e92:	6813      	ldr	r3, [r2, #0]
 8004e94:	06db      	lsls	r3, r3, #27
 8004e96:	d421      	bmi.n	8004edc <UART_Receive_IT.part.0.isra.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e98:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004e9a:	f7ff ffbf 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
}
 8004e9e:	b003      	add	sp, #12
 8004ea0:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ea4:	6903      	ldr	r3, [r0, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1c1      	bne.n	8004e2e <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eaa:	6803      	ldr	r3, [r0, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	7013      	strb	r3, [r2, #0]
 8004eb0:	e7c2      	b.n	8004e38 <UART_Receive_IT.part.0.isra.0+0x18>
 8004eb2:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb4:	6903      	ldr	r3, [r0, #16]
 8004eb6:	b963      	cbnz	r3, 8004ed2 <UART_Receive_IT.part.0.isra.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eb8:	6803      	ldr	r3, [r0, #0]
 8004eba:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec2:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8004ec6:	e7b9      	b.n	8004e3c <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 8004ec8:	f7fc ff48 	bl	8001d5c <HAL_UART_RxCpltCallback>
}
 8004ecc:	b003      	add	sp, #12
 8004ece:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ed2:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ed4:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	7013      	strb	r3, [r2, #0]
 8004eda:	e7ad      	b.n	8004e38 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004edc:	2300      	movs	r3, #0
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	6813      	ldr	r3, [r2, #0]
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	6853      	ldr	r3, [r2, #4]
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	9b01      	ldr	r3, [sp, #4]
 8004eea:	e7d5      	b.n	8004e98 <UART_Receive_IT.part.0.isra.0+0x78>

08004eec <HAL_UART_IRQHandler>:
{
 8004eec:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004eee:	6803      	ldr	r3, [r0, #0]
{
 8004ef0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ef2:	681a      	ldr	r2, [r3, #0]
{
 8004ef4:	b083      	sub	sp, #12
  if (errorflags == RESET)
 8004ef6:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004efa:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004efc:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004efe:	d16f      	bne.n	8004fe0 <HAL_UART_IRQHandler+0xf4>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f00:	0695      	lsls	r5, r2, #26
 8004f02:	d502      	bpl.n	8004f0a <HAL_UART_IRQHandler+0x1e>
 8004f04:	068d      	lsls	r5, r1, #26
 8004f06:	f100 80b3 	bmi.w	8005070 <HAL_UART_IRQHandler+0x184>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004f0c:	2801      	cmp	r0, #1
 8004f0e:	d00b      	beq.n	8004f28 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f10:	0610      	lsls	r0, r2, #24
 8004f12:	d502      	bpl.n	8004f1a <HAL_UART_IRQHandler+0x2e>
 8004f14:	060d      	lsls	r5, r1, #24
 8004f16:	f100 80b5 	bmi.w	8005084 <HAL_UART_IRQHandler+0x198>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f1a:	0650      	lsls	r0, r2, #25
 8004f1c:	d502      	bpl.n	8004f24 <HAL_UART_IRQHandler+0x38>
 8004f1e:	064a      	lsls	r2, r1, #25
 8004f20:	f100 80cf 	bmi.w	80050c2 <HAL_UART_IRQHandler+0x1d6>
}
 8004f24:	b003      	add	sp, #12
 8004f26:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f28:	06d5      	lsls	r5, r2, #27
 8004f2a:	d5f1      	bpl.n	8004f10 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f2c:	06c8      	lsls	r0, r1, #27
 8004f2e:	d5ef      	bpl.n	8004f10 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f30:	2200      	movs	r2, #0
 8004f32:	9201      	str	r2, [sp, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	9201      	str	r2, [sp, #4]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	9201      	str	r2, [sp, #4]
 8004f3c:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	0655      	lsls	r5, r2, #25
 8004f42:	f140 8118 	bpl.w	8005176 <HAL_UART_IRQHandler+0x28a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f46:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004f48:	6802      	ldr	r2, [r0, #0]
 8004f4a:	6852      	ldr	r2, [r2, #4]
 8004f4c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004f4e:	2a00      	cmp	r2, #0
 8004f50:	d0e8      	beq.n	8004f24 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f52:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004f54:	4291      	cmp	r1, r2
 8004f56:	d9e5      	bls.n	8004f24 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8004f58:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f5a:	6982      	ldr	r2, [r0, #24]
 8004f5c:	2a20      	cmp	r2, #32
 8004f5e:	d036      	beq.n	8004fce <HAL_UART_IRQHandler+0xe2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	f103 020c 	add.w	r2, r3, #12
 8004f64:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	f103 050c 	add.w	r5, r3, #12
 8004f70:	e845 2100 	strex	r1, r2, [r5]
 8004f74:	2900      	cmp	r1, #0
 8004f76:	d1f3      	bne.n	8004f60 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	f103 0214 	add.w	r2, r3, #20
 8004f7c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f80:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	f103 0514 	add.w	r5, r3, #20
 8004f88:	e845 2100 	strex	r1, r2, [r5]
 8004f8c:	2900      	cmp	r1, #0
 8004f8e:	d1f3      	bne.n	8004f78 <HAL_UART_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	f103 0214 	add.w	r2, r3, #20
 8004f94:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	f103 0514 	add.w	r5, r3, #20
 8004fa0:	e845 2100 	strex	r1, r2, [r5]
 8004fa4:	2900      	cmp	r1, #0
 8004fa6:	d1f3      	bne.n	8004f90 <HAL_UART_IRQHandler+0xa4>
          huart->RxState = HAL_UART_STATE_READY;
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fae:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	f103 020c 	add.w	r2, r3, #12
 8004fb4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	f103 050c 	add.w	r5, r3, #12
 8004fc0:	e845 2100 	strex	r1, r2, [r5]
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	d1f3      	bne.n	8004fb0 <HAL_UART_IRQHandler+0xc4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fc8:	f7fd fd5c 	bl	8002a84 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fcc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fce:	2302      	movs	r3, #2
 8004fd0:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fd2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	1ac9      	subs	r1, r1, r3
 8004fd8:	b289      	uxth	r1, r1
 8004fda:	f7ff ff1f 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
 8004fde:	e7a1      	b.n	8004f24 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fe0:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fe4:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8004fe8:	4328      	orrs	r0, r5
 8004fea:	d08e      	beq.n	8004f0a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fec:	07d0      	lsls	r0, r2, #31
 8004fee:	d505      	bpl.n	8004ffc <HAL_UART_IRQHandler+0x110>
 8004ff0:	05c8      	lsls	r0, r1, #23
 8004ff2:	d503      	bpl.n	8004ffc <HAL_UART_IRQHandler+0x110>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ff4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004ff6:	f040 0001 	orr.w	r0, r0, #1
 8004ffa:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ffc:	0750      	lsls	r0, r2, #29
 8004ffe:	d532      	bpl.n	8005066 <HAL_UART_IRQHandler+0x17a>
 8005000:	b14d      	cbz	r5, 8005016 <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005002:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005004:	f040 0002 	orr.w	r0, r0, #2
 8005008:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800500a:	0790      	lsls	r0, r2, #30
 800500c:	d503      	bpl.n	8005016 <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800500e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005010:	f040 0004 	orr.w	r0, r0, #4
 8005014:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005016:	0710      	lsls	r0, r2, #28
 8005018:	d507      	bpl.n	800502a <HAL_UART_IRQHandler+0x13e>
 800501a:	f001 0020 	and.w	r0, r1, #32
 800501e:	4328      	orrs	r0, r5
 8005020:	d003      	beq.n	800502a <HAL_UART_IRQHandler+0x13e>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005022:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005024:	f040 0008 	orr.w	r0, r0, #8
 8005028:	6460      	str	r0, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800502a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800502c:	2800      	cmp	r0, #0
 800502e:	f43f af79 	beq.w	8004f24 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005032:	0690      	lsls	r0, r2, #26
 8005034:	d509      	bpl.n	800504a <HAL_UART_IRQHandler+0x15e>
 8005036:	0689      	lsls	r1, r1, #26
 8005038:	d507      	bpl.n	800504a <HAL_UART_IRQHandler+0x15e>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800503a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800503e:	2a22      	cmp	r2, #34	; 0x22
 8005040:	d103      	bne.n	800504a <HAL_UART_IRQHandler+0x15e>
 8005042:	4620      	mov	r0, r4
 8005044:	f7ff feec 	bl	8004e20 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800504c:	6c61      	ldr	r1, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800504e:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005052:	f001 0108 	and.w	r1, r1, #8
 8005056:	ea52 0501 	orrs.w	r5, r2, r1
 800505a:	d13d      	bne.n	80050d8 <HAL_UART_IRQHandler+0x1ec>
        HAL_UART_ErrorCallback(huart);
 800505c:	4620      	mov	r0, r4
 800505e:	f7ff fed3 	bl	8004e08 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005062:	6465      	str	r5, [r4, #68]	; 0x44
 8005064:	e75e      	b.n	8004f24 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005066:	0790      	lsls	r0, r2, #30
 8005068:	d5d5      	bpl.n	8005016 <HAL_UART_IRQHandler+0x12a>
 800506a:	2d00      	cmp	r5, #0
 800506c:	d1cf      	bne.n	800500e <HAL_UART_IRQHandler+0x122>
 800506e:	e7d2      	b.n	8005016 <HAL_UART_IRQHandler+0x12a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005070:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8005074:	2b22      	cmp	r3, #34	; 0x22
 8005076:	f47f af55 	bne.w	8004f24 <HAL_UART_IRQHandler+0x38>
}
 800507a:	b003      	add	sp, #12
 800507c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005080:	f7ff bece 	b.w	8004e20 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005084:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005088:	2a21      	cmp	r2, #33	; 0x21
 800508a:	f47f af4b 	bne.w	8004f24 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800508e:	68a2      	ldr	r2, [r4, #8]
 8005090:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005094:	f000 80aa 	beq.w	80051ec <HAL_UART_IRQHandler+0x300>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005098:	6a22      	ldr	r2, [r4, #32]
 800509a:	1c51      	adds	r1, r2, #1
 800509c:	6221      	str	r1, [r4, #32]
 800509e:	7812      	ldrb	r2, [r2, #0]
 80050a0:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80050a2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80050a4:	3a01      	subs	r2, #1
 80050a6:	b292      	uxth	r2, r2
 80050a8:	84e2      	strh	r2, [r4, #38]	; 0x26
 80050aa:	2a00      	cmp	r2, #0
 80050ac:	f47f af3a 	bne.w	8004f24 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050b6:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050be:	60da      	str	r2, [r3, #12]
 80050c0:	e730      	b.n	8004f24 <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 80050c2:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050c4:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80050c6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050cc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80050ce:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 80050d2:	f7ff fe97 	bl	8004e04 <HAL_UART_TxCpltCallback>
    return;
 80050d6:	e725      	b.n	8004f24 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	f103 020c 	add.w	r2, r3, #12
 80050dc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	f103 000c 	add.w	r0, r3, #12
 80050e8:	e840 2100 	strex	r1, r2, [r0]
 80050ec:	2900      	cmp	r1, #0
 80050ee:	d1f3      	bne.n	80050d8 <HAL_UART_IRQHandler+0x1ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	f103 0214 	add.w	r2, r3, #20
 80050f4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	f103 0014 	add.w	r0, r3, #20
 8005100:	e840 2100 	strex	r1, r2, [r0]
 8005104:	2900      	cmp	r1, #0
 8005106:	d1f3      	bne.n	80050f0 <HAL_UART_IRQHandler+0x204>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005108:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800510a:	2a01      	cmp	r2, #1
 800510c:	d022      	beq.n	8005154 <HAL_UART_IRQHandler+0x268>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005110:	2120      	movs	r1, #32
 8005112:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005116:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	695a      	ldr	r2, [r3, #20]
 800511a:	0652      	lsls	r2, r2, #25
 800511c:	d527      	bpl.n	800516e <HAL_UART_IRQHandler+0x282>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	f103 0214 	add.w	r2, r3, #20
 8005122:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	f103 0014 	add.w	r0, r3, #20
 800512e:	e840 2100 	strex	r1, r2, [r0]
 8005132:	2900      	cmp	r1, #0
 8005134:	d1f3      	bne.n	800511e <HAL_UART_IRQHandler+0x232>
          if (huart->hdmarx != NULL)
 8005136:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005138:	b1c8      	cbz	r0, 800516e <HAL_UART_IRQHandler+0x282>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800513a:	4b32      	ldr	r3, [pc, #200]	; (8005204 <HAL_UART_IRQHandler+0x318>)
 800513c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800513e:	f7fd fcc5 	bl	8002acc <HAL_DMA_Abort_IT>
 8005142:	2800      	cmp	r0, #0
 8005144:	f43f aeee 	beq.w	8004f24 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005148:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800514a:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800514c:	b003      	add	sp, #12
 800514e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005152:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	f103 020c 	add.w	r2, r3, #12
 8005158:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800515c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	f103 000c 	add.w	r0, r3, #12
 8005164:	e840 2100 	strex	r1, r2, [r0]
 8005168:	2900      	cmp	r1, #0
 800516a:	d1f3      	bne.n	8005154 <HAL_UART_IRQHandler+0x268>
 800516c:	e7cf      	b.n	800510e <HAL_UART_IRQHandler+0x222>
            HAL_UART_ErrorCallback(huart);
 800516e:	4620      	mov	r0, r4
 8005170:	f7ff fe4a 	bl	8004e08 <HAL_UART_ErrorCallback>
 8005174:	e6d6      	b.n	8004f24 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005176:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8005178:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800517a:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 800517c:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800517e:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005180:	2a00      	cmp	r2, #0
 8005182:	f43f aecf 	beq.w	8004f24 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005186:	1a41      	subs	r1, r0, r1
 8005188:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800518a:	2900      	cmp	r1, #0
 800518c:	f43f aeca 	beq.w	8004f24 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	f103 020c 	add.w	r2, r3, #12
 8005194:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005198:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	f103 050c 	add.w	r5, r3, #12
 80051a0:	e845 2000 	strex	r0, r2, [r5]
 80051a4:	2800      	cmp	r0, #0
 80051a6:	d1f3      	bne.n	8005190 <HAL_UART_IRQHandler+0x2a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	f103 0214 	add.w	r2, r3, #20
 80051ac:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	f103 0514 	add.w	r5, r3, #20
 80051b8:	e845 2000 	strex	r0, r2, [r5]
 80051bc:	2800      	cmp	r0, #0
 80051be:	d1f3      	bne.n	80051a8 <HAL_UART_IRQHandler+0x2bc>
        huart->RxState = HAL_UART_STATE_READY;
 80051c0:	2220      	movs	r2, #32
 80051c2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c6:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	f103 020c 	add.w	r2, r3, #12
 80051cc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	f103 050c 	add.w	r5, r3, #12
 80051d8:	e845 2000 	strex	r0, r2, [r5]
 80051dc:	2800      	cmp	r0, #0
 80051de:	d1f3      	bne.n	80051c8 <HAL_UART_IRQHandler+0x2dc>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051e0:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051e2:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051e4:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051e6:	f7ff fe19 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
 80051ea:	e69b      	b.n	8004f24 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ec:	6922      	ldr	r2, [r4, #16]
 80051ee:	2a00      	cmp	r2, #0
 80051f0:	f47f af52 	bne.w	8005098 <HAL_UART_IRQHandler+0x1ac>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051f4:	6a22      	ldr	r2, [r4, #32]
 80051f6:	f832 1b02 	ldrh.w	r1, [r2], #2
 80051fa:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80051fe:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005200:	6222      	str	r2, [r4, #32]
 8005202:	e74e      	b.n	80050a2 <HAL_UART_IRQHandler+0x1b6>
 8005204:	08004e0d 	.word	0x08004e0d

08005208 <_vsiprintf_r>:
 8005208:	b500      	push	{lr}
 800520a:	b09b      	sub	sp, #108	; 0x6c
 800520c:	9100      	str	r1, [sp, #0]
 800520e:	9104      	str	r1, [sp, #16]
 8005210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005214:	9105      	str	r1, [sp, #20]
 8005216:	9102      	str	r1, [sp, #8]
 8005218:	4905      	ldr	r1, [pc, #20]	; (8005230 <_vsiprintf_r+0x28>)
 800521a:	9103      	str	r1, [sp, #12]
 800521c:	4669      	mov	r1, sp
 800521e:	f000 f995 	bl	800554c <_svfiprintf_r>
 8005222:	2200      	movs	r2, #0
 8005224:	9b00      	ldr	r3, [sp, #0]
 8005226:	701a      	strb	r2, [r3, #0]
 8005228:	b01b      	add	sp, #108	; 0x6c
 800522a:	f85d fb04 	ldr.w	pc, [sp], #4
 800522e:	bf00      	nop
 8005230:	ffff0208 	.word	0xffff0208

08005234 <vsiprintf>:
 8005234:	4613      	mov	r3, r2
 8005236:	460a      	mov	r2, r1
 8005238:	4601      	mov	r1, r0
 800523a:	4802      	ldr	r0, [pc, #8]	; (8005244 <vsiprintf+0x10>)
 800523c:	6800      	ldr	r0, [r0, #0]
 800523e:	f7ff bfe3 	b.w	8005208 <_vsiprintf_r>
 8005242:	bf00      	nop
 8005244:	20000074 	.word	0x20000074

08005248 <memset>:
 8005248:	4603      	mov	r3, r0
 800524a:	4402      	add	r2, r0
 800524c:	4293      	cmp	r3, r2
 800524e:	d100      	bne.n	8005252 <memset+0xa>
 8005250:	4770      	bx	lr
 8005252:	f803 1b01 	strb.w	r1, [r3], #1
 8005256:	e7f9      	b.n	800524c <memset+0x4>

08005258 <__errno>:
 8005258:	4b01      	ldr	r3, [pc, #4]	; (8005260 <__errno+0x8>)
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	20000074 	.word	0x20000074

08005264 <__libc_init_array>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	2600      	movs	r6, #0
 8005268:	4d0c      	ldr	r5, [pc, #48]	; (800529c <__libc_init_array+0x38>)
 800526a:	4c0d      	ldr	r4, [pc, #52]	; (80052a0 <__libc_init_array+0x3c>)
 800526c:	1b64      	subs	r4, r4, r5
 800526e:	10a4      	asrs	r4, r4, #2
 8005270:	42a6      	cmp	r6, r4
 8005272:	d109      	bne.n	8005288 <__libc_init_array+0x24>
 8005274:	f000 fc7a 	bl	8005b6c <_init>
 8005278:	2600      	movs	r6, #0
 800527a:	4d0a      	ldr	r5, [pc, #40]	; (80052a4 <__libc_init_array+0x40>)
 800527c:	4c0a      	ldr	r4, [pc, #40]	; (80052a8 <__libc_init_array+0x44>)
 800527e:	1b64      	subs	r4, r4, r5
 8005280:	10a4      	asrs	r4, r4, #2
 8005282:	42a6      	cmp	r6, r4
 8005284:	d105      	bne.n	8005292 <__libc_init_array+0x2e>
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	f855 3b04 	ldr.w	r3, [r5], #4
 800528c:	4798      	blx	r3
 800528e:	3601      	adds	r6, #1
 8005290:	e7ee      	b.n	8005270 <__libc_init_array+0xc>
 8005292:	f855 3b04 	ldr.w	r3, [r5], #4
 8005296:	4798      	blx	r3
 8005298:	3601      	adds	r6, #1
 800529a:	e7f2      	b.n	8005282 <__libc_init_array+0x1e>
 800529c:	08005db8 	.word	0x08005db8
 80052a0:	08005db8 	.word	0x08005db8
 80052a4:	08005db8 	.word	0x08005db8
 80052a8:	08005dbc 	.word	0x08005dbc

080052ac <__retarget_lock_acquire_recursive>:
 80052ac:	4770      	bx	lr

080052ae <__retarget_lock_release_recursive>:
 80052ae:	4770      	bx	lr

080052b0 <_free_r>:
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4605      	mov	r5, r0
 80052b4:	2900      	cmp	r1, #0
 80052b6:	d040      	beq.n	800533a <_free_r+0x8a>
 80052b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052bc:	1f0c      	subs	r4, r1, #4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bfb8      	it	lt
 80052c2:	18e4      	addlt	r4, r4, r3
 80052c4:	f000 f8dc 	bl	8005480 <__malloc_lock>
 80052c8:	4a1c      	ldr	r2, [pc, #112]	; (800533c <_free_r+0x8c>)
 80052ca:	6813      	ldr	r3, [r2, #0]
 80052cc:	b933      	cbnz	r3, 80052dc <_free_r+0x2c>
 80052ce:	6063      	str	r3, [r4, #4]
 80052d0:	6014      	str	r4, [r2, #0]
 80052d2:	4628      	mov	r0, r5
 80052d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052d8:	f000 b8d8 	b.w	800548c <__malloc_unlock>
 80052dc:	42a3      	cmp	r3, r4
 80052de:	d908      	bls.n	80052f2 <_free_r+0x42>
 80052e0:	6820      	ldr	r0, [r4, #0]
 80052e2:	1821      	adds	r1, r4, r0
 80052e4:	428b      	cmp	r3, r1
 80052e6:	bf01      	itttt	eq
 80052e8:	6819      	ldreq	r1, [r3, #0]
 80052ea:	685b      	ldreq	r3, [r3, #4]
 80052ec:	1809      	addeq	r1, r1, r0
 80052ee:	6021      	streq	r1, [r4, #0]
 80052f0:	e7ed      	b.n	80052ce <_free_r+0x1e>
 80052f2:	461a      	mov	r2, r3
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	b10b      	cbz	r3, 80052fc <_free_r+0x4c>
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	d9fa      	bls.n	80052f2 <_free_r+0x42>
 80052fc:	6811      	ldr	r1, [r2, #0]
 80052fe:	1850      	adds	r0, r2, r1
 8005300:	42a0      	cmp	r0, r4
 8005302:	d10b      	bne.n	800531c <_free_r+0x6c>
 8005304:	6820      	ldr	r0, [r4, #0]
 8005306:	4401      	add	r1, r0
 8005308:	1850      	adds	r0, r2, r1
 800530a:	4283      	cmp	r3, r0
 800530c:	6011      	str	r1, [r2, #0]
 800530e:	d1e0      	bne.n	80052d2 <_free_r+0x22>
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	4408      	add	r0, r1
 8005316:	6010      	str	r0, [r2, #0]
 8005318:	6053      	str	r3, [r2, #4]
 800531a:	e7da      	b.n	80052d2 <_free_r+0x22>
 800531c:	d902      	bls.n	8005324 <_free_r+0x74>
 800531e:	230c      	movs	r3, #12
 8005320:	602b      	str	r3, [r5, #0]
 8005322:	e7d6      	b.n	80052d2 <_free_r+0x22>
 8005324:	6820      	ldr	r0, [r4, #0]
 8005326:	1821      	adds	r1, r4, r0
 8005328:	428b      	cmp	r3, r1
 800532a:	bf01      	itttt	eq
 800532c:	6819      	ldreq	r1, [r3, #0]
 800532e:	685b      	ldreq	r3, [r3, #4]
 8005330:	1809      	addeq	r1, r1, r0
 8005332:	6021      	streq	r1, [r4, #0]
 8005334:	6063      	str	r3, [r4, #4]
 8005336:	6054      	str	r4, [r2, #4]
 8005338:	e7cb      	b.n	80052d2 <_free_r+0x22>
 800533a:	bd38      	pop	{r3, r4, r5, pc}
 800533c:	200004b8 	.word	0x200004b8

08005340 <sbrk_aligned>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	4e0e      	ldr	r6, [pc, #56]	; (800537c <sbrk_aligned+0x3c>)
 8005344:	460c      	mov	r4, r1
 8005346:	6831      	ldr	r1, [r6, #0]
 8005348:	4605      	mov	r5, r0
 800534a:	b911      	cbnz	r1, 8005352 <sbrk_aligned+0x12>
 800534c:	f000 fbaa 	bl	8005aa4 <_sbrk_r>
 8005350:	6030      	str	r0, [r6, #0]
 8005352:	4621      	mov	r1, r4
 8005354:	4628      	mov	r0, r5
 8005356:	f000 fba5 	bl	8005aa4 <_sbrk_r>
 800535a:	1c43      	adds	r3, r0, #1
 800535c:	d00a      	beq.n	8005374 <sbrk_aligned+0x34>
 800535e:	1cc4      	adds	r4, r0, #3
 8005360:	f024 0403 	bic.w	r4, r4, #3
 8005364:	42a0      	cmp	r0, r4
 8005366:	d007      	beq.n	8005378 <sbrk_aligned+0x38>
 8005368:	1a21      	subs	r1, r4, r0
 800536a:	4628      	mov	r0, r5
 800536c:	f000 fb9a 	bl	8005aa4 <_sbrk_r>
 8005370:	3001      	adds	r0, #1
 8005372:	d101      	bne.n	8005378 <sbrk_aligned+0x38>
 8005374:	f04f 34ff 	mov.w	r4, #4294967295
 8005378:	4620      	mov	r0, r4
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	200004bc 	.word	0x200004bc

08005380 <_malloc_r>:
 8005380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005384:	1ccd      	adds	r5, r1, #3
 8005386:	f025 0503 	bic.w	r5, r5, #3
 800538a:	3508      	adds	r5, #8
 800538c:	2d0c      	cmp	r5, #12
 800538e:	bf38      	it	cc
 8005390:	250c      	movcc	r5, #12
 8005392:	2d00      	cmp	r5, #0
 8005394:	4607      	mov	r7, r0
 8005396:	db01      	blt.n	800539c <_malloc_r+0x1c>
 8005398:	42a9      	cmp	r1, r5
 800539a:	d905      	bls.n	80053a8 <_malloc_r+0x28>
 800539c:	230c      	movs	r3, #12
 800539e:	2600      	movs	r6, #0
 80053a0:	603b      	str	r3, [r7, #0]
 80053a2:	4630      	mov	r0, r6
 80053a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800547c <_malloc_r+0xfc>
 80053ac:	f000 f868 	bl	8005480 <__malloc_lock>
 80053b0:	f8d8 3000 	ldr.w	r3, [r8]
 80053b4:	461c      	mov	r4, r3
 80053b6:	bb5c      	cbnz	r4, 8005410 <_malloc_r+0x90>
 80053b8:	4629      	mov	r1, r5
 80053ba:	4638      	mov	r0, r7
 80053bc:	f7ff ffc0 	bl	8005340 <sbrk_aligned>
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	4604      	mov	r4, r0
 80053c4:	d155      	bne.n	8005472 <_malloc_r+0xf2>
 80053c6:	f8d8 4000 	ldr.w	r4, [r8]
 80053ca:	4626      	mov	r6, r4
 80053cc:	2e00      	cmp	r6, #0
 80053ce:	d145      	bne.n	800545c <_malloc_r+0xdc>
 80053d0:	2c00      	cmp	r4, #0
 80053d2:	d048      	beq.n	8005466 <_malloc_r+0xe6>
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	4631      	mov	r1, r6
 80053d8:	4638      	mov	r0, r7
 80053da:	eb04 0903 	add.w	r9, r4, r3
 80053de:	f000 fb61 	bl	8005aa4 <_sbrk_r>
 80053e2:	4581      	cmp	r9, r0
 80053e4:	d13f      	bne.n	8005466 <_malloc_r+0xe6>
 80053e6:	6821      	ldr	r1, [r4, #0]
 80053e8:	4638      	mov	r0, r7
 80053ea:	1a6d      	subs	r5, r5, r1
 80053ec:	4629      	mov	r1, r5
 80053ee:	f7ff ffa7 	bl	8005340 <sbrk_aligned>
 80053f2:	3001      	adds	r0, #1
 80053f4:	d037      	beq.n	8005466 <_malloc_r+0xe6>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	442b      	add	r3, r5
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	f8d8 3000 	ldr.w	r3, [r8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d038      	beq.n	8005476 <_malloc_r+0xf6>
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	42a2      	cmp	r2, r4
 8005408:	d12b      	bne.n	8005462 <_malloc_r+0xe2>
 800540a:	2200      	movs	r2, #0
 800540c:	605a      	str	r2, [r3, #4]
 800540e:	e00f      	b.n	8005430 <_malloc_r+0xb0>
 8005410:	6822      	ldr	r2, [r4, #0]
 8005412:	1b52      	subs	r2, r2, r5
 8005414:	d41f      	bmi.n	8005456 <_malloc_r+0xd6>
 8005416:	2a0b      	cmp	r2, #11
 8005418:	d917      	bls.n	800544a <_malloc_r+0xca>
 800541a:	1961      	adds	r1, r4, r5
 800541c:	42a3      	cmp	r3, r4
 800541e:	6025      	str	r5, [r4, #0]
 8005420:	bf18      	it	ne
 8005422:	6059      	strne	r1, [r3, #4]
 8005424:	6863      	ldr	r3, [r4, #4]
 8005426:	bf08      	it	eq
 8005428:	f8c8 1000 	streq.w	r1, [r8]
 800542c:	5162      	str	r2, [r4, r5]
 800542e:	604b      	str	r3, [r1, #4]
 8005430:	4638      	mov	r0, r7
 8005432:	f104 060b 	add.w	r6, r4, #11
 8005436:	f000 f829 	bl	800548c <__malloc_unlock>
 800543a:	f026 0607 	bic.w	r6, r6, #7
 800543e:	1d23      	adds	r3, r4, #4
 8005440:	1af2      	subs	r2, r6, r3
 8005442:	d0ae      	beq.n	80053a2 <_malloc_r+0x22>
 8005444:	1b9b      	subs	r3, r3, r6
 8005446:	50a3      	str	r3, [r4, r2]
 8005448:	e7ab      	b.n	80053a2 <_malloc_r+0x22>
 800544a:	42a3      	cmp	r3, r4
 800544c:	6862      	ldr	r2, [r4, #4]
 800544e:	d1dd      	bne.n	800540c <_malloc_r+0x8c>
 8005450:	f8c8 2000 	str.w	r2, [r8]
 8005454:	e7ec      	b.n	8005430 <_malloc_r+0xb0>
 8005456:	4623      	mov	r3, r4
 8005458:	6864      	ldr	r4, [r4, #4]
 800545a:	e7ac      	b.n	80053b6 <_malloc_r+0x36>
 800545c:	4634      	mov	r4, r6
 800545e:	6876      	ldr	r6, [r6, #4]
 8005460:	e7b4      	b.n	80053cc <_malloc_r+0x4c>
 8005462:	4613      	mov	r3, r2
 8005464:	e7cc      	b.n	8005400 <_malloc_r+0x80>
 8005466:	230c      	movs	r3, #12
 8005468:	4638      	mov	r0, r7
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	f000 f80e 	bl	800548c <__malloc_unlock>
 8005470:	e797      	b.n	80053a2 <_malloc_r+0x22>
 8005472:	6025      	str	r5, [r4, #0]
 8005474:	e7dc      	b.n	8005430 <_malloc_r+0xb0>
 8005476:	605b      	str	r3, [r3, #4]
 8005478:	deff      	udf	#255	; 0xff
 800547a:	bf00      	nop
 800547c:	200004b8 	.word	0x200004b8

08005480 <__malloc_lock>:
 8005480:	4801      	ldr	r0, [pc, #4]	; (8005488 <__malloc_lock+0x8>)
 8005482:	f7ff bf13 	b.w	80052ac <__retarget_lock_acquire_recursive>
 8005486:	bf00      	nop
 8005488:	200004b4 	.word	0x200004b4

0800548c <__malloc_unlock>:
 800548c:	4801      	ldr	r0, [pc, #4]	; (8005494 <__malloc_unlock+0x8>)
 800548e:	f7ff bf0e 	b.w	80052ae <__retarget_lock_release_recursive>
 8005492:	bf00      	nop
 8005494:	200004b4 	.word	0x200004b4

08005498 <__ssputs_r>:
 8005498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800549c:	461f      	mov	r7, r3
 800549e:	688e      	ldr	r6, [r1, #8]
 80054a0:	4682      	mov	sl, r0
 80054a2:	42be      	cmp	r6, r7
 80054a4:	460c      	mov	r4, r1
 80054a6:	4690      	mov	r8, r2
 80054a8:	680b      	ldr	r3, [r1, #0]
 80054aa:	d82c      	bhi.n	8005506 <__ssputs_r+0x6e>
 80054ac:	898a      	ldrh	r2, [r1, #12]
 80054ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054b2:	d026      	beq.n	8005502 <__ssputs_r+0x6a>
 80054b4:	6965      	ldr	r5, [r4, #20]
 80054b6:	6909      	ldr	r1, [r1, #16]
 80054b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054bc:	eba3 0901 	sub.w	r9, r3, r1
 80054c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054c4:	1c7b      	adds	r3, r7, #1
 80054c6:	444b      	add	r3, r9
 80054c8:	106d      	asrs	r5, r5, #1
 80054ca:	429d      	cmp	r5, r3
 80054cc:	bf38      	it	cc
 80054ce:	461d      	movcc	r5, r3
 80054d0:	0553      	lsls	r3, r2, #21
 80054d2:	d527      	bpl.n	8005524 <__ssputs_r+0x8c>
 80054d4:	4629      	mov	r1, r5
 80054d6:	f7ff ff53 	bl	8005380 <_malloc_r>
 80054da:	4606      	mov	r6, r0
 80054dc:	b360      	cbz	r0, 8005538 <__ssputs_r+0xa0>
 80054de:	464a      	mov	r2, r9
 80054e0:	6921      	ldr	r1, [r4, #16]
 80054e2:	f000 fafd 	bl	8005ae0 <memcpy>
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f0:	81a3      	strh	r3, [r4, #12]
 80054f2:	6126      	str	r6, [r4, #16]
 80054f4:	444e      	add	r6, r9
 80054f6:	6026      	str	r6, [r4, #0]
 80054f8:	463e      	mov	r6, r7
 80054fa:	6165      	str	r5, [r4, #20]
 80054fc:	eba5 0509 	sub.w	r5, r5, r9
 8005500:	60a5      	str	r5, [r4, #8]
 8005502:	42be      	cmp	r6, r7
 8005504:	d900      	bls.n	8005508 <__ssputs_r+0x70>
 8005506:	463e      	mov	r6, r7
 8005508:	4632      	mov	r2, r6
 800550a:	4641      	mov	r1, r8
 800550c:	6820      	ldr	r0, [r4, #0]
 800550e:	f000 faaf 	bl	8005a70 <memmove>
 8005512:	2000      	movs	r0, #0
 8005514:	68a3      	ldr	r3, [r4, #8]
 8005516:	1b9b      	subs	r3, r3, r6
 8005518:	60a3      	str	r3, [r4, #8]
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	4433      	add	r3, r6
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005524:	462a      	mov	r2, r5
 8005526:	f000 fae9 	bl	8005afc <_realloc_r>
 800552a:	4606      	mov	r6, r0
 800552c:	2800      	cmp	r0, #0
 800552e:	d1e0      	bne.n	80054f2 <__ssputs_r+0x5a>
 8005530:	4650      	mov	r0, sl
 8005532:	6921      	ldr	r1, [r4, #16]
 8005534:	f7ff febc 	bl	80052b0 <_free_r>
 8005538:	230c      	movs	r3, #12
 800553a:	f8ca 3000 	str.w	r3, [sl]
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005548:	81a3      	strh	r3, [r4, #12]
 800554a:	e7e9      	b.n	8005520 <__ssputs_r+0x88>

0800554c <_svfiprintf_r>:
 800554c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005550:	4698      	mov	r8, r3
 8005552:	898b      	ldrh	r3, [r1, #12]
 8005554:	4607      	mov	r7, r0
 8005556:	061b      	lsls	r3, r3, #24
 8005558:	460d      	mov	r5, r1
 800555a:	4614      	mov	r4, r2
 800555c:	b09d      	sub	sp, #116	; 0x74
 800555e:	d50e      	bpl.n	800557e <_svfiprintf_r+0x32>
 8005560:	690b      	ldr	r3, [r1, #16]
 8005562:	b963      	cbnz	r3, 800557e <_svfiprintf_r+0x32>
 8005564:	2140      	movs	r1, #64	; 0x40
 8005566:	f7ff ff0b 	bl	8005380 <_malloc_r>
 800556a:	6028      	str	r0, [r5, #0]
 800556c:	6128      	str	r0, [r5, #16]
 800556e:	b920      	cbnz	r0, 800557a <_svfiprintf_r+0x2e>
 8005570:	230c      	movs	r3, #12
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	f04f 30ff 	mov.w	r0, #4294967295
 8005578:	e0d0      	b.n	800571c <_svfiprintf_r+0x1d0>
 800557a:	2340      	movs	r3, #64	; 0x40
 800557c:	616b      	str	r3, [r5, #20]
 800557e:	2300      	movs	r3, #0
 8005580:	9309      	str	r3, [sp, #36]	; 0x24
 8005582:	2320      	movs	r3, #32
 8005584:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005588:	2330      	movs	r3, #48	; 0x30
 800558a:	f04f 0901 	mov.w	r9, #1
 800558e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005592:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005734 <_svfiprintf_r+0x1e8>
 8005596:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800559a:	4623      	mov	r3, r4
 800559c:	469a      	mov	sl, r3
 800559e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055a2:	b10a      	cbz	r2, 80055a8 <_svfiprintf_r+0x5c>
 80055a4:	2a25      	cmp	r2, #37	; 0x25
 80055a6:	d1f9      	bne.n	800559c <_svfiprintf_r+0x50>
 80055a8:	ebba 0b04 	subs.w	fp, sl, r4
 80055ac:	d00b      	beq.n	80055c6 <_svfiprintf_r+0x7a>
 80055ae:	465b      	mov	r3, fp
 80055b0:	4622      	mov	r2, r4
 80055b2:	4629      	mov	r1, r5
 80055b4:	4638      	mov	r0, r7
 80055b6:	f7ff ff6f 	bl	8005498 <__ssputs_r>
 80055ba:	3001      	adds	r0, #1
 80055bc:	f000 80a9 	beq.w	8005712 <_svfiprintf_r+0x1c6>
 80055c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055c2:	445a      	add	r2, fp
 80055c4:	9209      	str	r2, [sp, #36]	; 0x24
 80055c6:	f89a 3000 	ldrb.w	r3, [sl]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 80a1 	beq.w	8005712 <_svfiprintf_r+0x1c6>
 80055d0:	2300      	movs	r3, #0
 80055d2:	f04f 32ff 	mov.w	r2, #4294967295
 80055d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055da:	f10a 0a01 	add.w	sl, sl, #1
 80055de:	9304      	str	r3, [sp, #16]
 80055e0:	9307      	str	r3, [sp, #28]
 80055e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055e6:	931a      	str	r3, [sp, #104]	; 0x68
 80055e8:	4654      	mov	r4, sl
 80055ea:	2205      	movs	r2, #5
 80055ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f0:	4850      	ldr	r0, [pc, #320]	; (8005734 <_svfiprintf_r+0x1e8>)
 80055f2:	f000 fa67 	bl	8005ac4 <memchr>
 80055f6:	9a04      	ldr	r2, [sp, #16]
 80055f8:	b9d8      	cbnz	r0, 8005632 <_svfiprintf_r+0xe6>
 80055fa:	06d0      	lsls	r0, r2, #27
 80055fc:	bf44      	itt	mi
 80055fe:	2320      	movmi	r3, #32
 8005600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005604:	0711      	lsls	r1, r2, #28
 8005606:	bf44      	itt	mi
 8005608:	232b      	movmi	r3, #43	; 0x2b
 800560a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800560e:	f89a 3000 	ldrb.w	r3, [sl]
 8005612:	2b2a      	cmp	r3, #42	; 0x2a
 8005614:	d015      	beq.n	8005642 <_svfiprintf_r+0xf6>
 8005616:	4654      	mov	r4, sl
 8005618:	2000      	movs	r0, #0
 800561a:	f04f 0c0a 	mov.w	ip, #10
 800561e:	9a07      	ldr	r2, [sp, #28]
 8005620:	4621      	mov	r1, r4
 8005622:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005626:	3b30      	subs	r3, #48	; 0x30
 8005628:	2b09      	cmp	r3, #9
 800562a:	d94d      	bls.n	80056c8 <_svfiprintf_r+0x17c>
 800562c:	b1b0      	cbz	r0, 800565c <_svfiprintf_r+0x110>
 800562e:	9207      	str	r2, [sp, #28]
 8005630:	e014      	b.n	800565c <_svfiprintf_r+0x110>
 8005632:	eba0 0308 	sub.w	r3, r0, r8
 8005636:	fa09 f303 	lsl.w	r3, r9, r3
 800563a:	4313      	orrs	r3, r2
 800563c:	46a2      	mov	sl, r4
 800563e:	9304      	str	r3, [sp, #16]
 8005640:	e7d2      	b.n	80055e8 <_svfiprintf_r+0x9c>
 8005642:	9b03      	ldr	r3, [sp, #12]
 8005644:	1d19      	adds	r1, r3, #4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	9103      	str	r1, [sp, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	bfbb      	ittet	lt
 800564e:	425b      	neglt	r3, r3
 8005650:	f042 0202 	orrlt.w	r2, r2, #2
 8005654:	9307      	strge	r3, [sp, #28]
 8005656:	9307      	strlt	r3, [sp, #28]
 8005658:	bfb8      	it	lt
 800565a:	9204      	strlt	r2, [sp, #16]
 800565c:	7823      	ldrb	r3, [r4, #0]
 800565e:	2b2e      	cmp	r3, #46	; 0x2e
 8005660:	d10c      	bne.n	800567c <_svfiprintf_r+0x130>
 8005662:	7863      	ldrb	r3, [r4, #1]
 8005664:	2b2a      	cmp	r3, #42	; 0x2a
 8005666:	d134      	bne.n	80056d2 <_svfiprintf_r+0x186>
 8005668:	9b03      	ldr	r3, [sp, #12]
 800566a:	3402      	adds	r4, #2
 800566c:	1d1a      	adds	r2, r3, #4
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	9203      	str	r2, [sp, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	bfb8      	it	lt
 8005676:	f04f 33ff 	movlt.w	r3, #4294967295
 800567a:	9305      	str	r3, [sp, #20]
 800567c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005738 <_svfiprintf_r+0x1ec>
 8005680:	2203      	movs	r2, #3
 8005682:	4650      	mov	r0, sl
 8005684:	7821      	ldrb	r1, [r4, #0]
 8005686:	f000 fa1d 	bl	8005ac4 <memchr>
 800568a:	b138      	cbz	r0, 800569c <_svfiprintf_r+0x150>
 800568c:	2240      	movs	r2, #64	; 0x40
 800568e:	9b04      	ldr	r3, [sp, #16]
 8005690:	eba0 000a 	sub.w	r0, r0, sl
 8005694:	4082      	lsls	r2, r0
 8005696:	4313      	orrs	r3, r2
 8005698:	3401      	adds	r4, #1
 800569a:	9304      	str	r3, [sp, #16]
 800569c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a0:	2206      	movs	r2, #6
 80056a2:	4826      	ldr	r0, [pc, #152]	; (800573c <_svfiprintf_r+0x1f0>)
 80056a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056a8:	f000 fa0c 	bl	8005ac4 <memchr>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d038      	beq.n	8005722 <_svfiprintf_r+0x1d6>
 80056b0:	4b23      	ldr	r3, [pc, #140]	; (8005740 <_svfiprintf_r+0x1f4>)
 80056b2:	bb1b      	cbnz	r3, 80056fc <_svfiprintf_r+0x1b0>
 80056b4:	9b03      	ldr	r3, [sp, #12]
 80056b6:	3307      	adds	r3, #7
 80056b8:	f023 0307 	bic.w	r3, r3, #7
 80056bc:	3308      	adds	r3, #8
 80056be:	9303      	str	r3, [sp, #12]
 80056c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c2:	4433      	add	r3, r6
 80056c4:	9309      	str	r3, [sp, #36]	; 0x24
 80056c6:	e768      	b.n	800559a <_svfiprintf_r+0x4e>
 80056c8:	460c      	mov	r4, r1
 80056ca:	2001      	movs	r0, #1
 80056cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80056d0:	e7a6      	b.n	8005620 <_svfiprintf_r+0xd4>
 80056d2:	2300      	movs	r3, #0
 80056d4:	f04f 0c0a 	mov.w	ip, #10
 80056d8:	4619      	mov	r1, r3
 80056da:	3401      	adds	r4, #1
 80056dc:	9305      	str	r3, [sp, #20]
 80056de:	4620      	mov	r0, r4
 80056e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056e4:	3a30      	subs	r2, #48	; 0x30
 80056e6:	2a09      	cmp	r2, #9
 80056e8:	d903      	bls.n	80056f2 <_svfiprintf_r+0x1a6>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0c6      	beq.n	800567c <_svfiprintf_r+0x130>
 80056ee:	9105      	str	r1, [sp, #20]
 80056f0:	e7c4      	b.n	800567c <_svfiprintf_r+0x130>
 80056f2:	4604      	mov	r4, r0
 80056f4:	2301      	movs	r3, #1
 80056f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80056fa:	e7f0      	b.n	80056de <_svfiprintf_r+0x192>
 80056fc:	ab03      	add	r3, sp, #12
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	462a      	mov	r2, r5
 8005702:	4638      	mov	r0, r7
 8005704:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <_svfiprintf_r+0x1f8>)
 8005706:	a904      	add	r1, sp, #16
 8005708:	f3af 8000 	nop.w
 800570c:	1c42      	adds	r2, r0, #1
 800570e:	4606      	mov	r6, r0
 8005710:	d1d6      	bne.n	80056c0 <_svfiprintf_r+0x174>
 8005712:	89ab      	ldrh	r3, [r5, #12]
 8005714:	065b      	lsls	r3, r3, #25
 8005716:	f53f af2d 	bmi.w	8005574 <_svfiprintf_r+0x28>
 800571a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800571c:	b01d      	add	sp, #116	; 0x74
 800571e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005722:	ab03      	add	r3, sp, #12
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	462a      	mov	r2, r5
 8005728:	4638      	mov	r0, r7
 800572a:	4b06      	ldr	r3, [pc, #24]	; (8005744 <_svfiprintf_r+0x1f8>)
 800572c:	a904      	add	r1, sp, #16
 800572e:	f000 f87d 	bl	800582c <_printf_i>
 8005732:	e7eb      	b.n	800570c <_svfiprintf_r+0x1c0>
 8005734:	08005d82 	.word	0x08005d82
 8005738:	08005d88 	.word	0x08005d88
 800573c:	08005d8c 	.word	0x08005d8c
 8005740:	00000000 	.word	0x00000000
 8005744:	08005499 	.word	0x08005499

08005748 <_printf_common>:
 8005748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800574c:	4616      	mov	r6, r2
 800574e:	4699      	mov	r9, r3
 8005750:	688a      	ldr	r2, [r1, #8]
 8005752:	690b      	ldr	r3, [r1, #16]
 8005754:	4607      	mov	r7, r0
 8005756:	4293      	cmp	r3, r2
 8005758:	bfb8      	it	lt
 800575a:	4613      	movlt	r3, r2
 800575c:	6033      	str	r3, [r6, #0]
 800575e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005762:	460c      	mov	r4, r1
 8005764:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005768:	b10a      	cbz	r2, 800576e <_printf_common+0x26>
 800576a:	3301      	adds	r3, #1
 800576c:	6033      	str	r3, [r6, #0]
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	0699      	lsls	r1, r3, #26
 8005772:	bf42      	ittt	mi
 8005774:	6833      	ldrmi	r3, [r6, #0]
 8005776:	3302      	addmi	r3, #2
 8005778:	6033      	strmi	r3, [r6, #0]
 800577a:	6825      	ldr	r5, [r4, #0]
 800577c:	f015 0506 	ands.w	r5, r5, #6
 8005780:	d106      	bne.n	8005790 <_printf_common+0x48>
 8005782:	f104 0a19 	add.w	sl, r4, #25
 8005786:	68e3      	ldr	r3, [r4, #12]
 8005788:	6832      	ldr	r2, [r6, #0]
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	42ab      	cmp	r3, r5
 800578e:	dc2b      	bgt.n	80057e8 <_printf_common+0xa0>
 8005790:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005794:	1e13      	subs	r3, r2, #0
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	bf18      	it	ne
 800579a:	2301      	movne	r3, #1
 800579c:	0692      	lsls	r2, r2, #26
 800579e:	d430      	bmi.n	8005802 <_printf_common+0xba>
 80057a0:	4649      	mov	r1, r9
 80057a2:	4638      	mov	r0, r7
 80057a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057a8:	47c0      	blx	r8
 80057aa:	3001      	adds	r0, #1
 80057ac:	d023      	beq.n	80057f6 <_printf_common+0xae>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	6922      	ldr	r2, [r4, #16]
 80057b2:	f003 0306 	and.w	r3, r3, #6
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	bf14      	ite	ne
 80057ba:	2500      	movne	r5, #0
 80057bc:	6833      	ldreq	r3, [r6, #0]
 80057be:	f04f 0600 	mov.w	r6, #0
 80057c2:	bf08      	it	eq
 80057c4:	68e5      	ldreq	r5, [r4, #12]
 80057c6:	f104 041a 	add.w	r4, r4, #26
 80057ca:	bf08      	it	eq
 80057cc:	1aed      	subeq	r5, r5, r3
 80057ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80057d2:	bf08      	it	eq
 80057d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d8:	4293      	cmp	r3, r2
 80057da:	bfc4      	itt	gt
 80057dc:	1a9b      	subgt	r3, r3, r2
 80057de:	18ed      	addgt	r5, r5, r3
 80057e0:	42b5      	cmp	r5, r6
 80057e2:	d11a      	bne.n	800581a <_printf_common+0xd2>
 80057e4:	2000      	movs	r0, #0
 80057e6:	e008      	b.n	80057fa <_printf_common+0xb2>
 80057e8:	2301      	movs	r3, #1
 80057ea:	4652      	mov	r2, sl
 80057ec:	4649      	mov	r1, r9
 80057ee:	4638      	mov	r0, r7
 80057f0:	47c0      	blx	r8
 80057f2:	3001      	adds	r0, #1
 80057f4:	d103      	bne.n	80057fe <_printf_common+0xb6>
 80057f6:	f04f 30ff 	mov.w	r0, #4294967295
 80057fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057fe:	3501      	adds	r5, #1
 8005800:	e7c1      	b.n	8005786 <_printf_common+0x3e>
 8005802:	2030      	movs	r0, #48	; 0x30
 8005804:	18e1      	adds	r1, r4, r3
 8005806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005810:	4422      	add	r2, r4
 8005812:	3302      	adds	r3, #2
 8005814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005818:	e7c2      	b.n	80057a0 <_printf_common+0x58>
 800581a:	2301      	movs	r3, #1
 800581c:	4622      	mov	r2, r4
 800581e:	4649      	mov	r1, r9
 8005820:	4638      	mov	r0, r7
 8005822:	47c0      	blx	r8
 8005824:	3001      	adds	r0, #1
 8005826:	d0e6      	beq.n	80057f6 <_printf_common+0xae>
 8005828:	3601      	adds	r6, #1
 800582a:	e7d9      	b.n	80057e0 <_printf_common+0x98>

0800582c <_printf_i>:
 800582c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005830:	7e0f      	ldrb	r7, [r1, #24]
 8005832:	4691      	mov	r9, r2
 8005834:	2f78      	cmp	r7, #120	; 0x78
 8005836:	4680      	mov	r8, r0
 8005838:	460c      	mov	r4, r1
 800583a:	469a      	mov	sl, r3
 800583c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800583e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005842:	d807      	bhi.n	8005854 <_printf_i+0x28>
 8005844:	2f62      	cmp	r7, #98	; 0x62
 8005846:	d80a      	bhi.n	800585e <_printf_i+0x32>
 8005848:	2f00      	cmp	r7, #0
 800584a:	f000 80d5 	beq.w	80059f8 <_printf_i+0x1cc>
 800584e:	2f58      	cmp	r7, #88	; 0x58
 8005850:	f000 80c1 	beq.w	80059d6 <_printf_i+0x1aa>
 8005854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800585c:	e03a      	b.n	80058d4 <_printf_i+0xa8>
 800585e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005862:	2b15      	cmp	r3, #21
 8005864:	d8f6      	bhi.n	8005854 <_printf_i+0x28>
 8005866:	a101      	add	r1, pc, #4	; (adr r1, 800586c <_printf_i+0x40>)
 8005868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800586c:	080058c5 	.word	0x080058c5
 8005870:	080058d9 	.word	0x080058d9
 8005874:	08005855 	.word	0x08005855
 8005878:	08005855 	.word	0x08005855
 800587c:	08005855 	.word	0x08005855
 8005880:	08005855 	.word	0x08005855
 8005884:	080058d9 	.word	0x080058d9
 8005888:	08005855 	.word	0x08005855
 800588c:	08005855 	.word	0x08005855
 8005890:	08005855 	.word	0x08005855
 8005894:	08005855 	.word	0x08005855
 8005898:	080059df 	.word	0x080059df
 800589c:	08005905 	.word	0x08005905
 80058a0:	08005999 	.word	0x08005999
 80058a4:	08005855 	.word	0x08005855
 80058a8:	08005855 	.word	0x08005855
 80058ac:	08005a01 	.word	0x08005a01
 80058b0:	08005855 	.word	0x08005855
 80058b4:	08005905 	.word	0x08005905
 80058b8:	08005855 	.word	0x08005855
 80058bc:	08005855 	.word	0x08005855
 80058c0:	080059a1 	.word	0x080059a1
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	1d1a      	adds	r2, r3, #4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	602a      	str	r2, [r5, #0]
 80058cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058d4:	2301      	movs	r3, #1
 80058d6:	e0a0      	b.n	8005a1a <_printf_i+0x1ee>
 80058d8:	6820      	ldr	r0, [r4, #0]
 80058da:	682b      	ldr	r3, [r5, #0]
 80058dc:	0607      	lsls	r7, r0, #24
 80058de:	f103 0104 	add.w	r1, r3, #4
 80058e2:	6029      	str	r1, [r5, #0]
 80058e4:	d501      	bpl.n	80058ea <_printf_i+0xbe>
 80058e6:	681e      	ldr	r6, [r3, #0]
 80058e8:	e003      	b.n	80058f2 <_printf_i+0xc6>
 80058ea:	0646      	lsls	r6, r0, #25
 80058ec:	d5fb      	bpl.n	80058e6 <_printf_i+0xba>
 80058ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058f2:	2e00      	cmp	r6, #0
 80058f4:	da03      	bge.n	80058fe <_printf_i+0xd2>
 80058f6:	232d      	movs	r3, #45	; 0x2d
 80058f8:	4276      	negs	r6, r6
 80058fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058fe:	230a      	movs	r3, #10
 8005900:	4859      	ldr	r0, [pc, #356]	; (8005a68 <_printf_i+0x23c>)
 8005902:	e012      	b.n	800592a <_printf_i+0xfe>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	6820      	ldr	r0, [r4, #0]
 8005908:	1d19      	adds	r1, r3, #4
 800590a:	6029      	str	r1, [r5, #0]
 800590c:	0605      	lsls	r5, r0, #24
 800590e:	d501      	bpl.n	8005914 <_printf_i+0xe8>
 8005910:	681e      	ldr	r6, [r3, #0]
 8005912:	e002      	b.n	800591a <_printf_i+0xee>
 8005914:	0641      	lsls	r1, r0, #25
 8005916:	d5fb      	bpl.n	8005910 <_printf_i+0xe4>
 8005918:	881e      	ldrh	r6, [r3, #0]
 800591a:	2f6f      	cmp	r7, #111	; 0x6f
 800591c:	bf0c      	ite	eq
 800591e:	2308      	moveq	r3, #8
 8005920:	230a      	movne	r3, #10
 8005922:	4851      	ldr	r0, [pc, #324]	; (8005a68 <_printf_i+0x23c>)
 8005924:	2100      	movs	r1, #0
 8005926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800592a:	6865      	ldr	r5, [r4, #4]
 800592c:	2d00      	cmp	r5, #0
 800592e:	bfa8      	it	ge
 8005930:	6821      	ldrge	r1, [r4, #0]
 8005932:	60a5      	str	r5, [r4, #8]
 8005934:	bfa4      	itt	ge
 8005936:	f021 0104 	bicge.w	r1, r1, #4
 800593a:	6021      	strge	r1, [r4, #0]
 800593c:	b90e      	cbnz	r6, 8005942 <_printf_i+0x116>
 800593e:	2d00      	cmp	r5, #0
 8005940:	d04b      	beq.n	80059da <_printf_i+0x1ae>
 8005942:	4615      	mov	r5, r2
 8005944:	fbb6 f1f3 	udiv	r1, r6, r3
 8005948:	fb03 6711 	mls	r7, r3, r1, r6
 800594c:	5dc7      	ldrb	r7, [r0, r7]
 800594e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005952:	4637      	mov	r7, r6
 8005954:	42bb      	cmp	r3, r7
 8005956:	460e      	mov	r6, r1
 8005958:	d9f4      	bls.n	8005944 <_printf_i+0x118>
 800595a:	2b08      	cmp	r3, #8
 800595c:	d10b      	bne.n	8005976 <_printf_i+0x14a>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	07de      	lsls	r6, r3, #31
 8005962:	d508      	bpl.n	8005976 <_printf_i+0x14a>
 8005964:	6923      	ldr	r3, [r4, #16]
 8005966:	6861      	ldr	r1, [r4, #4]
 8005968:	4299      	cmp	r1, r3
 800596a:	bfde      	ittt	le
 800596c:	2330      	movle	r3, #48	; 0x30
 800596e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005972:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005976:	1b52      	subs	r2, r2, r5
 8005978:	6122      	str	r2, [r4, #16]
 800597a:	464b      	mov	r3, r9
 800597c:	4621      	mov	r1, r4
 800597e:	4640      	mov	r0, r8
 8005980:	f8cd a000 	str.w	sl, [sp]
 8005984:	aa03      	add	r2, sp, #12
 8005986:	f7ff fedf 	bl	8005748 <_printf_common>
 800598a:	3001      	adds	r0, #1
 800598c:	d14a      	bne.n	8005a24 <_printf_i+0x1f8>
 800598e:	f04f 30ff 	mov.w	r0, #4294967295
 8005992:	b004      	add	sp, #16
 8005994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	f043 0320 	orr.w	r3, r3, #32
 800599e:	6023      	str	r3, [r4, #0]
 80059a0:	2778      	movs	r7, #120	; 0x78
 80059a2:	4832      	ldr	r0, [pc, #200]	; (8005a6c <_printf_i+0x240>)
 80059a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	6829      	ldr	r1, [r5, #0]
 80059ac:	061f      	lsls	r7, r3, #24
 80059ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80059b2:	d402      	bmi.n	80059ba <_printf_i+0x18e>
 80059b4:	065f      	lsls	r7, r3, #25
 80059b6:	bf48      	it	mi
 80059b8:	b2b6      	uxthmi	r6, r6
 80059ba:	07df      	lsls	r7, r3, #31
 80059bc:	bf48      	it	mi
 80059be:	f043 0320 	orrmi.w	r3, r3, #32
 80059c2:	6029      	str	r1, [r5, #0]
 80059c4:	bf48      	it	mi
 80059c6:	6023      	strmi	r3, [r4, #0]
 80059c8:	b91e      	cbnz	r6, 80059d2 <_printf_i+0x1a6>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	f023 0320 	bic.w	r3, r3, #32
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	2310      	movs	r3, #16
 80059d4:	e7a6      	b.n	8005924 <_printf_i+0xf8>
 80059d6:	4824      	ldr	r0, [pc, #144]	; (8005a68 <_printf_i+0x23c>)
 80059d8:	e7e4      	b.n	80059a4 <_printf_i+0x178>
 80059da:	4615      	mov	r5, r2
 80059dc:	e7bd      	b.n	800595a <_printf_i+0x12e>
 80059de:	682b      	ldr	r3, [r5, #0]
 80059e0:	6826      	ldr	r6, [r4, #0]
 80059e2:	1d18      	adds	r0, r3, #4
 80059e4:	6961      	ldr	r1, [r4, #20]
 80059e6:	6028      	str	r0, [r5, #0]
 80059e8:	0635      	lsls	r5, r6, #24
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	d501      	bpl.n	80059f2 <_printf_i+0x1c6>
 80059ee:	6019      	str	r1, [r3, #0]
 80059f0:	e002      	b.n	80059f8 <_printf_i+0x1cc>
 80059f2:	0670      	lsls	r0, r6, #25
 80059f4:	d5fb      	bpl.n	80059ee <_printf_i+0x1c2>
 80059f6:	8019      	strh	r1, [r3, #0]
 80059f8:	2300      	movs	r3, #0
 80059fa:	4615      	mov	r5, r2
 80059fc:	6123      	str	r3, [r4, #16]
 80059fe:	e7bc      	b.n	800597a <_printf_i+0x14e>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	2100      	movs	r1, #0
 8005a04:	1d1a      	adds	r2, r3, #4
 8005a06:	602a      	str	r2, [r5, #0]
 8005a08:	681d      	ldr	r5, [r3, #0]
 8005a0a:	6862      	ldr	r2, [r4, #4]
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	f000 f859 	bl	8005ac4 <memchr>
 8005a12:	b108      	cbz	r0, 8005a18 <_printf_i+0x1ec>
 8005a14:	1b40      	subs	r0, r0, r5
 8005a16:	6060      	str	r0, [r4, #4]
 8005a18:	6863      	ldr	r3, [r4, #4]
 8005a1a:	6123      	str	r3, [r4, #16]
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a22:	e7aa      	b.n	800597a <_printf_i+0x14e>
 8005a24:	462a      	mov	r2, r5
 8005a26:	4649      	mov	r1, r9
 8005a28:	4640      	mov	r0, r8
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	47d0      	blx	sl
 8005a2e:	3001      	adds	r0, #1
 8005a30:	d0ad      	beq.n	800598e <_printf_i+0x162>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	079b      	lsls	r3, r3, #30
 8005a36:	d413      	bmi.n	8005a60 <_printf_i+0x234>
 8005a38:	68e0      	ldr	r0, [r4, #12]
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	4298      	cmp	r0, r3
 8005a3e:	bfb8      	it	lt
 8005a40:	4618      	movlt	r0, r3
 8005a42:	e7a6      	b.n	8005992 <_printf_i+0x166>
 8005a44:	2301      	movs	r3, #1
 8005a46:	4632      	mov	r2, r6
 8005a48:	4649      	mov	r1, r9
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	47d0      	blx	sl
 8005a4e:	3001      	adds	r0, #1
 8005a50:	d09d      	beq.n	800598e <_printf_i+0x162>
 8005a52:	3501      	adds	r5, #1
 8005a54:	68e3      	ldr	r3, [r4, #12]
 8005a56:	9903      	ldr	r1, [sp, #12]
 8005a58:	1a5b      	subs	r3, r3, r1
 8005a5a:	42ab      	cmp	r3, r5
 8005a5c:	dcf2      	bgt.n	8005a44 <_printf_i+0x218>
 8005a5e:	e7eb      	b.n	8005a38 <_printf_i+0x20c>
 8005a60:	2500      	movs	r5, #0
 8005a62:	f104 0619 	add.w	r6, r4, #25
 8005a66:	e7f5      	b.n	8005a54 <_printf_i+0x228>
 8005a68:	08005d93 	.word	0x08005d93
 8005a6c:	08005da4 	.word	0x08005da4

08005a70 <memmove>:
 8005a70:	4288      	cmp	r0, r1
 8005a72:	b510      	push	{r4, lr}
 8005a74:	eb01 0402 	add.w	r4, r1, r2
 8005a78:	d902      	bls.n	8005a80 <memmove+0x10>
 8005a7a:	4284      	cmp	r4, r0
 8005a7c:	4623      	mov	r3, r4
 8005a7e:	d807      	bhi.n	8005a90 <memmove+0x20>
 8005a80:	1e43      	subs	r3, r0, #1
 8005a82:	42a1      	cmp	r1, r4
 8005a84:	d008      	beq.n	8005a98 <memmove+0x28>
 8005a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a8e:	e7f8      	b.n	8005a82 <memmove+0x12>
 8005a90:	4601      	mov	r1, r0
 8005a92:	4402      	add	r2, r0
 8005a94:	428a      	cmp	r2, r1
 8005a96:	d100      	bne.n	8005a9a <memmove+0x2a>
 8005a98:	bd10      	pop	{r4, pc}
 8005a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005aa2:	e7f7      	b.n	8005a94 <memmove+0x24>

08005aa4 <_sbrk_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	4d05      	ldr	r5, [pc, #20]	; (8005ac0 <_sbrk_r+0x1c>)
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4608      	mov	r0, r1
 8005aae:	602b      	str	r3, [r5, #0]
 8005ab0:	f7fc fb4a 	bl	8002148 <_sbrk>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_sbrk_r+0x1a>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_sbrk_r+0x1a>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	200004b0 	.word	0x200004b0

08005ac4 <memchr>:
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	b510      	push	{r4, lr}
 8005ac8:	b2c9      	uxtb	r1, r1
 8005aca:	4402      	add	r2, r0
 8005acc:	4293      	cmp	r3, r2
 8005ace:	4618      	mov	r0, r3
 8005ad0:	d101      	bne.n	8005ad6 <memchr+0x12>
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	e003      	b.n	8005ade <memchr+0x1a>
 8005ad6:	7804      	ldrb	r4, [r0, #0]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	428c      	cmp	r4, r1
 8005adc:	d1f6      	bne.n	8005acc <memchr+0x8>
 8005ade:	bd10      	pop	{r4, pc}

08005ae0 <memcpy>:
 8005ae0:	440a      	add	r2, r1
 8005ae2:	4291      	cmp	r1, r2
 8005ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ae8:	d100      	bne.n	8005aec <memcpy+0xc>
 8005aea:	4770      	bx	lr
 8005aec:	b510      	push	{r4, lr}
 8005aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005af2:	4291      	cmp	r1, r2
 8005af4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005af8:	d1f9      	bne.n	8005aee <memcpy+0xe>
 8005afa:	bd10      	pop	{r4, pc}

08005afc <_realloc_r>:
 8005afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b00:	4680      	mov	r8, r0
 8005b02:	4614      	mov	r4, r2
 8005b04:	460e      	mov	r6, r1
 8005b06:	b921      	cbnz	r1, 8005b12 <_realloc_r+0x16>
 8005b08:	4611      	mov	r1, r2
 8005b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0e:	f7ff bc37 	b.w	8005380 <_malloc_r>
 8005b12:	b92a      	cbnz	r2, 8005b20 <_realloc_r+0x24>
 8005b14:	f7ff fbcc 	bl	80052b0 <_free_r>
 8005b18:	4625      	mov	r5, r4
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b20:	f000 f81b 	bl	8005b5a <_malloc_usable_size_r>
 8005b24:	4284      	cmp	r4, r0
 8005b26:	4607      	mov	r7, r0
 8005b28:	d802      	bhi.n	8005b30 <_realloc_r+0x34>
 8005b2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b2e:	d812      	bhi.n	8005b56 <_realloc_r+0x5a>
 8005b30:	4621      	mov	r1, r4
 8005b32:	4640      	mov	r0, r8
 8005b34:	f7ff fc24 	bl	8005380 <_malloc_r>
 8005b38:	4605      	mov	r5, r0
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d0ed      	beq.n	8005b1a <_realloc_r+0x1e>
 8005b3e:	42bc      	cmp	r4, r7
 8005b40:	4622      	mov	r2, r4
 8005b42:	4631      	mov	r1, r6
 8005b44:	bf28      	it	cs
 8005b46:	463a      	movcs	r2, r7
 8005b48:	f7ff ffca 	bl	8005ae0 <memcpy>
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4640      	mov	r0, r8
 8005b50:	f7ff fbae 	bl	80052b0 <_free_r>
 8005b54:	e7e1      	b.n	8005b1a <_realloc_r+0x1e>
 8005b56:	4635      	mov	r5, r6
 8005b58:	e7df      	b.n	8005b1a <_realloc_r+0x1e>

08005b5a <_malloc_usable_size_r>:
 8005b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b5e:	1f18      	subs	r0, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	bfbc      	itt	lt
 8005b64:	580b      	ldrlt	r3, [r1, r0]
 8005b66:	18c0      	addlt	r0, r0, r3
 8005b68:	4770      	bx	lr
	...

08005b6c <_init>:
 8005b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6e:	bf00      	nop
 8005b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b72:	bc08      	pop	{r3}
 8005b74:	469e      	mov	lr, r3
 8005b76:	4770      	bx	lr

08005b78 <_fini>:
 8005b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7a:	bf00      	nop
 8005b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7e:	bc08      	pop	{r3}
 8005b80:	469e      	mov	lr, r3
 8005b82:	4770      	bx	lr
